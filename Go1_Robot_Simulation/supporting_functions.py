import numpy as np
from numpy.linalg import pinv
import math
from numpy import linalg as LA
import quadprog #import solve_qp
path1= "C:\\Users\Amir_Iqbal\\OneDrive - University of Massachusetts Lowell - UMass Lowell\Ocean_waves\\A1_robot\\Go1_KinJacDyn"
path3= "C:\\Users\Amir_Iqbal\\OneDrive - University of Massachusetts Lowell - UMass Lowell\Desktop\\Go1_Robot_Simulation\\Go1_KinJacDyn"
import matlab.engine
eng = matlab.engine.start_matlab()
eng.cd(path1,nargout=0)

def DRS_Z_motion(t):
    # pz_DRS = 0.2*np.sin(5*t)
    pz_DRS = 0.2*(np.sin(4*t)+np.sin((t**2)/40))
    return pz_DRS
def DRS_Z_velocity(t):
    # pz_DRS = 0.2*np.sin(5*t)
    # vz_DRS = 0.2*np.cos(5*t)*5
    vz_DRS = 0.2*(np.cos(4*t)*4+np.cos((t**2)/40)*(2*t/40))
    return vz_DRS
def DRS_Z_acceleration(t):
    pz_DRS = 0.2*np.sin(5*t)
    vz_DRS = 0.2*np.cos(5*t)*5
    # az_DRS =-5*5*0.2*np.sin(5*t)
    az_DRS = 0.2*(-np.sin(4*t)*4*4-np.sin((t**2)/40)*(2*t/40)**2+np.cos((t**2)/40)*(2/40))
    return az_DRS
## QP solver
def quadprog_solve_qp(P, q, G=None, h=None, A=None, b=None): #P=H, q=c_obj, G=A_ineq, h=b_ineq, A= A_eq, b=b_eq
    qp_G = .5 * (P + P.T)   # make sure P is symmetric
    qp_a = -q
    if A is not None:
        qp_C = -np.vstack([A, G]).T
        qp_b = -np.hstack([b, h])
        meq = A.shape[0]
    else:  # no equality constraint
        qp_C = -G.T
        qp_b = -h
        meq = 0
    return quadprog.solve_qp(qp_G, qp_a, qp_C, qp_b, meq)[0]

def FR_endpoints(q):
    var1=q
    t104 = np.cos(var1[5]);
    t185 = np.sin(var1[3]);
    t244 = np.sin(var1[4]);
    t259 = t104*t185*t244;
    t264 = np.cos(var1[3]);
    t273 = np.sin(var1[5]);
    t294 = -1.*t264*t273;
    t310 = t259 + t294;
    t323 = np.cos(var1[6]);
    t355 = t264*t104*t244;
    t366 = t185*t273;
    t409 = t355 + t366;
    t412 = np.sin(var1[6]);
    t11 = np.cos(var1[4]);
    t448 = np.cos(var1[7]);
    t450 = t323*t409;
    t472 = -1.*t412;
    t474 = 0. + t472;
    t482 = t310*t474;
    t489 = 0. + t450 + t482;
    t491 = t448*t489;
    t502 = t11*t104;
    t509 = 0. + t502;
    t516 = np.sin(var1[7]);
    t517 = t509*t516;
    t525 = 0. + t491 + t517;
    t331 = 0. + t323;
    t690 = t264*t104;
    t692 = t185*t244*t273;
    t695 = t690 + t692;
    t702 = -1.*t104*t185;
    t704 = t264*t244*t273;
    t711 = t702 + t704;
    t552 = np.cos(var1[8]);
    t556 = 0. + t552;
    t750 = t323*t711;
    t822 = t695*t474;
    t838 = 0. + t750 + t822;
    t850 = t448*t838;
    t857 = t11*t273;
    t859 = 0. + t857;
    t861 = t859*t516;
    t868 = 0. + t850 + t861;
    t641 = np.sin(var1[8]);
    t927 = t264*t11*t323;
    t950 = t11*t185*t474;
    t951 = 0. + t927 + t950;
    t952 = t448*t951;
    t954 = -1.*t244;
    t965 = 0. + t954;
    t967 = t965*t516;
    t981 = 0. + t952 + t967;
    p_output1 = np.zeros(3)
    p_output1[0]=0.21935*t104*t11 - 0.0875*t310 - 0.037*(0. + t310*t331 + t409*t412) - 0.25*t525 - 0.27*(t525*t556 + (0. + t448*t509 - 1.*t489*t516)*t641) + var1[0];
    p_output1[1]=0.21935*t11*t273 - 0.0875*t695 - 0.037*(0. + t331*t695 + t412*t711) - 0.25*t868 - 0.27*(t641*(0. - 1.*t516*t838 + t448*t859) + t556*t868) + var1[1];
    p_output1[2]=-0.0875*t11*t185 - 0.21935*t244 - 0.037*(0. + t11*t185*t331 + t11*t264*t412) - 0.25*t981 - 0.27*(t641*(0. - 1.*t516*t951 + t448*t965) + t556*t981) + var1[2];
    return p_output1

def FL_endpoints(q):
    var1=q
    t33 = np.cos(var1[5]);
    t55 = np.sin(var1[3]);
    t104 = np.sin(var1[4]);
    t124 = t33*t55*t104;
    t125 = np.cos(var1[3]);
    t149 = np.sin(var1[5]);
    t156 = -1.*t125*t149;
    t158 = t124 + t156;
    t11 = np.cos(var1[4]);
    t240 = np.sin(var1[9]);
    t200 = np.cos(var1[9]);
    t244 = t125*t33*t104;
    t259 = t55*t149;
    t264 = t244 + t259;
    t310 = t11*t33;
    t317 = 0. + t310;
    t322 = np.sin(var1[10]);
    t323 = t317*t322;
    t331 = np.cos(var1[10]);
    t333 = -1.*t240;
    t342 = 0. + t333;
    t355 = t342*t158;
    t366 = t200*t264;
    t403 = 0. + t355 + t366;
    t409 = t331*t403;
    t410 = 0. + t323 + t409;
    t230 = 0. + t200;
    t502 = t125*t33;
    t509 = t55*t104*t149;
    t516 = t502 + t509;
    t522 = -1.*t33*t55;
    t525 = t125*t104*t149;
    t545 = t522 + t525;
    t424 = np.cos(var1[11]);
    t436 = 0. + t424;
    t612 = t11*t149;
    t624 = 0. + t612;
    t641 = t322*t624;
    t646 = t200*t545;
    t669 = t342*t516;
    t670 = 0. + t646 + t669;
    t676 = t331*t670;
    t682 = 0. + t641 + t676;
    t442 = np.sin(var1[11]);
    t750 = t200*t125*t11;
    t822 = t11*t342*t55;
    t833 = 0. + t750 + t822;
    t850 = -1.*t104;
    t857 = 0. + t850;
    t869 = t331*t833;
    t870 = t322*t857;
    t871 = 0. + t869 + t870;
    p_output1 = np.zeros(3)
    p_output1[0]=0.0875*t158 + 0.037*(0. + t158*t230 + t240*t264) + 0.21935*t11*t33 - 0.25*t410 - 0.27*(t410*t436 + (0. + t317*t331 - 1.*t322*t403)*t442) + var1[0];
    p_output1[1]=0.21935*t11*t149 + 0.0875*t516 + 0.037*(0. + t230*t516 + t240*t545) - 0.25*t682 - 0.27*(t442*(0. + t331*t624 - 1.*t322*t670) + t436*t682) + var1[1];
    p_output1[2]=-0.21935*t104 + 0.0875*t11*t55 + 0.037*(0. + t11*t125*t240 + t11*t230*t55) - 0.25*t871 - 0.27*(t442*(0. - 1.*t322*t833 + t331*t857) + t436*t871) + var1[2];
    return p_output1


def RL_endpoints(q):
    var1=q
    t158 = np.cos(var1[5]);
    t259 = np.sin(var1[3]);
    t310 = np.sin(var1[4]);
    t317 = t158*t259*t310;
    t323 = np.cos(var1[3]);
    t331 = np.sin(var1[5]);
    t342 = -1.*t323*t331;
    t355 = t317 + t342;
    t11 = np.cos(var1[4]);
    t442 = np.sin(var1[15]);
    t409 = np.cos(var1[15]);
    t448 = t323*t158*t310;
    t450 = t259*t331;
    t474 = t448 + t450;
    t509 = t11*t158;
    t517 = 0. + t509;
    t525 = np.sin(var1[16]);
    t545 = t517*t525;
    t552 = np.cos(var1[16]);
    t556 = -1.*t442;
    t604 = 0. + t556;
    t611 = t604*t355;
    t612 = t409*t474;
    t624 = 0. + t611 + t612;
    t641 = t552*t624;
    t669 = 0. + t545 + t641;
    t424 = 0. + t409;
    t726 = t323*t158;
    t743 = t259*t310*t331;
    t750 = t726 + t743;
    t850 = -1.*t158*t259;
    t857 = t323*t310*t331;
    t859 = t850 + t857;
    t682 = np.cos(var1[17]);
    t688 = 0. + t682;
    t871 = t11*t331;
    t874 = 0. + t871;
    t876 = t525*t874;
    t887 = t409*t859;
    t888 = t604*t750;
    t898 = 0. + t887 + t888;
    t900 = t552*t898;
    t904 = 0. + t876 + t900;
    t690 = np.sin(var1[17]);
    t1013 = t409*t323*t11;
    t1019 = t11*t604*t259;
    t1025 = 0. + t1013 + t1019;
    t1043 = -1.*t310;
    t1045 = 0. + t1043;
    t1058 = t552*t1025;
    t1063 = t525*t1045;
    t1067 = 0. + t1058 + t1063;
    p_output1 = np.zeros(3)
    p_output1[0]=-0.21935*t11*t158 + 0.0875*t355 + 0.037*(0. + t355*t424 + t442*t474) - 0.25*t669 - 0.27*(t669*t688 + (0. + t517*t552 - 1.*t525*t624)*t690) + var1[0];
    p_output1[1]=-0.21935*t11*t331 + 0.0875*t750 + 0.037*(0. + t424*t750 + t442*t859) - 0.25*t904 - 0.27*(t690*(0. + t552*t874 - 1.*t525*t898) + t688*t904) + var1[1];
    p_output1[2]=-0.25*t1067 + 0.0875*t11*t259 + 0.21935*t310 + 0.037*(0. + t11*t259*t424 + t11*t323*t442) - 0.27*(t1067*t688 + (0. - 1.*t1025*t525 + t1045*t552)*t690) + var1[2];
    return p_output1

def RR_endpoints(q):
    var1=q
    t34 = np.cos(var1[5]);
    t124 = np.sin(var1[3]);
    t158 = np.sin(var1[4]);
    t185 = t34*t124*t158;
    t200 = np.cos(var1[3]);
    t230 = np.sin(var1[5]);
    t236 = -1.*t200*t230;
    t244 = t185 + t236;
    t11 = np.cos(var1[4]);
    t306 = np.sin(var1[12]);
    t264 = np.cos(var1[12]);
    t310 = t200*t34*t158;
    t317 = t124*t230;
    t323 = t310 + t317;
    t366 = t11*t34;
    t409 = 0. + t366;
    t410 = np.sin(var1[13]);
    t412 = t409*t410;
    t424 = np.cos(var1[13]);
    t436 = -1.*t306;
    t438 = 0. + t436;
    t442 = t438*t244;
    t448 = t264*t323;
    t449 = 0. + t442 + t448;
    t450 = t424*t449;
    t472 = 0. + t412 + t450;
    t273 = 0. + t264;
    t611 = t200*t34;
    t612 = t124*t158*t230;
    t624 = t611 + t612;
    t646 = -1.*t34*t124;
    t669 = t200*t158*t230;
    t676 = t646 + t669;
    t482 = np.cos(var1[14]);
    t489 = 0. + t482;
    t692 = t11*t230;
    t695 = 0. + t692;
    t699 = t410*t695;
    t700 = t264*t676;
    t702 = t438*t624;
    t703 = 0. + t700 + t702;
    t704 = t424*t703;
    t711 = 0. + t699 + t704;
    t502 = np.sin(var1[14]);
    t874 = t264*t200*t11;
    t876 = t11*t438*t124;
    t886 = 0. + t874 + t876;
    t888 = -1.*t158;
    t898 = 0. + t888;
    t907 = t424*t886;
    t917 = t410*t898;
    t921 = 0. + t907 + t917;
    p_output1 = np.zeros(3)
    p_output1[0]=-0.0875*t244 - 0.037*(0. + t244*t273 + t306*t323) - 0.21935*t11*t34 - 0.25*t472 - 0.27*(t472*t489 + (0. + t409*t424 - 1.*t410*t449)*t502) + var1[0];
    p_output1[1]=-0.21935*t11*t230 - 0.0875*t624 - 0.037*(0. + t273*t624 + t306*t676) - 0.25*t711 - 0.27*(t502*(0. + t424*t695 - 1.*t410*t703) + t489*t711) + var1[1];
    p_output1[2]=-0.0875*t11*t124 + 0.21935*t158 - 0.037*(0. + t11*t124*t273 + t11*t200*t306) - 0.25*t921 - 0.27*(t502*(0. - 1.*t410*t886 + t424*t898) + t489*t921) + var1[2];
    return p_output1

def px_skew_mat_for_cross_product(q):
    p1=np.array(eng.F_1_func(q)).reshape(3)
    p2=np.array(eng.F_2_func(q)).reshape(3)
    p3=np.array(eng.F_3_func(q)).reshape(3)
    p4=np.array(eng.F_4_func(q)).reshape(3)
    # p1=FL_endpoints(q);
    # p2=RR_endpoints(q);
    # p3=FR_endpoints(q);
    # p4=RR_endpoints(q);
    pb=q[0:3];
    dp1=p1-pb;
    dp2=p2-pb;
    dp3=p3-pb;
    dp4=p4-pb;

    p1x=np.zeros(9)
    p1x[1]=-dp1[2]
    p1x[2]=dp1[1]
    p1x[3]=dp1[2]
    p1x[5]=-dp1[0]
    p1x[6]=-dp1[1]
    p1x[7]=dp1[0]
    p1x=p1x.reshape(3,3)

    p2x=np.zeros(9)
    p2x[1]=-dp2[2]
    p2x[2]=dp2[1]
    p2x[3]=dp2[2]
    p2x[5]=-dp2[0]
    p2x[6]=-dp2[1]
    p2x[7]=dp2[0]
    p2x=p2x.reshape(3,3)

    p3x=np.zeros(9)
    p3x[1]=-dp3[2]
    p3x[2]=dp3[1]
    p3x[3]=dp3[2]
    p3x[5]=-dp3[0]
    p3x[6]=-dp3[1]
    p3x[7]=dp3[0]
    p3x=p3x.reshape(3,3)

    p4x=np.zeros(9)
    p4x[1]=-dp4[2]
    p4x[2]=dp4[1]
    p4x[3]=dp4[2]
    p4x[5]=-dp4[0]
    p4x[6]=-dp4[1]
    p4x[7]=dp4[0]
    p4x=p4x.reshape(3,3)
    return p1x, p2x, p3x, p4x
# calculate A matrix for AF=[Ma; Icg*alpha]

def mat_A_trotting(q):
    # Here we assume that potentially each leg is capable of providing reaction forces
    p1x, p2x, p3x, p4x = px_skew_mat_for_cross_product(q)
    p1f = np.eye(3)
    A=np.block([[p1f,p1f,p1f,p1f],[p1x,p2x,p3x,p4x]])
    return A

def mat_A(q,sf_index):
    p1x, p2x, p3x, p4x = px_skew_mat_for_cross_product(q)
    p1f = p2f = p3f = p4f = np.eye(3)

    if sf_index ==1:
        A=np.block([[p2f,p3f,p4f],[p2x,p3x,p4x]])
        #p1x=0*p1x
        #p1f =0*p1f
    elif sf_index ==2:
        A=np.block([[p1f,p3f,p4f],[p1x,p3x,p4x]])
        #p2x=0*p2x
        #p2f =0*p2f
    elif sf_index ==3:
        A=np.block([[p1f,p2f,p4f],[p1x,p2x,p4x]])
        #p3x=0*p3x
        #p3f =0*p3f
    elif sf_index ==4:
        A=np.block([[p1f,p2f,p3f],[p1x,p2x,p3x]])
        #p4x=0*p4x
        #p4f =0*p4f

    else:
        print('not a static gait: stopping the operation')
    #break
    #A=np.block([[p1f,p2f,p3f,p4f],[p1x,p2x,p3x,p4x]])
    return A


def QP_stance_Ab_ineq(m,mu,theta_p,ub,lb,sf_index):

    n_c = np.array([-np.sin(theta_p),0.0,np.cos(theta_p)]) #normal at contact point (unit vector) rotation about y axis
    t1_c = np.array([np.cos(theta_p),0.0,np.sin(theta_p)]) #1st tangential direction at contact point (unit vector)
    t2_c = np.array([0,1.0,0]) #2nd tangential direction at contact point (unit vector)
    if sf_index ==1:
        cci =np.block([[np.add(mu*n_c,t1_c)],[np.add(mu*n_c,t2_c)],[np.add(-mu*n_c,t1_c)],[np.add(-mu*n_c,t2_c)],[n_c]])
        C= np.kron(np.diag([1,0,0,1]),cci)
        d_m = np.array([0.,0.,-3*m*10,-3*m*10,5.0])
        d_M = np.array([3*m*10,3*m*10,0.,0.,3*m*10])
        d_min = np.kron(np.array([1,0,0,1]),d_m)
        d_max = np.kron(np.array([1,0,0,1]),d_M)
######
        ub[3:9]=0.0001
        lb[3:9]=-0.0001
######

        A_ineq =np.block([[C],[-C],[np.eye(12)],[-np.eye(12)]])
        b_ineq =np.block([d_max,-d_min,ub,-lb])

    elif sf_index ==2:
        cci =np.block([[np.add(mu*n_c,t1_c)],[np.add(mu*n_c,t2_c)],[np.add(-mu*n_c,t1_c)],[np.add(-mu*n_c,t2_c)],[n_c]])
        C= np.kron(np.diag([0,1,1,0]),cci)
        d_m = np.array([0.,0.,-3*m*10,-3*m*10,5])
        d_M = np.array([3*m*10,3*m*10,0.,0.,3*m*10])
        d_min = np.kron(np.array([0,1,1,0]),d_m)
        d_max = np.kron(np.array([0,1,1,0]),d_M)
######
        ub[0:3]=0.0001
        lb[0:3]=-0.0001
        ub[9:12]=0.0001
        lb[9:12]=-0.0001        
######
        A_ineq =np.block([[C],[-C],[np.eye(12)],[-np.eye(12)]])
        b_ineq =np.block([d_max,-d_min,ub,-lb])
        
    return A_ineq, b_ineq


#Jacobians for each foot

def Jacobian_transpose_FL(q):
    var1=q
    t244 = np.cos(var1[5]);
    t355 = np.sin(var1[3]);
    t310 = np.sin(var1[4]);
    t11 = np.cos(var1[3]);
    t366 = np.sin(var1[5]);
    t317 = t11*t244*t310;
    t409 = t355*t366;
    t424 = t317 + t409;
    t502 = np.cos(var1[9]);
    t450 = -1.*t244*t355*t310;
    t474 = t11*t366;
    t482 = t450 + t474;
    t448 = np.sin(var1[9]);
    t604 = np.cos(var1[10]);
    t611 = t502*t482;
    t612 = -1.*t448;
    t641 = 0. + t612;
    t669 = t641*t424;
    t676 = t611 + t669;
    t713 = -1.*t244*t355;
    t717 = t11*t310*t366;
    t726 = t713 + t717;
    t509 = 0. + t502;
    t822 = -1.*t11*t244;
    t857 = -1.*t355*t310*t366;
    t859 = t822 + t857;
    t688 = np.cos(var1[11]);
    t689 = 0. + t688;
    t750 = t641*t726;
    t861 = t502*t859;
    t868 = t750 + t861;
    t692 = np.sin(var1[10]);
    t695 = np.sin(var1[11]);
    t907 = np.cos(var1[4]);
    t921 = t11*t907*t641;
    t924 = -1.*t502*t907*t355;
    t927 = t921 + t924;
    t1058 = t502*t11*t907*t244;
    t1063 = t907*t244*t641*t355;
    t1067 = t1058 + t1063;
    t1087 = t604*t1067;
    t1088 = -1.*t244*t692*t310;
    t1125 = t1087 + t1088;
    t1239 = -1.*t692*t310*t366;
    t1240 = t502*t11*t907*t366;
    t1244 = t907*t641*t355*t366;
    t1250 = t1240 + t1244;
    t1251 = t604*t1250;
    t1255 = t1239 + t1251;
    t1345 = -1.*t907*t692;
    t1346 = -1.*t502*t11*t310;
    t1352 = -1.*t641*t355*t310;
    t1356 = t1346 + t1352;
    t1358 = t604*t1356;
    t1359 = t1345 + t1358;
    t1453 = t244*t355;
    t1454 = -1.*t11*t310*t366;
    t1486 = t1453 + t1454;
    t1519 = -1.*t907*t692*t366;
    t1520 = t502*t1486;
    t1524 = t641*t859;
    t1525 = t1520 + t1524;
    t1532 = t604*t1525;
    t1545 = t1519 + t1532;
    t1613 = t244*t355*t310;
    t1619 = -1.*t11*t366;
    t1625 = t1613 + t1619;
    t1681 = t907*t244*t692;
    t1692 = t641*t1625;
    t1693 = t502*t424;
    t1694 = t1692 + t1693;
    t1698 = t604*t1694;
    t1701 = t1681 + t1698;
    t1773 = -1.*t502*t1625;
    t1787 = -1.*t448*t424;
    t1802 = t1773 + t1787;
    t1837 = t11*t244;
    t1844 = t355*t310*t366;
    t1857 = t1837 + t1844;
    t1828 = -1.*t448*t726;
    t1868 = -1.*t502*t1857;
    t1869 = t1828 + t1868;
    t954 = -1.*t907*t448*t355;
    t1917 = -1.*t11*t907*t448;
    t1918 = t1917 + t924;
    t1944 = t907*t244;
    t1945 = 0. + t1944;
    t1955 = 0. + t1692 + t1693;
    t1949 = t604*t1945;
    t1958 = -1.*t692*t1955;
    t1960 = t1949 + t1958;
    t1872 = t502*t726;
    t2003 = t907*t366;
    t2007 = 0. + t2003;
    t2011 = t641*t1857;
    t2017 = 0. + t1872 + t2011;
    t2008 = t604*t2007;
    t2024 = -1.*t692*t2017;
    t2030 = t2008 + t2024;
    t1920 = t502*t11*t907;
    t2056 = t907*t641*t355;
    t2059 = 0. + t1920 + t2056;
    t2064 = -1.*t310;
    t2065 = 0. + t2064;
    t2060 = -1.*t692*t2059;
    t2067 = t604*t2065;
    t2072 = t2060 + t2067;
    p_output1=np.zeros(54)
    p_output1[0]=1.;
    p_output1[1]=0;
    p_output1[2]=0;
    p_output1[3]=0;
    p_output1[4]=1.;
    p_output1[5]=0;
    p_output1[6]=0;
    p_output1[7]=0;
    p_output1[8]=1.;
    p_output1[9]=0.0875*t424 + 0.037*(t448*t482 + t424*t509) - 0.25*t604*t676 - 0.27*(t604*t676*t689 - 1.*t676*t692*t695);
    p_output1[10]=0.0875*t726 + 0.037*(t509*t726 + t448*t859) - 0.25*t604*t868 - 0.27*(t604*t689*t868 - 1.*t692*t695*t868);
    p_output1[11]=0.0875*t11*t907 - 0.25*t604*t927 - 0.27*(t604*t689*t927 - 1.*t692*t695*t927) + 0.037*(t11*t509*t907 + t954);
    p_output1[12]=-0.25*t1125 - 0.21935*t244*t310 - 0.27*(t1125*t689 + (-1.*t244*t310*t604 - 1.*t1067*t692)*t695) + 0.0875*t244*t355*t907 + 0.037*(t11*t244*t448*t907 + t244*t355*t509*t907);
    p_output1[13]=-0.25*t1255 - 0.21935*t310*t366 - 0.27*(t1255*t689 + (-1.*t310*t366*t604 - 1.*t1250*t692)*t695) + 0.0875*t355*t366*t907 + 0.037*(t11*t366*t448*t907 + t355*t366*t509*t907);
    p_output1[14]=-0.25*t1359 - 0.0875*t310*t355 + 0.037*(-1.*t11*t310*t448 - 1.*t310*t355*t509) - 0.21935*t907 - 0.27*(t1359*t689 + t695*(-1.*t1356*t692 - 1.*t604*t907));
    p_output1[15]=-0.25*t1545 + 0.0875*t859 + 0.037*(t1486*t448 + t509*t859) - 0.21935*t366*t907 - 0.27*(t1545*t689 + t695*(-1.*t1525*t692 - 1.*t366*t604*t907));
    p_output1[16]=0.0875*t1625 - 0.25*t1701 + 0.037*(t424*t448 + t1625*t509) + 0.21935*t244*t907 - 0.27*(t1701*t689 + t695*(-1.*t1694*t692 + t244*t604*t907));
    p_output1[17]=0;
    p_output1[18]=0;
    p_output1[19]=0;
    p_output1[20]=0;
    p_output1[21]=0;
    p_output1[22]=0;
    p_output1[23]=0;
    p_output1[24]=0;
    p_output1[25]=0;
    p_output1[26]=0;
    p_output1[27]=0.037*(t1693 - 1.*t1625*t448) - 0.25*t1802*t604 - 0.27*(t1802*t604*t689 - 1.*t1802*t692*t695);
    p_output1[28]=0.037*(t1872 - 1.*t1857*t448) - 0.25*t1869*t604 - 0.27*(t1869*t604*t689 - 1.*t1869*t692*t695);
    p_output1[29]=-0.25*t1918*t604 - 0.27*(t1918*t604*t689 - 1.*t1918*t692*t695) + 0.037*(t1920 + t954);
    p_output1[30]=-0.25*t1960 - 0.27*(t1960*t689 + (-1.*t1955*t604 - 1.*t1945*t692)*t695);
    p_output1[31]=-0.25*t2030 - 0.27*(t2030*t689 + (-1.*t2017*t604 - 1.*t2007*t692)*t695);
    p_output1[32]=-0.25*t2072 - 0.27*(t2072*t689 + (-1.*t2059*t604 - 1.*t2065*t692)*t695);
    p_output1[33]=-0.27*((0. + t1949 + t1958)*t688 - 1.*(0. + t1955*t604 + t1945*t692)*t695);
    p_output1[34]=-0.27*((0. + t2008 + t2024)*t688 - 1.*(0. + t2017*t604 + t2007*t692)*t695);
    p_output1[35]=-0.27*((0. + t2060 + t2067)*t688 - 1.*(0. + t2059*t604 + t2065*t692)*t695);
    p_output1[36]=0;
    p_output1[37]=0;
    p_output1[38]=0;
    p_output1[39]=0;
    p_output1[40]=0;
    p_output1[41]=0;
    p_output1[42]=0;
    p_output1[43]=0;
    p_output1[44]=0;
    p_output1[45]=0;
    p_output1[46]=0;
    p_output1[47]=0;
    p_output1[48]=0;
    p_output1[49]=0;
    p_output1[50]=0;
    p_output1[51]=0;
    p_output1[52]=0;
    p_output1[53]=0;
    p_output1 =np.reshape(p_output1,(18,3))
    return p_output1


def Jacobian_transpose_FR(q):
    var1=q
    p_output1=np.zeros(54)

    t169 = np.cos(var1[5]);
    t409 = np.sin(var1[3]);
    t317 = np.sin(var1[4]);
    t20 = np.cos(var1[3]);
    t435 = np.sin(var1[5]);
    t348 = t20*t169*t317;
    t474 = t409*t435;
    t482 = t348 + t474;
    t562 = np.cos(var1[6]);
    t564 = -1.*t169*t409*t317;
    t567 = t20*t435;
    t577 = t564 + t567;
    t673 = np.sin(var1[6]);
    t552 = np.cos(var1[7]);
    t665 = t562*t577;
    t688 = -1.*t673;
    t699 = 0. + t688;
    t700 = t482*t699;
    t711 = t665 + t700;
    t952 = -1.*t169*t409;
    t957 = t20*t317*t435;
    t965 = t952 + t957;
    t750 = 0. + t562;
    t981 = -1.*t20*t169;
    t989 = -1.*t409*t317*t435;
    t991 = t981 + t989;
    t861 = np.cos(var1[8]);
    t870 = 0. + t861;
    t993 = t562*t991;
    t1019 = t965*t699;
    t1030 = t993 + t1019;
    t876 = np.sin(var1[7]);
    t900 = np.sin(var1[8]);
    t1159 = np.cos(var1[4]);
    t1170 = -1.*t1159*t562*t409;
    t1180 = t20*t1159*t699;
    t1200 = t1170 + t1180;
    t1306 = t20*t1159*t169*t562;
    t1307 = t1159*t169*t409*t699;
    t1314 = t1306 + t1307;
    t1324 = t552*t1314;
    t1333 = -1.*t169*t317*t876;
    t1336 = t1324 + t1333;
    t1449 = t20*t1159*t562*t435;
    t1453 = t1159*t409*t435*t699;
    t1471 = t1449 + t1453;
    t1486 = t552*t1471;
    t1514 = -1.*t317*t435*t876;
    t1520 = t1486 + t1514;
    t1642 = -1.*t20*t562*t317;
    t1643 = -1.*t409*t317*t699;
    t1654 = t1642 + t1643;
    t1663 = t552*t1654;
    t1681 = -1.*t1159*t876;
    t1690 = t1663 + t1681;
    t1806 = t169*t409;
    t1809 = -1.*t20*t317*t435;
    t1812 = t1806 + t1809;
    t1824 = t562*t1812;
    t1871 = t991*t699;
    t1874 = t1824 + t1871;
    t1878 = t552*t1874;
    t1882 = -1.*t1159*t435*t876;
    t1885 = t1878 + t1882;
    t1942 = t169*t409*t317;
    t1944 = -1.*t20*t435;
    t1949 = t1942 + t1944;
    t2008 = t562*t482;
    t2011 = t1949*t699;
    t2027 = t2008 + t2011;
    t2031 = t552*t2027;
    t2033 = t1159*t169*t876;
    t2036 = t2031 + t2033;
    t2099 = -1.*t562*t1949;
    t2111 = -1.*t482*t673;
    t2125 = t2099 + t2111;
    t2136 = t20*t169;
    t2138 = t409*t317*t435;
    t2142 = t2136 + t2138;
    t2148 = -1.*t562*t2142;
    t2153 = -1.*t965*t673;
    t2161 = t2148 + t2153;
    t1220 = -1.*t1159*t409*t673;
    t2196 = -1.*t20*t1159*t673;
    t2214 = t1170 + t2196;
    t2258 = t1159*t169;
    t2265 = 0. + t2258;
    t2267 = t2265*t552;
    t2276 = 0. + t2008 + t2011;
    t2294 = -1.*t2276*t876;
    t2299 = t2267 + t2294;
    t2164 = t562*t965;
    t2333 = t1159*t435;
    t2342 = 0. + t2333;
    t2344 = t552*t2342;
    t2346 = t2142*t699;
    t2348 = 0. + t2164 + t2346;
    t2352 = -1.*t2348*t876;
    t2361 = t2344 + t2352;
    t2221 = t20*t1159*t562;
    t2399 = -1.*t317;
    t2409 = 0. + t2399;
    t2411 = t552*t2409;
    t2414 = t1159*t409*t699;
    t2427 = 0. + t2221 + t2414;
    t2430 = -1.*t2427*t876;
    t2433 = t2411 + t2430;
    p_output1[0]=1.;
    p_output1[1]=0;
    p_output1[2]=0;
    p_output1[3]=0;
    p_output1[4]=1.;
    p_output1[5]=0;
    p_output1[6]=0;
    p_output1[7]=0;
    p_output1[8]=1.;
    p_output1[9]=-0.0875*t482 - 0.25*t552*t711 - 0.037*(t577*t673 + t482*t750) - 0.27*(t552*t711*t870 - 1.*t711*t876*t900);
    p_output1[10]=-0.25*t1030*t552 - 0.27*(t1030*t552*t870 - 1.*t1030*t876*t900) - 0.0875*t965 - 0.037*(t750*t965 + t673*t991);
    p_output1[11]=-0.0875*t1159*t20 - 0.25*t1200*t552 - 0.037*(t1220 + t1159*t20*t750) - 0.27*(t1200*t552*t870 - 1.*t1200*t876*t900);
    p_output1[12]=-0.25*t1336 - 0.21935*t169*t317 - 0.0875*t1159*t169*t409 - 0.037*(t1159*t169*t20*t673 + t1159*t169*t409*t750) - 0.27*(t1336*t870 + (-1.*t169*t317*t552 - 1.*t1314*t876)*t900);
    p_output1[13]=-0.25*t1520 - 0.21935*t317*t435 - 0.0875*t1159*t409*t435 - 0.037*(t1159*t20*t435*t673 + t1159*t409*t435*t750) - 0.27*(t1520*t870 + (-1.*t317*t435*t552 - 1.*t1471*t876)*t900);
    p_output1[14]=-0.21935*t1159 - 0.25*t1690 + 0.0875*t317*t409 - 0.037*(-1.*t20*t317*t673 - 1.*t317*t409*t750) - 0.27*(t1690*t870 + (-1.*t1159*t552 - 1.*t1654*t876)*t900);
    p_output1[15]=-0.25*t1885 - 0.21935*t1159*t435 - 0.27*(t1885*t870 + (-1.*t1159*t435*t552 - 1.*t1874*t876)*t900) - 0.0875*t991 - 0.037*(t1812*t673 + t750*t991);
    p_output1[16]=0.21935*t1159*t169 - 0.0875*t1949 - 0.25*t2036 - 0.037*(t482*t673 + t1949*t750) - 0.27*(t2036*t870 + (t1159*t169*t552 - 1.*t2027*t876)*t900);
    p_output1[17]=0;
    p_output1[18]=-0.25*t2125*t552 - 0.037*(t2008 - 1.*t1949*t673) - 0.27*(t2125*t552*t870 - 1.*t2125*t876*t900);
    p_output1[19]=-0.25*t2161*t552 - 0.037*(t2164 - 1.*t2142*t673) - 0.27*(t2161*t552*t870 - 1.*t2161*t876*t900);
    p_output1[20]=-0.037*(t1220 + t2221) - 0.25*t2214*t552 - 0.27*(t2214*t552*t870 - 1.*t2214*t876*t900);
    p_output1[21]=-0.25*t2299 - 0.27*(t2299*t870 + (-1.*t2276*t552 - 1.*t2265*t876)*t900);
    p_output1[22]=-0.25*t2361 - 0.27*(t2361*t870 + (-1.*t2348*t552 - 1.*t2342*t876)*t900);
    p_output1[23]=-0.25*t2433 - 0.27*(t2433*t870 + (-1.*t2427*t552 - 1.*t2409*t876)*t900);
    p_output1[24]=-0.27*((0. + t2267 + t2294)*t861 - 1.*(0. + t2276*t552 + t2265*t876)*t900);
    p_output1[25]=-0.27*((0. + t2344 + t2352)*t861 - 1.*(0. + t2348*t552 + t2342*t876)*t900);
    p_output1[26]=-0.27*((0. + t2411 + t2430)*t861 - 1.*(0. + t2427*t552 + t2409*t876)*t900);
    p_output1[27]=0;
    p_output1[28]=0;
    p_output1[29]=0;
    p_output1[30]=0;
    p_output1[31]=0;
    p_output1[32]=0;
    p_output1[33]=0;
    p_output1[34]=0;
    p_output1[35]=0;
    p_output1[36]=0;
    p_output1[37]=0;
    p_output1[38]=0;
    p_output1[39]=0;
    p_output1[40]=0;
    p_output1[41]=0;
    p_output1[42]=0;
    p_output1[43]=0;
    p_output1[44]=0;
    p_output1[45]=0;
    p_output1[46]=0;
    p_output1[47]=0;
    p_output1[48]=0;
    p_output1[49]=0;
    p_output1[50]=0;
    p_output1[51]=0;
    p_output1[52]=0;
    p_output1[53]=0;

    p_output1 =np.reshape(p_output1,(18,3))
    return p_output1

def Jacobian_transpose_RR(q):
    var1=q
    p_output1=np.zeros(54)

    t183 = np.cos(var1[5]);
    t319 = np.sin(var1[3]);
    t293 = np.sin(var1[4]);
    t145 = np.cos(var1[3]);
    t346 = np.sin(var1[5]);
    t317 = t145*t183*t293;
    t348 = t319*t346;
    t351 = t317 + t348;
    t517 = np.cos(var1[12]);
    t438 = -1.*t183*t319*t293;
    t474 = t145*t346;
    t482 = t438 + t474;
    t434 = np.sin(var1[12]);
    t611 = np.cos(var1[13]);
    t665 = t517*t482;
    t669 = -1.*t434;
    t682 = 0. + t669;
    t688 = t682*t351;
    t690 = t665 + t688;
    t869 = -1.*t183*t319;
    t870 = t145*t293*t346;
    t871 = t869 + t870;
    t545 = 0. + t517;
    t887 = -1.*t145*t183;
    t888 = -1.*t319*t293*t346;
    t900 = t887 + t888;
    t700 = np.cos(var1[14]);
    t704 = 0. + t700;
    t876 = t682*t871;
    t904 = t517*t900;
    t905 = t876 + t904;
    t717 = np.sin(var1[13]);
    t740 = np.sin(var1[14]);
    t1013 = np.cos(var1[4]);
    t1030 = t145*t1013*t682;
    t1034 = -1.*t517*t1013*t319;
    t1043 = t1030 + t1034;
    t1221 = t517*t145*t1013*t183;
    t1224 = t1013*t183*t682*t319;
    t1228 = t1221 + t1224;
    t1232 = t611*t1228;
    t1233 = -1.*t183*t717*t293;
    t1238 = t1232 + t1233;
    t1334 = -1.*t717*t293*t346;
    t1336 = t517*t145*t1013*t346;
    t1342 = t1013*t682*t319*t346;
    t1344 = t1336 + t1342;
    t1345 = t611*t1344;
    t1358 = t1334 + t1345;
    t1486 = -1.*t1013*t717;
    t1487 = -1.*t517*t145*t293;
    t1509 = -1.*t682*t319*t293;
    t1512 = t1487 + t1509;
    t1514 = t611*t1512;
    t1520 = t1486 + t1514;
    t1598 = t183*t319;
    t1603 = -1.*t145*t293*t346;
    t1611 = t1598 + t1603;
    t1656 = -1.*t1013*t717*t346;
    t1663 = t517*t1611;
    t1681 = t682*t900;
    t1692 = t1663 + t1681;
    t1698 = t611*t1692;
    t1702 = t1656 + t1698;
    t1747 = t183*t319*t293;
    t1768 = -1.*t145*t346;
    t1771 = t1747 + t1768;
    t1822 = t1013*t183*t717;
    t1824 = t682*t1771;
    t1837 = t517*t351;
    t1844 = t1824 + t1837;
    t1871 = t611*t1844;
    t1877 = t1822 + t1871;
    t1936 = -1.*t517*t1771;
    t1939 = -1.*t434*t351;
    t1940 = t1936 + t1939;
    t1971 = t145*t183;
    t1972 = t319*t293*t346;
    t1980 = t1971 + t1972;
    t1969 = -1.*t434*t871;
    t1988 = -1.*t517*t1980;
    t1991 = t1969 + t1988;
    t1056 = -1.*t1013*t434*t319;
    t2043 = -1.*t145*t1013*t434;
    t2046 = t2043 + t1034;
    t2099 = t1013*t183;
    t2101 = 0. + t2099;
    t2115 = 0. + t1824 + t1837;
    t2111 = t611*t2101;
    t2120 = -1.*t717*t2115;
    t2123 = t2111 + t2120;
    t2003 = t517*t871;
    t2142 = t1013*t346;
    t2146 = 0. + t2142;
    t2153 = t682*t1980;
    t2154 = 0. + t2003 + t2153;
    t2148 = t611*t2146;
    t2157 = -1.*t717*t2154;
    t2159 = t2148 + t2157;
    t2056 = t517*t145*t1013;
    t2181 = t1013*t682*t319;
    t2182 = 0. + t2056 + t2181;
    t2188 = -1.*t293;
    t2195 = 0. + t2188;
    t2184 = -1.*t717*t2182;
    t2196 = t611*t2195;
    t2206 = t2184 + t2196;
    p_output1[0]=1.;
    p_output1[1]=0;
    p_output1[2]=0;
    p_output1[3]=0;
    p_output1[4]=1.;
    p_output1[5]=0;
    p_output1[6]=0;
    p_output1[7]=0;
    p_output1[8]=1.;
    p_output1[9]=-0.0875*t351 - 0.037*(t434*t482 + t351*t545) - 0.25*t611*t690 - 0.27*(t611*t690*t704 - 1.*t690*t717*t740);
    p_output1[10]=-0.0875*t871 - 0.037*(t545*t871 + t434*t900) - 0.25*t611*t905 - 0.27*(t611*t704*t905 - 1.*t717*t740*t905);
    p_output1[11]=-0.0875*t1013*t145 - 0.037*(t1056 + t1013*t145*t545) - 0.25*t1043*t611 - 0.27*(t1043*t611*t704 - 1.*t1043*t717*t740);
    p_output1[12]=-0.25*t1238 + 0.21935*t183*t293 - 0.0875*t1013*t183*t319 - 0.037*(t1013*t145*t183*t434 + t1013*t183*t319*t545) - 0.27*(t1238*t704 + (-1.*t183*t293*t611 - 1.*t1228*t717)*t740);
    p_output1[13]=-0.25*t1358 + 0.21935*t293*t346 - 0.0875*t1013*t319*t346 - 0.037*(t1013*t145*t346*t434 + t1013*t319*t346*t545) - 0.27*(t1358*t704 + (-1.*t293*t346*t611 - 1.*t1344*t717)*t740);
    p_output1[14]=0.21935*t1013 - 0.25*t1520 + 0.0875*t293*t319 - 0.037*(-1.*t145*t293*t434 - 1.*t293*t319*t545) - 0.27*(t1520*t704 + (-1.*t1013*t611 - 1.*t1512*t717)*t740);
    p_output1[15]=-0.25*t1702 + 0.21935*t1013*t346 - 0.27*(t1702*t704 + (-1.*t1013*t346*t611 - 1.*t1692*t717)*t740) - 0.0875*t900 - 0.037*(t1611*t434 + t545*t900);
    p_output1[16]=-0.0875*t1771 - 0.21935*t1013*t183 - 0.25*t1877 - 0.037*(t351*t434 + t1771*t545) - 0.27*(t1877*t704 + (t1013*t183*t611 - 1.*t1844*t717)*t740);
    p_output1[17]=0;
    p_output1[18]=0;
    p_output1[19]=0;
    p_output1[20]=0;
    p_output1[21]=0;
    p_output1[22]=0;
    p_output1[23]=0;
    p_output1[24]=0;
    p_output1[25]=0;
    p_output1[26]=0;
    p_output1[27]=0;
    p_output1[28]=0;
    p_output1[29]=0;
    p_output1[30]=0;
    p_output1[31]=0;
    p_output1[32]=0;
    p_output1[33]=0;
    p_output1[34]=0;
    p_output1[35]=0;
    p_output1[36]=-0.037*(t1837 - 1.*t1771*t434) - 0.25*t1940*t611 - 0.27*(t1940*t611*t704 - 1.*t1940*t717*t740);
    p_output1[37]=-0.037*(t2003 - 1.*t1980*t434) - 0.25*t1991*t611 - 0.27*(t1991*t611*t704 - 1.*t1991*t717*t740);
    p_output1[38]=-0.037*(t1056 + t2056) - 0.25*t2046*t611 - 0.27*(t2046*t611*t704 - 1.*t2046*t717*t740);
    p_output1[39]=-0.25*t2123 - 0.27*(t2123*t704 + (-1.*t2115*t611 - 1.*t2101*t717)*t740);
    p_output1[40]=-0.25*t2159 - 0.27*(t2159*t704 + (-1.*t2154*t611 - 1.*t2146*t717)*t740);
    p_output1[41]=-0.25*t2206 - 0.27*(t2206*t704 + (-1.*t2182*t611 - 1.*t2195*t717)*t740);
    p_output1[42]=-0.27*((0. + t2111 + t2120)*t700 - 1.*(0. + t2115*t611 + t2101*t717)*t740);
    p_output1[43]=-0.27*((0. + t2148 + t2157)*t700 - 1.*(0. + t2154*t611 + t2146*t717)*t740);
    p_output1[44]=-0.27*((0. + t2184 + t2196)*t700 - 1.*(0. + t2182*t611 + t2195*t717)*t740);
    p_output1[45]=0;
    p_output1[46]=0;
    p_output1[47]=0;
    p_output1[48]=0;
    p_output1[49]=0;
    p_output1[50]=0;
    p_output1[51]=0;
    p_output1[52]=0;
    p_output1[53]=0;

    p_output1 =np.reshape(p_output1,(18,3))
    return p_output1


def Jacobian_transpose_RL(q):
    var1=q
    p_output1=np.zeros(54)

    t318 = np.cos(var1[5]);
    t429 = np.sin(var1[3]);
    t348 = np.sin(var1[4]);
    t112 = np.cos(var1[3]);
    t474 = np.sin(var1[5]);
    t428 = t112*t318*t348;
    t491 = t429*t474;
    t567 = t428 + t491;
    t805 = np.cos(var1[15]);
    t700 = -1.*t318*t429*t348;
    t743 = t112*t474;
    t747 = t700 + t743;
    t665 = np.sin(var1[15]);
    t874 = np.cos(var1[16]);
    t904 = t805*t747;
    t917 = -1.*t665;
    t921 = 0. + t917;
    t950 = t921*t567;
    t957 = t904 + t950;
    t1063 = -1.*t318*t429;
    t1087 = t112*t348*t474;
    t1091 = t1063 + t1087;
    t851 = 0. + t805;
    t1162 = -1.*t112*t318;
    t1180 = -1.*t429*t348*t474;
    t1208 = t1162 + t1180;
    t991 = np.cos(var1[17]);
    t993 = 0. + t991;
    t1156 = t921*t1091;
    t1217 = t805*t1208;
    t1221 = t1156 + t1217;
    t1020 = np.sin(var1[16]);
    t1045 = np.sin(var1[17]);
    t1299 = np.cos(var1[4]);
    t1306 = t112*t1299*t921;
    t1307 = -1.*t805*t1299*t429;
    t1324 = t1306 + t1307;
    t1449 = t805*t112*t1299*t318;
    t1453 = t1299*t318*t921*t429;
    t1478 = t1449 + t1453;
    t1486 = t874*t1478;
    t1492 = -1.*t318*t1020*t348;
    t1524 = t1486 + t1492;
    t1613 = -1.*t1020*t348*t474;
    t1621 = t805*t112*t1299*t474;
    t1663 = t1299*t921*t429*t474;
    t1681 = t1621 + t1663;
    t1690 = t874*t1681;
    t1698 = t1613 + t1690;
    t1815 = -1.*t1299*t1020;
    t1822 = -1.*t805*t112*t348;
    t1824 = -1.*t921*t429*t348;
    t1871 = t1822 + t1824;
    t1878 = t874*t1871;
    t1881 = t1815 + t1878;
    t1942 = t318*t429;
    t1964 = -1.*t112*t348*t474;
    t1966 = t1942 + t1964;
    t2031 = -1.*t1299*t1020*t474;
    t2033 = t805*t1966;
    t2037 = t921*t1208;
    t2039 = t2033 + t2037;
    t2040 = t874*t2039;
    t2051 = t2031 + t2040;
    t2098 = t318*t429*t348;
    t2129 = -1.*t112*t474;
    t2130 = t2098 + t2129;
    t2138 = t1299*t318*t1020;
    t2162 = t921*t2130;
    t2166 = t805*t567;
    t2168 = t2162 + t2166;
    t2169 = t874*t2168;
    t2171 = t2138 + t2169;
    t2251 = -1.*t805*t2130;
    t2253 = -1.*t665*t567;
    t2258 = t2251 + t2253;
    t2313 = t112*t318;
    t2314 = t429*t348*t474;
    t2317 = t2313 + t2314;
    t2312 = -1.*t665*t1091;
    t2325 = -1.*t805*t2317;
    t2333 = t2312 + t2325;
    t1359 = -1.*t1299*t665*t429;
    t2392 = -1.*t112*t1299*t665;
    t2399 = t2392 + t1307;
    t2459 = t1299*t318;
    t2461 = 0. + t2459;
    t2470 = 0. + t2162 + t2166;
    t2468 = t874*t2461;
    t2476 = -1.*t1020*t2470;
    t2482 = t2468 + t2476;
    t2346 = t805*t1091;
    t2557 = t1299*t474;
    t2558 = 0. + t2557;
    t2563 = t921*t2317;
    t2577 = 0. + t2346 + t2563;
    t2562 = t874*t2558;
    t2578 = -1.*t1020*t2577;
    t2584 = t2562 + t2578;
    t2414 = t805*t112*t1299;
    t2646 = t1299*t921*t429;
    t2652 = 0. + t2414 + t2646;
    t2668 = -1.*t348;
    t2678 = 0. + t2668;
    t2662 = -1.*t1020*t2652;
    t2682 = t874*t2678;
    t2690 = t2662 + t2682;
    p_output1[0]=1.;
    p_output1[1]=0;
    p_output1[2]=0;
    p_output1[3]=0;
    p_output1[4]=1.;
    p_output1[5]=0;
    p_output1[6]=0;
    p_output1[7]=0;
    p_output1[8]=1.;
    p_output1[9]=0.0875*t567 + 0.037*(t665*t747 + t567*t851) - 0.25*t874*t957 - 0.27*(-1.*t1020*t1045*t957 + t874*t957*t993);
    p_output1[10]=0.0875*t1091 + 0.037*(t1208*t665 + t1091*t851) - 0.25*t1221*t874 - 0.27*(-1.*t1020*t1045*t1221 + t1221*t874*t993);
    p_output1[11]=0.0875*t112*t1299 + 0.037*(t1359 + t112*t1299*t851) - 0.25*t1324*t874 - 0.27*(-1.*t1020*t1045*t1324 + t1324*t874*t993);
    p_output1[12]=-0.25*t1524 + 0.21935*t318*t348 + 0.0875*t1299*t318*t429 + 0.037*(t112*t1299*t318*t665 + t1299*t318*t429*t851) - 0.27*(t1045*(-1.*t1020*t1478 - 1.*t318*t348*t874) + t1524*t993);
    p_output1[13]=-0.25*t1698 + 0.21935*t348*t474 + 0.0875*t1299*t429*t474 + 0.037*(t112*t1299*t474*t665 + t1299*t429*t474*t851) - 0.27*(t1045*(-1.*t1020*t1681 - 1.*t348*t474*t874) + t1698*t993);
    p_output1[14]=0.21935*t1299 - 0.25*t1881 - 0.0875*t348*t429 + 0.037*(-1.*t112*t348*t665 - 1.*t348*t429*t851) - 0.27*(t1045*(-1.*t1020*t1871 - 1.*t1299*t874) + t1881*t993);
    p_output1[15]=0.0875*t1208 - 0.25*t2051 + 0.21935*t1299*t474 + 0.037*(t1966*t665 + t1208*t851) - 0.27*(t1045*(-1.*t1020*t2039 - 1.*t1299*t474*t874) + t2051*t993);
    p_output1[16]=0.0875*t2130 - 0.25*t2171 - 0.21935*t1299*t318 + 0.037*(t567*t665 + t2130*t851) - 0.27*(t1045*(-1.*t1020*t2168 + t1299*t318*t874) + t2171*t993);
    p_output1[17]=0;
    p_output1[18]=0;
    p_output1[19]=0;
    p_output1[20]=0;
    p_output1[21]=0;
    p_output1[22]=0;
    p_output1[23]=0;
    p_output1[24]=0;
    p_output1[25]=0;
    p_output1[26]=0;
    p_output1[27]=0;
    p_output1[28]=0;
    p_output1[29]=0;
    p_output1[30]=0;
    p_output1[31]=0;
    p_output1[32]=0;
    p_output1[33]=0;
    p_output1[34]=0;
    p_output1[35]=0;
    p_output1[36]=0;
    p_output1[37]=0;
    p_output1[38]=0;
    p_output1[39]=0;
    p_output1[40]=0;
    p_output1[41]=0;
    p_output1[42]=0;
    p_output1[43]=0;
    p_output1[44]=0;
    p_output1[45]=0.037*(t2166 - 1.*t2130*t665) - 0.25*t2258*t874 - 0.27*(-1.*t1020*t1045*t2258 + t2258*t874*t993);
    p_output1[46]=0.037*(t2346 - 1.*t2317*t665) - 0.25*t2333*t874 - 0.27*(-1.*t1020*t1045*t2333 + t2333*t874*t993);
    p_output1[47]=0.037*(t1359 + t2414) - 0.25*t2399*t874 - 0.27*(-1.*t1020*t1045*t2399 + t2399*t874*t993);
    p_output1[48]=-0.25*t2482 - 0.27*(t1045*(-1.*t1020*t2461 - 1.*t2470*t874) + t2482*t993);
    p_output1[49]=-0.25*t2584 - 0.27*(t1045*(-1.*t1020*t2558 - 1.*t2577*t874) + t2584*t993);
    p_output1[50]=-0.25*t2690 - 0.27*(t1045*(-1.*t1020*t2678 - 1.*t2652*t874) + t2690*t993);
    p_output1[51]=-0.27*(-1.*t1045*(0. + t1020*t2461 + t2470*t874) + (0. + t2468 + t2476)*t991);
    p_output1[52]=-0.27*(-1.*t1045*(0. + t1020*t2558 + t2577*t874) + (0. + t2562 + t2578)*t991);
    p_output1[53]=-0.27*(-1.*t1045*(0. + t1020*t2678 + t2652*t874) + (0. + t2662 + t2682)*t991);

    p_output1 =np.reshape(p_output1,(18,3))
    return p_output1

#Stacked contact Jacobians[FL;RR;FR;RL] transpose

def Jacobian_transpose_stacked(q, sf_index):

    j1_FL=Jacobian_transpose_FL(q)
    j2_RR=Jacobian_transpose_RR(q)
    j3_FR=Jacobian_transpose_FR(q)
    j4_RL=Jacobian_transpose_RL(q)

    if sf_index ==1:
        j_sw = j1_FL
        transpose_J_c = np.block([j2_RR,j3_FR,j4_RL])
    elif sf_index ==2:
        j_sw = j2_RR
        transpose_J_c = np.block([j1_FL,j3_FR,j4_RL])
    elif sf_index ==3:
        j_sw = j3_FR
        transpose_J_c = np.block([j1_FL,j2_RR,j4_RL])
    elif sf_index ==4:
        j_sw = j4_RL
        transpose_J_c = np.block([j1_FL,j2_RR,j3_FR])
    else:
        print('not a static gait: stopping the operation')
    #break
    #transpose_J_c= np.block([j1_FL,j2_RR,j3_FR,j4_RL])
    transpose_J_sw = j_sw
    return transpose_J_c, transpose_J_sw

def Jacobian_transpose_stacked_trotting(q, sf_index):

    j1_FR=np.array(eng.j_1_func(q))
    j2_FL=np.array(eng.j_2_func(q))
    j3_RR=np.array(eng.j_3_func(q))
    j4_RL=np.array(eng.j_4_func(q))

    if sf_index ==1:
        transpose_J_sw = np.block([[j2_FL],[j3_RR]])
        transpose_J_c = np.block([[j1_FR],[j2_FL],[j3_RR],[j4_RL]]) # All four legs are assumed in stance 
    elif sf_index ==2:
        transpose_J_sw = np.block([[j1_FR],[j4_RL]]) 
        transpose_J_c = np.block([[j1_FR],[j2_FL],[j3_RR],[j4_RL]]) # All four legs are assumed in stance 
    return transpose_J_c, transpose_J_sw

def FL_hip(q):
    var1=q
    p_output1=np.zeros(3)
    t4 = np.cos(var1[5]);
    t3 = np.cos(var1[4]);
    t10 = np.sin(var1[5]);
    t9 = np.cos(var1[3]);
    t6 = np.sin(var1[3]);
    t7 = np.sin(var1[4]);
    p_output1[0]=0.21935*t3*t4 + 0.0875*(t4*t6*t7 - 1.*t10*t9) + var1[0];
    p_output1[1]=0.21935*t10*t3 + 0.0875*(t10*t6*t7 + t4*t9) + var1[1];
    p_output1[2]=0.0875*t3*t6 - 0.21935*t7 + var1[2];
    return p_output1


def FR_hip(q):
    var1=q
    p_output1=np.zeros(3)
    t8 = np.cos(var1[5]);
    t3 = np.cos(var1[4]);
    t20 = np.sin(var1[5]);
    t19 = np.cos(var1[3]);
    t16 = np.sin(var1[3]);
    t17 = np.sin(var1[4]);
    p_output1[0]=0.21935*t3*t8 - 0.0875*(-1.*t19*t20 + t16*t17*t8) + var1[0];
    p_output1[1]=0.21935*t20*t3 - 0.0875*(t16*t17*t20 + t19*t8) + var1[1];
    p_output1[2]=-0.21935*t17 - 0.0875*t16*t3 + var1[2];
    return p_output1

def RL_hip(q):
    var1=q
    p_output1=np.zeros(3)

    t13 = np.cos(var1[5]);
    t3 = np.cos(var1[4]);
    t25 = np.sin(var1[5]);
    t24 = np.cos(var1[3]);
    t21 = np.sin(var1[3]);
    t22 = np.sin(var1[4]);
    p_output1[0]=0.0875*(t13*t21*t22 - 1.*t24*t25) - 0.21935*t13*t3 + var1[0];
    p_output1[1]=0.0875*(t13*t24 + t21*t22*t25) - 0.21935*t25*t3 + var1[1];
    p_output1[2]=0.21935*t22 + 0.0875*t21*t3 + var1[2];

    return p_output1

def RR_hip(q):
    var1=q
    p_output1=np.zeros(3)

    t5 = np.cos(var1[5]);
    t3 = np.cos(var1[4]);
    t15 = np.sin(var1[5]);
    t14 = np.cos(var1[3]);
    t11 = np.sin(var1[3]);
    t12 = np.sin(var1[4]);
    p_output1[0]=-0.21935*t3*t5 - 0.0875*(-1.*t14*t15 + t11*t12*t5) + var1[0];
    p_output1[1]=-0.21935*t15*t3 - 0.0875*(t11*t12*t15 + t14*t5) + var1[1];
    p_output1[2]=0.21935*t12 - 0.0875*t11*t3 + var1[2];

    return p_output1


def Swing_foot_Bezier_6th(p_i,p_f,s):
    hsw_max=0.10
    S=np.array([(1-s)**6,
    6*s*(1-s)**5,
    15*s**2*(1-s)**4,
    20*s**3*(1-s)**3,
    15*s**4*(1-s)**2,
    6*s**5*(1-s)**1,
    s**6])

    dS=np.array([
    6*(s - 1)**5,
    - 30*s*(s - 1)**4 - 6*(s - 1)**5,
    30*s*(s - 1)**4 + 60*s**2*(s - 1)**3,
    - 60*s**2*(s - 1)**3 - 60*s**3*(s - 1)**2,
    15*s**4*(2*s - 2) + 60*s**3*(s - 1)**2,
    - 30*s**4*(s - 1) - 6*s**5,
    6*s**5])

    ddS=np.array([
    30*(s - 1)**4,
    - 120*s*(s - 1)**3 - 60*(s - 1)**4,
    240*s*(s - 1)**3 + 30*(s - 1)**4 + 180*s**2*(s - 1)**2,
    - 120*s*(s - 1)**3 - 60*s**3*(2*s - 2) - 360*s**2*(s - 1)**2,
    120*s**3*(2*s - 2) + 180*s**2*(s - 1)**2 + 30*s**4,
    - 120*s**3*(s - 1) - 60*s**4,
    30*s**4,
    ])
    p_i=np.array(p_i)
    p_f=np.array(p_f)
    dp=p_f-p_i
    bxy=np.array([0,0.1,0.6,0.98,1.0,1.0,1.0]) # how legs moves in x direction
    bz=np.array([0.0,0.1,0.7,1.0,0.01,0.0,-0.01]) # how legs moves in z direction (height profile)
    a1 = p_i[0]+np.dot(dp[0],bxy) # how legs moves in x direction
    a2 = p_i[1]+np.dot(dp[1],bxy) # how legs moves in y direction
    a3 = p_i[2]+np.dot(dp[2],bxy)+np.dot(hsw_max,bz) # how legs moves in z direction

    a4 = p_i[3]+np.dot(dp[3],bxy) # how legs moves in x direction
    a5 = p_i[4]+np.dot(dp[4],bxy) # how legs moves in y direction
    a6 = p_i[5]+np.dot(dp[5],bxy)+np.dot(hsw_max,bz) # how legs moves in z direction
#
    A = np.array([a1,a2,a3,a4,a5,a6])

    ph = np.dot(A,S)
    dph = np.dot(A,dS)
    ddph = np.dot(A,ddS)
    return ph,dph,ddph

def swing_foot_p_f_trotting(SL_x_hlip,SL_y_hlip,T_phi,t_prev,vd_b, sf_index): #T_phi=stance phase duration for a leg
    psf_f1 =np.zeros(3)
    psf_f2 =np.zeros(3)
    if sf_index ==1:
        hx_offset = 0.183
        hy_offset = 0.1321
    elif sf_index ==2:
        hx_offset = 0.183
        hy_offset = -0.1321

    psf_f1[0]= vd_b[0]*(t_prev+T_phi)+hx_offset+SL_x_hlip/2
    psf_f1[1]= vd_b[1]*(t_prev+T_phi)+hy_offset +SL_y_hlip/2;
    #psf_f1[2]= 0

    psf_f2[0]= vd_b[0]*(t_prev+T_phi)-hx_offset+SL_x_hlip/2
    psf_f2[1]= vd_b[1]*(t_prev+T_phi)-hy_offset +SL_y_hlip/2;
    #psf_f1[2]= 0

    psf_f =np.concatenate((psf_f1, psf_f2), axis=None)

    return psf_f

def swing_foot_p_f(q,T_phi,vc,vc_d,hz_0, sf_index): #T_phi=stance phase duration for a leg

    offset1 =np.zeros(3)
    offset1[1] = 0.065*1.0

    if sf_index ==1:
        p_hip= FL_hip(q) + offset1
    elif sf_index ==2:
        p_hip= RR_hip(q) - offset1*1.0
    elif sf_index ==3:
        p_hip= FR_hip(q) - offset1
    elif sf_index ==4:
        p_hip= RL_hip(q) + offset1
    else:
        print('not a static gait: stopping the operation')
    ph_f = p_hip + T_phi*vc_d*3/4 + np.sqrt(hz_0/9.81)*(vc-vc_d)
    p_f = ph_f
    p_f[2]=0.016
    return p_f

def swing_foot_p_i_trotting(q, sf_index):

    if sf_index ==1:
        psf_1 = np.array(eng.F_2_func(q)).reshape(3)
        psf_2 = np.array(eng.F_3_func(q)).reshape(3)
    elif sf_index ==2:
        psf_1 = np.array(eng.F_1_func(q)).reshape(3)
        psf_2 = np.array(eng.F_4_func(q)).reshape(3)
    # elif sf_index ==3:
    #     p_i = FR_endpoints(q)
    # elif sf_index ==4:
    #     p_i = RL_endpoints(q)
    # else:
        # print('not a static gait: stopping the operation')
    #p_f = p_hip + T_phi*vc_d*3/4 + sqrt(hz_0/9.81)(vc-vc_d)
    psf_i =np.concatenate((psf_1, psf_2), axis=None)
    return psf_i

def swing_foot_p_i(q, sf_index):

    if sf_index ==1:       
        p_i = np.array(eng.F_2_func(q)).reshape(3)
    elif sf_index ==2:
        p_i = np.array(eng.F_3_func(q)).reshape(3)
    elif sf_index ==3:
        p_i = np.array(eng.F_1_func(q)).reshape(3)
    elif sf_index ==4:
        p_i = np.array(eng.F_4_func(q)).reshape(3)
    else:
        print('not a static gait: stopping the operation')
    # p_f = p_hip + T_phi*vc_d*3/4 + sqrt(hz_0/9.81)(vc-vc_d)
    return p_i


def FL_djdq(q,dq):
    var1=q
    var2=dq
    p_output1=np.zeros(3)

    t95 = np.cos(var1[3]);
    t111 = np.cos(var1[4]);
    t119 = np.cos(var1[5]);
    t147 = np.cos(var1[9]);
    t127 = np.sin(var1[9]);
    t154 = np.sin(var1[3]);
    t125 = np.cos(var1[10]);
    t136 = -1.*t127;
    t137 = 0. + t136;
    t141 = t95*t111*t119*t137;
    t156 = -1.*t147*t111*t119*t154;
    t157 = t141 + t156;
    t168 = -1.*t111*t119*t127*t154;
    t179 = np.cos(var1[11]);
    t180 = 0. + t179;
    t199 = -1.*t95*t111*t119*t127;
    t201 = t199 + t156;
    t185 = np.sin(var1[10]);
    t190 = np.sin(var1[11]);
    t205 = t147*t95*t111*t119;
    t226 = t111*t119*t137*t154;
    t227 = t205 + t226;
    t230 = np.sin(var1[4]);
    t228 = -1.*t185*t227;
    t234 = -1.*t125*t119*t230;
    t238 = t228 + t234;
    t165 = 0. + t147;
    t293 = -1.*t111*t119*t185;
    t296 = -1.*t147*t95*t119*t230;
    t300 = -1.*t119*t137*t154*t230;
    t301 = t296 + t300;
    t302 = t125*t301;
    t305 = t293 + t302;
    t328 = np.sin(var1[5]);
    t347 = t185*t230*t328;
    t348 = -1.*t147*t95*t111*t328;
    t349 = -1.*t111*t137*t154*t328;
    t350 = t348 + t349;
    t351 = t125*t350;
    t352 = t347 + t351;
    t204 = -0.25*t125*t201;
    t207 = t205 + t168;
    t208 = 0.037*t207;
    t216 = t125*t180*t201;
    t217 = -1.*t185*t190*t201;
    t221 = t216 + t217;
    t223 = -0.27*t221;
    t224 = t204 + t208 + t223;
    t386 = t119*t154*t230;
    t387 = -1.*t95*t328;
    t388 = t386 + t387;
    t389 = -1.*t147*t388;
    t390 = t95*t119*t230;
    t391 = t154*t328;
    t394 = t390 + t391;
    t395 = -1.*t127*t394;
    t398 = t389 + t395;
    t403 = t127*t388;
    t405 = -1.*t147*t394;
    t411 = t403 + t405;
    t425 = -1.*t119*t154*t230;
    t426 = t95*t328;
    t427 = t425 + t426;
    t428 = -1.*t127*t427;
    t432 = t428 + t405;
    t400 = -1.*t125*t190*t398;
    t460 = t119*t154;
    t461 = -1.*t95*t230*t328;
    t462 = t460 + t461;
    t464 = -1.*t95*t119;
    t465 = -1.*t154*t230*t328;
    t466 = t464 + t465;
    t463 = -1.*t127*t462;
    t467 = -1.*t147*t466;
    t468 = t463 + t467;
    t239 = t179*t238;
    t241 = t125*t227;
    t242 = -1.*t119*t185*t230;
    t245 = t241 + t242;
    t250 = -1.*t190*t245;
    t253 = t239 + t250;
    t434 = t147*t427;
    t491 = t137*t394;
    t492 = t434 + t491;
    t399 = -1.*t179*t185*t398;
    t401 = t399 + t400;
    t498 = t111*t119;
    t499 = 0. + t498;
    t503 = t137*t388;
    t505 = t147*t394;
    t507 = 0. + t503 + t505;
    t511 = t125*t499;
    t512 = -1.*t185*t507;
    t471 = t147*t462;
    t526 = t137*t466;
    t527 = t471 + t526;
    t124 = 0.0875*t95*t111*t119;
    t159 = -0.25*t125*t157;
    t166 = t165*t95*t111*t119;
    t173 = t166 + t168;
    t176 = 0.037*t173;
    t184 = t125*t180*t157;
    t191 = -1.*t185*t190*t157;
    t192 = t184 + t191;
    t194 = -0.27*t192;
    t195 = t124 + t159 + t176 + t194;
    t493 = -1.*t179*t185*t492;
    t494 = -1.*t125*t190*t492;
    t495 = t493 + t494;
    t543 = -1.*t95*t119*t230;
    t544 = -1.*t154*t328;
    t545 = t543 + t544;
    t542 = t137*t427;
    t546 = t147*t545;
    t547 = t542 + t546;
    t433 = -0.25*t125*t432;
    t436 = t434 + t395;
    t437 = 0.037*t436;
    t441 = t125*t180*t432;
    t443 = -1.*t185*t190*t432;
    t444 = t441 + t443;
    t448 = -0.27*t444;
    t450 = t433 + t437 + t448;
    t568 = t95*t119;
    t569 = t154*t230*t328;
    t570 = t568 + t569;
    t567 = t137*t462;
    t571 = t147*t570;
    t572 = t567 + t571;
    t334 = -0.0875*t111*t154*t328;
    t335 = 0.21935*t230*t328;
    t336 = -1.*t95*t111*t127*t328;
    t339 = -1.*t165*t111*t154*t328;
    t344 = t336 + t339;
    t345 = 0.037*t344;
    t354 = -0.25*t352;
    t355 = t180*t352;
    t360 = t125*t230*t328;
    t361 = -1.*t185*t350;
    t362 = t360 + t361;
    t366 = t190*t362;
    t367 = t355 + t366;
    t371 = -0.27*t367;
    t373 = t334 + t335 + t345 + t354 + t371;
    t469 = -0.25*t125*t468;
    t475 = -1.*t127*t466;
    t476 = t471 + t475;
    t477 = 0.037*t476;
    t478 = t125*t180*t468;
    t479 = -1.*t185*t190*t468;
    t480 = t478 + t479;
    t481 = -0.27*t480;
    t482 = t469 + t477 + t481;
    t525 = -1.*t111*t185*t328;
    t528 = t125*t527;
    t529 = t525 + t528;
    t530 = -1.*t190*t529;
    t531 = -1.*t125*t111*t328;
    t532 = -1.*t185*t527;
    t533 = t531 + t532;
    t534 = t179*t533;
    t535 = t530 + t534;
    t566 = 0.0875*t462;
    t573 = -0.25*t125*t572;
    t574 = t165*t462;
    t575 = t127*t570;
    t576 = t574 + t575;
    t577 = 0.037*t576;
    t578 = t125*t180*t572;
    t579 = -1.*t185*t190*t572;
    t580 = t578 + t579;
    t581 = -0.27*t580;
    t582 = t566 + t573 + t577 + t581;
    t281 = -0.21935*t111*t119;
    t541 = 0.0875*t427;
    t549 = t165*t427;
    t550 = t127*t545;
    t551 = t549 + t550;
    t552 = 0.037*t551;
    t590 = t125*t547;
    t591 = t293 + t590;
    t318 = -1.*t125*t111*t119;
    t257 = -0.25*t238;
    t258 = t180*t238;
    t259 = -1.*t125*t227;
    t267 = t119*t185*t230;
    t268 = t259 + t267;
    t269 = t190*t268;
    t270 = t258 + t269;
    t271 = -0.27*t270;
    t273 = t257 + t271;
    t500 = -1.*t499*t185;
    t508 = -1.*t125*t507;
    t509 = t500 + t508;
    t510 = t179*t509;
    t513 = t511 + t512;
    t514 = -1.*t190*t513;
    t515 = t510 + t514;
    t560 = 0.25*t185*t492;
    t561 = -1.*t180*t185*t492;
    t562 = t561 + t494;
    t563 = -0.27*t562;
    t564 = t560 + t563;
    t452 = 0.25*t185*t398;
    t453 = -1.*t180*t185*t398;
    t454 = t453 + t400;
    t455 = -0.27*t454;
    t456 = t452 + t455;
    t601 = -0.25*t533;
    t602 = t111*t185*t328;
    t603 = -1.*t125*t527;
    t604 = t602 + t603;
    t605 = t190*t604;
    t606 = t180*t533;
    t607 = t605 + t606;
    t608 = -0.27*t607;
    t609 = t601 + t608;
    t632 = t95*t111*t137*t328;
    t633 = -1.*t147*t111*t154*t328;
    t634 = t632 + t633;
    t646 = -1.*t119*t154;
    t647 = t95*t230*t328;
    t648 = t646 + t647;
    t649 = t137*t648;
    t650 = t147*t466;
    t651 = t649 + t650;
    t653 = -1.*t125*t190*t651;
    t689 = -1.*t147*t648;
    t690 = t689 + t475;
    t701 = t147*t95*t111*t328;
    t702 = t111*t137*t154*t328;
    t703 = t701 + t702;
    t652 = -1.*t179*t185*t651;
    t654 = t652 + t653;
    t686 = -1.*t127*t648;
    t714 = -1.*t147*t570;
    t715 = t686 + t714;
    t721 = t503 + t505;
    t731 = t111*t328;
    t732 = 0. + t731;
    t734 = t147*t648;
    t735 = t137*t570;
    t736 = 0. + t734 + t735;
    t740 = t125*t732;
    t741 = -1.*t185*t736;
    t637 = -1.*t111*t127*t154*t328;
    t756 = t336 + t633;
    t716 = -1.*t179*t185*t715;
    t717 = -1.*t125*t190*t715;
    t718 = t716 + t717;
    t687 = t686 + t650;
    t688 = 0.037*t687;
    t691 = -0.25*t125*t690;
    t692 = t125*t180*t690;
    t693 = -1.*t185*t190*t690;
    t694 = t692 + t693;
    t695 = -0.27*t694;
    t696 = t688 + t691 + t695;
    t785 = t689 + t575;
    t631 = 0.0875*t95*t111*t328;
    t635 = -0.25*t125*t634;
    t636 = t165*t95*t111*t328;
    t638 = t636 + t637;
    t639 = 0.037*t638;
    t640 = t125*t180*t634;
    t641 = -1.*t185*t190*t634;
    t642 = t640 + t641;
    t643 = -0.27*t642;
    t644 = t631 + t635 + t639 + t643;
    t757 = -0.25*t125*t756;
    t758 = t701 + t637;
    t759 = 0.037*t758;
    t760 = t125*t180*t756;
    t761 = -1.*t185*t190*t756;
    t762 = t760 + t761;
    t763 = -0.27*t762;
    t764 = t757 + t759 + t763;
    t700 = -1.*t185*t230*t328;
    t704 = t125*t703;
    t705 = t700 + t704;
    t706 = -1.*t190*t705;
    t707 = -1.*t125*t230*t328;
    t708 = -1.*t185*t703;
    t709 = t707 + t708;
    t710 = t179*t709;
    t711 = t706 + t710;
    t826 = -1.*t147*t95*t230*t328;
    t827 = -1.*t137*t154*t230*t328;
    t828 = t826 + t827;
    t829 = t125*t828;
    t830 = t525 + t829;
    t795 = 0.0875*t111*t119*t154;
    t796 = t95*t111*t119*t127;
    t797 = t165*t111*t119*t154;
    t798 = t796 + t797;
    t799 = 0.037*t798;
    t800 = -0.21935*t119*t230;
    t801 = -0.25*t245;
    t802 = t190*t238;
    t803 = t180*t245;
    t804 = t802 + t803;
    t805 = -0.27*t804;
    t806 = t795 + t799 + t800 + t801 + t805;
    t720 = t111*t119*t185;
    t722 = t125*t721;
    t723 = t720 + t722;
    t724 = -1.*t190*t723;
    t725 = t125*t111*t119;
    t726 = -1.*t185*t721;
    t727 = t725 + t726;
    t728 = t179*t727;
    t729 = t724 + t728;
    t656 = 0.0875*t394;
    t657 = t127*t427;
    t658 = t165*t394;
    t659 = t657 + t658;
    t660 = 0.037*t659;
    t661 = -0.25*t125*t492;
    t662 = t125*t180*t492;
    t663 = -1.*t185*t190*t492;
    t664 = t662 + t663;
    t665 = -0.27*t664;
    t666 = t656 + t660 + t661 + t665;
    t767 = -1.*t127*t388;
    t768 = t767 + t505;
    t769 = 0.037*t768;
    t770 = -0.25*t125*t398;
    t771 = t125*t180*t398;
    t772 = -1.*t185*t190*t398;
    t773 = t771 + t772;
    t774 = -0.27*t773;
    t775 = t769 + t770 + t774;
    t820 = -0.21935*t111*t328;
    t674 = 0.0875*t466;
    t675 = t127*t462;
    t676 = t165*t466;
    t677 = t675 + t676;
    t678 = 0.037*t677;
    t811 = -0.25*t709;
    t812 = -1.*t125*t703;
    t813 = t347 + t812;
    t814 = t190*t813;
    t815 = t180*t709;
    t816 = t814 + t815;
    t817 = -0.27*t816;
    t818 = t811 + t817;
    t668 = 0.25*t185*t651;
    t669 = -1.*t180*t185*t651;
    t670 = t669 + t653;
    t671 = -0.27*t670;
    t672 = t668 + t671;
    t778 = 0.25*t185*t715;
    t779 = -1.*t180*t185*t715;
    t780 = t779 + t717;
    t781 = -0.27*t780;
    t782 = t778 + t781;
    t733 = -1.*t185*t732;
    t737 = -1.*t125*t736;
    t738 = t733 + t737;
    t739 = t179*t738;
    t742 = t740 + t741;
    t743 = -1.*t190*t742;
    t744 = t739 + t743;
    t846 = -0.25*t727;
    t847 = -1.*t125*t721;
    t848 = t293 + t847;
    t849 = t190*t848;
    t850 = t180*t727;
    t851 = t849 + t850;
    t852 = -0.27*t851;
    t853 = t846 + t852;
    t882 = t95*t111*t137;
    t883 = -1.*t147*t111*t154;
    t884 = t882 + t883;
    t886 = -1.*t125*t190*t884;
    t900 = -1.*t147*t95*t111;
    t901 = -1.*t111*t137*t154;
    t902 = t900 + t901;
    t896 = -1.*t95*t111*t127;
    t912 = t111*t127*t154;
    t913 = t900 + t912;
    t922 = -1.*t95*t137*t230;
    t923 = t147*t154*t230;
    t924 = t922 + t923;
    t910 = t896 + t883;
    t939 = -1.*t125*t190*t910;
    t911 = 0.037*t910;
    t914 = -0.25*t125*t913;
    t915 = t125*t180*t913;
    t916 = -1.*t185*t190*t913;
    t917 = t915 + t916;
    t918 = -0.27*t917;
    t919 = t911 + t914 + t918;
    t920 = var2[9]*t919;
    t927 = t127*t154*t230;
    t949 = t95*t127*t230;
    t950 = t949 + t923;
    t885 = -1.*t179*t185*t884;
    t887 = t885 + t886;
    t938 = -1.*t179*t185*t910;
    t940 = t938 + t939;
    t965 = t147*t95*t111;
    t966 = t111*t137*t154;
    t967 = 0. + t965 + t966;
    t969 = -1.*t230;
    t970 = 0. + t969;
    t968 = -1.*t185*t967;
    t971 = t125*t970;
    t952 = -1.*t147*t95*t230;
    t989 = -1.*t137*t154*t230;
    t990 = t952 + t989;
    t895 = -0.0875*t111*t154;
    t897 = -1.*t165*t111*t154;
    t898 = t896 + t897;
    t899 = 0.037*t898;
    t1003 = t125*t902;
    t1004 = t185*t230;
    t1005 = t1003 + t1004;
    t921 = -0.0875*t95*t230;
    t925 = -0.25*t125*t924;
    t926 = -1.*t165*t95*t230;
    t928 = t926 + t927;
    t929 = 0.037*t928;
    t930 = t125*t180*t924;
    t931 = -1.*t185*t190*t924;
    t932 = t930 + t931;
    t933 = -0.27*t932;
    t934 = t921 + t925 + t929 + t933;
    t951 = -0.25*t125*t950;
    t953 = t952 + t927;
    t954 = 0.037*t953;
    t955 = t125*t180*t950;
    t956 = -1.*t185*t190*t950;
    t957 = t955 + t956;
    t958 = -0.27*t957;
    t959 = t951 + t954 + t958;
    t988 = -1.*t111*t185;
    t991 = t125*t990;
    t992 = t988 + t991;
    t993 = -1.*t190*t992;
    t994 = -1.*t125*t111;
    t995 = -1.*t185*t990;
    t996 = t994 + t995;
    t997 = t179*t996;
    t998 = t993 + t997;
    t889 = 0.25*t185*t884;
    t890 = -1.*t180*t185*t884;
    t891 = t890 + t886;
    t892 = -0.27*t891;
    t893 = t889 + t892;
    t942 = 0.25*t185*t910;
    t943 = -1.*t180*t185*t910;
    t944 = t943 + t939;
    t945 = -0.27*t944;
    t946 = t942 + t945;
    t974 = -1.*t125*t967;
    t975 = -1.*t185*t970;
    t976 = t974 + t975;
    t972 = t968 + t971;
    t973 = -1.*t190*t972;
    t977 = t179*t976;
    t978 = t973 + t977;
    t1019 = -0.25*t996;
    t1020 = t111*t185;
    t1021 = -1.*t125*t990;
    t1022 = t1020 + t1021;
    t1023 = t190*t1022;
    t1024 = t180*t996;
    t1025 = t1023 + t1024;
    t1026 = -0.27*t1025;
    t1027 = t1019 + t1026;
    p_output1[0]=var2[4]*(t195*var2[3] + (-0.0875*t119*t154*t230 + t281 - 0.25*t305 - 0.27*(t180*t305 + t190*(-1.*t185*t301 + t318)) + 0.037*(-1.*t119*t154*t165*t230 - 1.*t119*t127*t230*t95))*var2[4] + t373*var2[5] + t224*var2[9] + t273*var2[10] - 0.27*t253*var2[11]) + var2[9]*(t450*var2[3] + t224*var2[4] + t482*var2[5] + (0.037*t398 - 0.25*t125*t411 - 0.27*(t125*t180*t411 - 1.*t185*t190*t411))*var2[9] + t456*var2[10] - 0.27*t401*var2[11]) + var2[3]*((t541 - 0.25*t125*t547 - 0.27*(t125*t180*t547 - 1.*t185*t190*t547) + t552)*var2[3] + t195*var2[4] + t582*var2[5] + t450*var2[9] + t564*var2[10] - 0.27*t495*var2[11]) + var2[11]*(-0.27*t495*var2[3] - 0.27*t253*var2[4] - 0.27*t535*var2[5] - 0.27*t401*var2[9] - 0.27*t515*var2[10] - 0.27*(-1.*t179*(0. + t185*t499 + t125*t507) - 1.*t190*(0. + t511 + t512))*var2[11]) + var2[10]*(t564*var2[3] + t273*var2[4] + t609*var2[5] + t456*var2[9] + (-0.25*t509 - 0.27*(t190*(-1.*t125*t499 + t185*t507) + t180*t509))*var2[10] - 0.27*t515*var2[11]) + var2[5]*(t582*var2[3] + t373*var2[4] + (t281 + t541 + t552 - 0.25*t591 - 0.27*(t190*(t318 - 1.*t185*t547) + t180*t591))*var2[5] + t482*var2[9] + t609*var2[10] - 0.27*t535*var2[11]);
    p_output1[1]=var2[3]*((-0.25*t125*t527 - 0.27*(t125*t180*t527 - 1.*t185*t190*t527) + t674 + t678)*var2[3] + t644*var2[4] + t666*var2[5] + t696*var2[9] + t672*var2[10] - 0.27*t654*var2[11]) + var2[4]*(t644*var2[3] + (-0.0875*t154*t230*t328 + t820 - 0.25*t830 - 0.27*(t190*(t531 - 1.*t185*t828) + t180*t830) + 0.037*(-1.*t154*t165*t230*t328 - 1.*t127*t230*t328*t95))*var2[4] + t806*var2[5] + t764*var2[9] + t818*var2[10] - 0.27*t711*var2[11]) + var2[9]*(t696*var2[3] + t764*var2[4] + t775*var2[5] + (0.037*t715 - 0.25*t125*t785 - 0.27*(t125*t180*t785 - 1.*t185*t190*t785))*var2[9] + t782*var2[10] - 0.27*t718*var2[11]) + var2[5]*(t666*var2[3] + t806*var2[4] + (-0.25*t529 - 0.27*(t180*t529 + t190*t533) + t674 + t678 + t820)*var2[5] + t775*var2[9] + t853*var2[10] - 0.27*t729*var2[11]) + var2[11]*(-0.27*t654*var2[3] - 0.27*t711*var2[4] - 0.27*t729*var2[5] - 0.27*t718*var2[9] - 0.27*t744*var2[10] - 0.27*(-1.*t179*(0. + t185*t732 + t125*t736) - 1.*t190*(0. + t740 + t741))*var2[11]) + var2[10]*(t672*var2[3] + t818*var2[4] + t853*var2[5] + t782*var2[9] + (-0.25*t738 - 0.27*(t190*(-1.*t125*t732 + t185*t736) + t180*t738))*var2[10] - 0.27*t744*var2[11]);
    p_output1[2]=var2[3]*(t920 + (t895 + t899 - 0.25*t125*t902 - 0.27*(t125*t180*t902 - 1.*t185*t190*t902))*var2[3] + t934*var2[4] + t893*var2[10] - 0.27*t887*var2[11]) + var2[9]*(t920 + t919*var2[3] + t959*var2[4] + t946*var2[10] - 0.27*t940*var2[11]) + var2[11]*(-0.27*t887*var2[3] - 0.27*t998*var2[4] - 0.27*t940*var2[9] - 0.27*t978*var2[10] - 0.27*(-1.*t179*(0. + t125*t967 + t185*t970) - 1.*t190*(0. + t968 + t971))*var2[11]) + var2[10]*(t893*var2[3] + t1027*var2[4] + t946*var2[9] + (-0.25*t976 - 0.27*(t190*(t185*t967 - 1.*t125*t970) + t180*t976))*var2[10] - 0.27*t978*var2[11]) + var2[4]*(t934*var2[3] + (-0.25*t1005 + 0.21935*t230 + t895 + t899 - 0.27*(t1005*t180 + t190*(t125*t230 - 1.*t185*t902)))*var2[4] + t959*var2[9] + t1027*var2[10] - 0.27*t998*var2[11]);

    return p_output1



def RR_djdq(q,dq):
    var1=q
    var2=dq
    p_output1=np.zeros(3)
    t124 = np.cos(var1[3]);
    t141 = np.cos(var1[4]);
    t159 = np.cos(var1[5]);
    t195 = np.cos(var1[12]);
    t176 = np.sin(var1[12]);
    t197 = np.sin(var1[3]);
    t173 = np.cos(var1[13]);
    t184 = -1.*t176;
    t192 = 0. + t184;
    t194 = t124*t141*t159*t192;
    t204 = -1.*t195*t141*t159*t197;
    t205 = t194 + t204;
    t221 = -1.*t141*t159*t176*t197;
    t225 = np.cos(var1[14]);
    t226 = 0. + t225;
    t268 = -1.*t124*t141*t159*t176;
    t269 = t268 + t204;
    t239 = np.sin(var1[13]);
    t241 = np.sin(var1[14]);
    t271 = t195*t124*t141*t159;
    t302 = t141*t159*t192*t197;
    t309 = t271 + t302;
    t319 = np.sin(var1[4]);
    t316 = -1.*t239*t309;
    t320 = -1.*t173*t159*t319;
    t321 = t316 + t320;
    t208 = 0. + t195;
    t386 = -1.*t141*t159*t239;
    t390 = -1.*t195*t124*t159*t319;
    t391 = -1.*t159*t192*t197*t319;
    t401 = t390 + t391;
    t402 = t173*t401;
    t403 = t386 + t402;
    t434 = np.sin(var1[5]);
    t451 = t239*t319*t434;
    t452 = -1.*t195*t124*t141*t434;
    t454 = -1.*t141*t192*t197*t434;
    t455 = t452 + t454;
    t456 = t173*t455;
    t457 = t451 + t456;
    t270 = -0.25*t173*t269;
    t273 = t271 + t221;
    t279 = -0.037*t273;
    t281 = t173*t226*t269;
    t282 = -1.*t239*t241*t269;
    t283 = t281 + t282;
    t284 = -0.27*t283;
    t286 = t270 + t279 + t284;
    t491 = t159*t197*t319;
    t495 = -1.*t124*t434;
    t496 = t491 + t495;
    t497 = -1.*t195*t496;
    t498 = t124*t159*t319;
    t503 = t197*t434;
    t505 = t498 + t503;
    t510 = -1.*t176*t505;
    t511 = t497 + t510;
    t519 = t176*t496;
    t520 = -1.*t195*t505;
    t521 = t519 + t520;
    t536 = -1.*t159*t197*t319;
    t537 = t124*t434;
    t538 = t536 + t537;
    t539 = -1.*t176*t538;
    t540 = t539 + t520;
    t516 = -1.*t173*t241*t511;
    t560 = t159*t197;
    t562 = -1.*t124*t319*t434;
    t563 = t560 + t562;
    t565 = -1.*t124*t159;
    t566 = -1.*t197*t319*t434;
    t567 = t565 + t566;
    t564 = -1.*t176*t563;
    t568 = -1.*t195*t567;
    t569 = t564 + t568;
    t322 = t225*t321;
    t323 = t173*t309;
    t324 = -1.*t159*t239*t319;
    t325 = t323 + t324;
    t334 = -1.*t241*t325;
    t335 = t322 + t334;
    t542 = t195*t538;
    t587 = t192*t505;
    t588 = t542 + t587;
    t515 = -1.*t225*t239*t511;
    t517 = t515 + t516;
    t595 = t141*t159;
    t596 = 0. + t595;
    t598 = t192*t496;
    t599 = t195*t505;
    t600 = 0. + t598 + t599;
    t605 = t173*t596;
    t606 = -1.*t239*t600;
    t573 = t195*t563;
    t620 = t192*t567;
    t621 = t573 + t620;
    t166 = -0.0875*t124*t141*t159;
    t207 = -0.25*t173*t205;
    t216 = t208*t124*t141*t159;
    t223 = t216 + t221;
    t224 = -0.037*t223;
    t238 = t173*t226*t205;
    t253 = -1.*t239*t241*t205;
    t256 = t238 + t253;
    t257 = -0.27*t256;
    t258 = t166 + t207 + t224 + t257;
    t589 = -1.*t225*t239*t588;
    t590 = -1.*t173*t241*t588;
    t592 = t589 + t590;
    t640 = -1.*t124*t159*t319;
    t642 = -1.*t197*t434;
    t643 = t640 + t642;
    t639 = t192*t538;
    t644 = t195*t643;
    t645 = t639 + t644;
    t541 = -0.25*t173*t540;
    t545 = t542 + t510;
    t546 = -0.037*t545;
    t548 = t173*t226*t540;
    t549 = -1.*t239*t241*t540;
    t550 = t548 + t549;
    t551 = -0.27*t550;
    t552 = t541 + t546 + t551;
    t673 = t124*t159;
    t674 = t197*t319*t434;
    t675 = t673 + t674;
    t672 = t192*t563;
    t676 = t195*t675;
    t677 = t672 + t676;
    t436 = 0.0875*t141*t197*t434;
    t437 = -0.21935*t319*t434;
    t441 = -1.*t124*t141*t176*t434;
    t444 = -1.*t208*t141*t197*t434;
    t448 = t441 + t444;
    t450 = -0.037*t448;
    t460 = -0.25*t457;
    t469 = t226*t457;
    t471 = t173*t319*t434;
    t476 = -1.*t239*t455;
    t477 = t471 + t476;
    t478 = t241*t477;
    t480 = t469 + t478;
    t481 = -0.27*t480;
    t482 = t436 + t437 + t450 + t460 + t481;
    t571 = -0.25*t173*t569;
    t574 = -1.*t176*t567;
    t575 = t573 + t574;
    t576 = -0.037*t575;
    t577 = t173*t226*t569;
    t578 = -1.*t239*t241*t569;
    t580 = t577 + t578;
    t581 = -0.27*t580;
    t582 = t571 + t576 + t581;
    t619 = -1.*t141*t239*t434;
    t622 = t173*t621;
    t623 = t619 + t622;
    t624 = -1.*t241*t623;
    t625 = -1.*t173*t141*t434;
    t626 = -1.*t239*t621;
    t627 = t625 + t626;
    t628 = t225*t627;
    t629 = t624 + t628;
    t671 = -0.0875*t563;
    t678 = -0.25*t173*t677;
    t679 = t208*t563;
    t680 = t176*t675;
    t681 = t679 + t680;
    t682 = -0.037*t681;
    t683 = t173*t226*t677;
    t684 = -1.*t239*t241*t677;
    t685 = t683 + t684;
    t687 = -0.27*t685;
    t688 = t671 + t678 + t682 + t687;
    t371 = 0.21935*t141*t159;
    t638 = -0.0875*t538;
    t649 = t208*t538;
    t650 = t176*t643;
    t654 = t649 + t650;
    t655 = -0.037*t654;
    t699 = t173*t645;
    t701 = t386 + t699;
    t415 = -1.*t173*t141*t159;
    t345 = -0.25*t321;
    t347 = t226*t321;
    t351 = -1.*t173*t309;
    t352 = t159*t239*t319;
    t354 = t351 + t352;
    t355 = t241*t354;
    t360 = t347 + t355;
    t362 = -0.27*t360;
    t366 = t345 + t362;
    t597 = -1.*t596*t239;
    t601 = -1.*t173*t600;
    t602 = t597 + t601;
    t604 = t225*t602;
    t607 = t605 + t606;
    t608 = -1.*t241*t607;
    t609 = t604 + t608;
    t664 = 0.25*t239*t588;
    t665 = -1.*t226*t239*t588;
    t666 = t665 + t590;
    t667 = -0.27*t666;
    t668 = t664 + t667;
    t554 = 0.25*t239*t511;
    t555 = -1.*t226*t239*t511;
    t556 = t555 + t516;
    t557 = -0.27*t556;
    t558 = t554 + t557;
    t720 = -0.25*t627;
    t722 = t141*t239*t434;
    t725 = -1.*t173*t621;
    t727 = t722 + t725;
    t728 = t241*t727;
    t729 = t226*t627;
    t730 = t728 + t729;
    t731 = -0.27*t730;
    t734 = t720 + t731;
    t765 = t124*t141*t192*t434;
    t766 = -1.*t195*t141*t197*t434;
    t768 = t765 + t766;
    t782 = -1.*t159*t197;
    t783 = t124*t319*t434;
    t784 = t782 + t783;
    t786 = t192*t784;
    t787 = t195*t567;
    t788 = t786 + t787;
    t790 = -1.*t173*t241*t788;
    t831 = -1.*t195*t784;
    t832 = t831 + t574;
    t843 = t195*t124*t141*t434;
    t844 = t141*t192*t197*t434;
    t845 = t843 + t844;
    t789 = -1.*t225*t239*t788;
    t791 = t789 + t790;
    t824 = -1.*t176*t784;
    t857 = -1.*t195*t675;
    t858 = t824 + t857;
    t864 = t598 + t599;
    t874 = t141*t434;
    t875 = 0. + t874;
    t877 = t195*t784;
    t878 = t192*t675;
    t879 = 0. + t877 + t878;
    t887 = t173*t875;
    t888 = -1.*t239*t879;
    t771 = -1.*t141*t176*t197*t434;
    t909 = t441 + t766;
    t859 = -1.*t225*t239*t858;
    t860 = -1.*t173*t241*t858;
    t861 = t859 + t860;
    t825 = t824 + t787;
    t829 = -0.037*t825;
    t833 = -0.25*t173*t832;
    t834 = t173*t226*t832;
    t835 = -1.*t239*t241*t832;
    t836 = t834 + t835;
    t837 = -0.27*t836;
    t838 = t829 + t833 + t837;
    t948 = t831 + t680;
    t764 = -0.0875*t124*t141*t434;
    t769 = -0.25*t173*t768;
    t770 = t208*t124*t141*t434;
    t773 = t770 + t771;
    t774 = -0.037*t773;
    t775 = t173*t226*t768;
    t776 = -1.*t239*t241*t768;
    t777 = t775 + t776;
    t778 = -0.27*t777;
    t780 = t764 + t769 + t774 + t778;
    t911 = -0.25*t173*t909;
    t912 = t843 + t771;
    t914 = -0.037*t912;
    t915 = t173*t226*t909;
    t917 = -1.*t239*t241*t909;
    t918 = t915 + t917;
    t919 = -0.27*t918;
    t920 = t911 + t914 + t919;
    t842 = -1.*t239*t319*t434;
    t846 = t173*t845;
    t848 = t842 + t846;
    t849 = -1.*t241*t848;
    t850 = -1.*t173*t319*t434;
    t851 = -1.*t239*t845;
    t852 = t850 + t851;
    t853 = t225*t852;
    t854 = t849 + t853;
    t1006 = -1.*t195*t124*t319*t434;
    t1007 = -1.*t192*t197*t319*t434;
    t1008 = t1006 + t1007;
    t1009 = t173*t1008;
    t1010 = t619 + t1009;
    t961 = -0.0875*t141*t159*t197;
    t962 = t124*t141*t159*t176;
    t963 = t208*t141*t159*t197;
    t964 = t962 + t963;
    t965 = -0.037*t964;
    t966 = 0.21935*t159*t319;
    t969 = -0.25*t325;
    t971 = t241*t321;
    t977 = t226*t325;
    t978 = t971 + t977;
    t979 = -0.27*t978;
    t980 = t961 + t965 + t966 + t969 + t979;
    t863 = t141*t159*t239;
    t865 = t173*t864;
    t866 = t863 + t865;
    t867 = -1.*t241*t866;
    t868 = t173*t141*t159;
    t869 = -1.*t239*t864;
    t870 = t868 + t869;
    t871 = t225*t870;
    t872 = t867 + t871;
    t793 = -0.0875*t505;
    t794 = t176*t538;
    t795 = t208*t505;
    t796 = t794 + t795;
    t797 = -0.037*t796;
    t798 = -0.25*t173*t588;
    t799 = t173*t226*t588;
    t800 = -1.*t239*t241*t588;
    t801 = t799 + t800;
    t802 = -0.27*t801;
    t803 = t793 + t797 + t798 + t802;
    t925 = -1.*t176*t496;
    t927 = t925 + t599;
    t928 = -0.037*t927;
    t929 = -0.25*t173*t511;
    t930 = t173*t226*t511;
    t932 = -1.*t239*t241*t511;
    t933 = t930 + t932;
    t934 = -0.27*t933;
    t935 = t928 + t929 + t934;
    t999 = 0.21935*t141*t434;
    t811 = -0.0875*t567;
    t813 = t176*t563;
    t814 = t208*t567;
    t815 = t813 + t814;
    t816 = -0.037*t815;
    t985 = -0.25*t852;
    t986 = -1.*t173*t845;
    t987 = t451 + t986;
    t988 = t241*t987;
    t991 = t226*t852;
    t994 = t988 + t991;
    t996 = -0.27*t994;
    t997 = t985 + t996;
    t805 = 0.25*t239*t788;
    t806 = -1.*t226*t239*t788;
    t807 = t806 + t790;
    t808 = -0.27*t807;
    t809 = t805 + t808;
    t940 = 0.25*t239*t858;
    t941 = -1.*t226*t239*t858;
    t942 = t941 + t860;
    t944 = -0.27*t942;
    t945 = t940 + t944;
    t876 = -1.*t239*t875;
    t880 = -1.*t173*t879;
    t881 = t876 + t880;
    t882 = t225*t881;
    t889 = t887 + t888;
    t891 = -1.*t241*t889;
    t892 = t882 + t891;
    t1027 = -0.25*t870;
    t1028 = -1.*t173*t864;
    t1029 = t386 + t1028;
    t1030 = t241*t1029;
    t1031 = t226*t870;
    t1032 = t1030 + t1031;
    t1033 = -0.27*t1032;
    t1034 = t1027 + t1033;
    t1063 = t124*t141*t192;
    t1064 = -1.*t195*t141*t197;
    t1065 = t1063 + t1064;
    t1067 = -1.*t173*t241*t1065;
    t1081 = -1.*t195*t124*t141;
    t1082 = -1.*t141*t192*t197;
    t1083 = t1081 + t1082;
    t1077 = -1.*t124*t141*t176;
    t1093 = t141*t176*t197;
    t1094 = t1081 + t1093;
    t1103 = -1.*t124*t192*t319;
    t1104 = t195*t197*t319;
    t1105 = t1103 + t1104;
    t1091 = t1077 + t1064;
    t1120 = -1.*t173*t241*t1091;
    t1092 = -0.037*t1091;
    t1095 = -0.25*t173*t1094;
    t1096 = t173*t226*t1094;
    t1097 = -1.*t239*t241*t1094;
    t1098 = t1096 + t1097;
    t1099 = -0.27*t1098;
    t1100 = t1092 + t1095 + t1099;
    t1101 = var2[12]*t1100;
    t1108 = t176*t197*t319;
    t1130 = t124*t176*t319;
    t1131 = t1130 + t1104;
    t1066 = -1.*t225*t239*t1065;
    t1068 = t1066 + t1067;
    t1119 = -1.*t225*t239*t1091;
    t1121 = t1119 + t1120;
    t1146 = t195*t124*t141;
    t1147 = t141*t192*t197;
    t1148 = 0. + t1146 + t1147;
    t1150 = -1.*t319;
    t1151 = 0. + t1150;
    t1149 = -1.*t239*t1148;
    t1152 = t173*t1151;
    t1133 = -1.*t195*t124*t319;
    t1170 = -1.*t192*t197*t319;
    t1171 = t1133 + t1170;
    t1076 = 0.0875*t141*t197;
    t1078 = -1.*t208*t141*t197;
    t1079 = t1077 + t1078;
    t1080 = -0.037*t1079;
    t1184 = t173*t1083;
    t1185 = t239*t319;
    t1186 = t1184 + t1185;
    t1102 = 0.0875*t124*t319;
    t1106 = -0.25*t173*t1105;
    t1107 = -1.*t208*t124*t319;
    t1109 = t1107 + t1108;
    t1110 = -0.037*t1109;
    t1111 = t173*t226*t1105;
    t1112 = -1.*t239*t241*t1105;
    t1113 = t1111 + t1112;
    t1114 = -0.27*t1113;
    t1115 = t1102 + t1106 + t1110 + t1114;
    t1132 = -0.25*t173*t1131;
    t1134 = t1133 + t1108;
    t1135 = -0.037*t1134;
    t1136 = t173*t226*t1131;
    t1137 = -1.*t239*t241*t1131;
    t1138 = t1136 + t1137;
    t1139 = -0.27*t1138;
    t1140 = t1132 + t1135 + t1139;
    t1169 = -1.*t141*t239;
    t1172 = t173*t1171;
    t1173 = t1169 + t1172;
    t1174 = -1.*t241*t1173;
    t1175 = -1.*t173*t141;
    t1176 = -1.*t239*t1171;
    t1177 = t1175 + t1176;
    t1178 = t225*t1177;
    t1179 = t1174 + t1178;
    t1070 = 0.25*t239*t1065;
    t1071 = -1.*t226*t239*t1065;
    t1072 = t1071 + t1067;
    t1073 = -0.27*t1072;
    t1074 = t1070 + t1073;
    t1123 = 0.25*t239*t1091;
    t1124 = -1.*t226*t239*t1091;
    t1125 = t1124 + t1120;
    t1126 = -0.27*t1125;
    t1127 = t1123 + t1126;
    t1155 = -1.*t173*t1148;
    t1156 = -1.*t239*t1151;
    t1157 = t1155 + t1156;
    t1153 = t1149 + t1152;
    t1154 = -1.*t241*t1153;
    t1158 = t225*t1157;
    t1159 = t1154 + t1158;
    t1200 = -0.25*t1177;
    t1201 = t141*t239;
    t1202 = -1.*t173*t1171;
    t1203 = t1201 + t1202;
    t1204 = t241*t1203;
    t1205 = t226*t1177;
    t1206 = t1204 + t1205;
    t1207 = -0.27*t1206;
    t1208 = t1200 + t1207;
    p_output1[0]=var2[4]*(t258*var2[3] + (0.0875*t159*t197*t319 - 0.037*(-1.*t124*t159*t176*t319 - 1.*t159*t197*t208*t319) + t371 - 0.25*t403 - 0.27*(t226*t403 + t241*(-1.*t239*t401 + t415)))*var2[4] + t482*var2[5] + t286*var2[12] + t366*var2[13] - 0.27*t335*var2[14]) + var2[12]*(t552*var2[3] + t286*var2[4] + t582*var2[5] + (-0.037*t511 - 0.25*t173*t521 - 0.27*(t173*t226*t521 - 1.*t239*t241*t521))*var2[12] + t558*var2[13] - 0.27*t517*var2[14]) + var2[3]*((t638 - 0.25*t173*t645 - 0.27*(t173*t226*t645 - 1.*t239*t241*t645) + t655)*var2[3] + t258*var2[4] + t688*var2[5] + t552*var2[12] + t668*var2[13] - 0.27*t592*var2[14]) + var2[14]*(-0.27*t592*var2[3] - 0.27*t335*var2[4] - 0.27*t629*var2[5] - 0.27*t517*var2[12] - 0.27*t609*var2[13] - 0.27*(-1.*t225*(0. + t239*t596 + t173*t600) - 1.*t241*(0. + t605 + t606))*var2[14]) + var2[13]*(t668*var2[3] + t366*var2[4] + t734*var2[5] + t558*var2[12] + (-0.25*t602 - 0.27*(t241*(-1.*t173*t596 + t239*t600) + t226*t602))*var2[13] - 0.27*t609*var2[14]) + var2[5]*(t688*var2[3] + t482*var2[4] + (t371 + t638 + t655 - 0.25*t701 - 0.27*(t241*(t415 - 1.*t239*t645) + t226*t701))*var2[5] + t582*var2[12] + t734*var2[13] - 0.27*t629*var2[14]);
    p_output1[1]=var2[3]*((-0.25*t173*t621 - 0.27*(t173*t226*t621 - 1.*t239*t241*t621) + t811 + t816)*var2[3] + t780*var2[4] + t803*var2[5] + t838*var2[12] + t809*var2[13] - 0.27*t791*var2[14]) + var2[4]*(t780*var2[3] + (-0.25*t1010 + 0.0875*t197*t319*t434 - 0.037*(-1.*t124*t176*t319*t434 - 1.*t197*t208*t319*t434) - 0.27*(t1010*t226 + t241*(-1.*t1008*t239 + t625)) + t999)*var2[4] + t980*var2[5] + t920*var2[12] + t997*var2[13] - 0.27*t854*var2[14]) + var2[12]*(t838*var2[3] + t920*var2[4] + t935*var2[5] + (-0.037*t858 - 0.25*t173*t948 - 0.27*(t173*t226*t948 - 1.*t239*t241*t948))*var2[12] + t945*var2[13] - 0.27*t861*var2[14]) + var2[5]*(t803*var2[3] + t980*var2[4] + (-0.25*t623 - 0.27*(t226*t623 + t241*t627) + t811 + t816 + t999)*var2[5] + t935*var2[12] + t1034*var2[13] - 0.27*t872*var2[14]) + var2[14]*(-0.27*t791*var2[3] - 0.27*t854*var2[4] - 0.27*t872*var2[5] - 0.27*t861*var2[12] - 0.27*t892*var2[13] - 0.27*(-1.*t225*(0. + t239*t875 + t173*t879) - 1.*t241*(0. + t887 + t888))*var2[14]) + var2[13]*(t809*var2[3] + t997*var2[4] + t1034*var2[5] + t945*var2[12] + (-0.25*t881 - 0.27*(t241*(-1.*t173*t875 + t239*t879) + t226*t881))*var2[13] - 0.27*t892*var2[14]);
    p_output1[2]=var2[3]*(t1101 + (t1076 + t1080 - 0.25*t1083*t173 - 0.27*(t1083*t173*t226 - 1.*t1083*t239*t241))*var2[3] + t1115*var2[4] + t1074*var2[13] - 0.27*t1068*var2[14]) + var2[12]*(t1101 + t1100*var2[3] + t1140*var2[4] + t1127*var2[13] - 0.27*t1121*var2[14]) + var2[13]*(t1074*var2[3] + t1208*var2[4] + t1127*var2[12] + (-0.25*t1157 - 0.27*(t1157*t226 + (-1.*t1151*t173 + t1148*t239)*t241))*var2[13] - 0.27*t1159*var2[14]) + var2[4]*(t1115*var2[3] + (t1076 + t1080 - 0.25*t1186 - 0.21935*t319 - 0.27*(t1186*t226 + t241*(-1.*t1083*t239 + t173*t319)))*var2[4] + t1140*var2[12] + t1208*var2[13] - 0.27*t1179*var2[14]) + var2[14]*(-0.27*t1068*var2[3] - 0.27*t1179*var2[4] - 0.27*t1121*var2[12] - 0.27*t1159*var2[13] - 0.27*(-1.*t225*(0. + t1148*t173 + t1151*t239) - 1.*(0. + t1149 + t1152)*t241)*var2[14]);

    return p_output1


def FR_djdq(q,dq):
    var1=q
    var2=dq
    p_output1=np.zeros(3)

    t238 = np.cos(var1[3]);
    t207 = np.cos(var1[5]);
    t223 = np.sin(var1[4]);
    t216 = np.sin(var1[3]);
    t256 = np.sin(var1[5]);
    t194 = np.cos(var1[6]);
    t224 = -1.*t207*t216*t223;
    t257 = t238*t256;
    t258 = t224 + t257;
    t267 = t194*t258;
    t270 = t238*t207*t223;
    t271 = t216*t256;
    t273 = t270 + t271;
    t279 = np.sin(var1[6]);
    t281 = -1.*t279;
    t283 = 0. + t281;
    t284 = t273*t283;
    t286 = t267 + t284;
    t166 = np.cos(var1[8]);
    t288 = np.sin(var1[7]);
    t321 = np.cos(var1[7]);
    t345 = t207*t216*t223;
    t347 = -1.*t238*t256;
    t352 = t345 + t347;
    t354 = -1.*t194*t352;
    t355 = -1.*t273*t279;
    t360 = t354 + t355;
    t322 = np.sin(var1[8]);
    t376 = np.cos(var1[4]);
    t382 = t238*t376*t207*t194;
    t384 = t376*t207*t216*t283;
    t385 = t382 + t384;
    t436 = t207*t216;
    t437 = -1.*t238*t223*t256;
    t448 = t436 + t437;
    t450 = t194*t448;
    t451 = -1.*t238*t207;
    t456 = -1.*t216*t223*t256;
    t457 = t451 + t456;
    t460 = t457*t283;
    t469 = t450 + t460;
    t517 = t376*t207;
    t518 = 0. + t517;
    t487 = t194*t273;
    t491 = t352*t283;
    t498 = 0. + t487 + t491;
    t524 = t518*t321;
    t526 = -1.*t498*t288;
    t302 = -1.*t166*t286*t288;
    t323 = -1.*t321*t286*t322;
    t335 = t302 + t323;
    t557 = 0. + t166;
    t576 = -1.*t376*t207*t194*t216;
    t577 = t238*t376*t207*t283;
    t580 = t576 + t577;
    t582 = 0. + t194;
    t604 = -1.*t238*t207*t223;
    t605 = -1.*t216*t256;
    t609 = t604 + t605;
    t610 = t194*t609;
    t611 = t258*t283;
    t612 = t610 + t611;
    t631 = t238*t207;
    t632 = t216*t223*t256;
    t635 = t631 + t632;
    t636 = t194*t635;
    t638 = t448*t283;
    t639 = t636 + t638;
    t660 = -1.*t194*t273;
    t661 = -1.*t258*t279;
    t662 = t660 + t661;
    t362 = -1.*t166*t360*t288;
    t366 = -1.*t321*t360*t322;
    t367 = t362 + t366;
    t584 = -1.*t376*t207*t216*t279;
    t688 = -1.*t238*t376*t207*t279;
    t691 = t576 + t688;
    t709 = t352*t279;
    t710 = t660 + t709;
    t664 = -0.25*t321*t662;
    t666 = t267 + t355;
    t667 = -0.037*t666;
    t668 = t321*t557*t662;
    t670 = -1.*t662*t288*t322;
    t671 = t668 + t670;
    t672 = -0.27*t671;
    t673 = t664 + t667 + t672;
    t729 = -1.*t194*t457;
    t730 = -1.*t448*t279;
    t731 = t729 + t730;
    t373 = -1.*t207*t321*t223;
    t402 = -1.*t385*t288;
    t413 = t373 + t402;
    t414 = t166*t413;
    t416 = t321*t385;
    t417 = -1.*t207*t223*t288;
    t418 = t416 + t417;
    t420 = -1.*t418*t322;
    t421 = t414 + t420;
    t575 = -0.0875*t238*t376*t207;
    t581 = -0.25*t321*t580;
    t583 = t238*t376*t207*t582;
    t585 = t583 + t584;
    t586 = -0.037*t585;
    t587 = t321*t557*t580;
    t592 = -1.*t580*t288*t322;
    t593 = t587 + t592;
    t594 = -0.27*t593;
    t595 = t575 + t581 + t586 + t594;
    t692 = -0.25*t321*t691;
    t694 = t382 + t584;
    t695 = -0.037*t694;
    t696 = t321*t557*t691;
    t697 = -1.*t691*t288*t322;
    t698 = t696 + t697;
    t699 = -0.27*t698;
    t702 = t692 + t695 + t699;
    t780 = -1.*t238*t207*t194*t223;
    t781 = -1.*t207*t216*t223*t283;
    t783 = t780 + t781;
    t786 = t321*t783;
    t787 = -1.*t376*t207*t288;
    t791 = t786 + t787;
    t810 = -1.*t238*t376*t194*t256;
    t811 = -1.*t376*t216*t256*t283;
    t813 = t810 + t811;
    t814 = t321*t813;
    t815 = t223*t256*t288;
    t816 = t814 + t815;
    t503 = -1.*t321*t498;
    t519 = -1.*t518*t288;
    t522 = t503 + t519;
    t523 = t166*t522;
    t528 = t524 + t526;
    t533 = -1.*t528*t322;
    t534 = t523 + t533;
    t556 = 0.25*t286*t288;
    t558 = -1.*t557*t286*t288;
    t559 = t558 + t323;
    t560 = -0.27*t559;
    t571 = t556 + t560;
    t680 = 0.25*t360*t288;
    t681 = -1.*t557*t360*t288;
    t682 = t681 + t366;
    t683 = -0.27*t682;
    t685 = t680 + t683;
    t755 = -0.25*t413;
    t757 = t557*t413;
    t758 = -1.*t321*t385;
    t759 = t207*t223*t288;
    t760 = t758 + t759;
    t762 = t760*t322;
    t763 = t757 + t762;
    t764 = -0.27*t763;
    t765 = t755 + t764;
    t433 = -1.*t376*t321*t256;
    t471 = -1.*t469*t288;
    t477 = t433 + t471;
    t478 = t166*t477;
    t480 = t321*t469;
    t481 = -1.*t376*t256*t288;
    t482 = t480 + t481;
    t483 = -1.*t482*t322;
    t484 = t478 + t483;
    t630 = -0.0875*t448;
    t643 = -0.25*t321*t639;
    t644 = t582*t448;
    t647 = t635*t279;
    t649 = t644 + t647;
    t650 = -0.037*t649;
    t654 = t321*t557*t639;
    t655 = -1.*t639*t288*t322;
    t656 = t654 + t655;
    t657 = -0.27*t656;
    t658 = t630 + t643 + t650 + t657;
    t734 = -0.25*t321*t731;
    t735 = -1.*t457*t279;
    t739 = t450 + t735;
    t740 = -0.037*t739;
    t744 = t321*t557*t731;
    t745 = -1.*t731*t288*t322;
    t746 = t744 + t745;
    t747 = -0.27*t746;
    t748 = t734 + t740 + t747;
    t841 = -0.25*t477;
    t843 = t557*t477;
    t844 = -1.*t321*t469;
    t846 = t376*t256*t288;
    t852 = t844 + t846;
    t853 = t852*t322;
    t854 = t843 + t853;
    t855 = -0.27*t854;
    t856 = t841 + t855;
    t803 = 0.0875*t376*t216*t256;
    t804 = 0.21935*t223*t256;
    t805 = -1.*t376*t582*t216*t256;
    t807 = -1.*t238*t376*t256*t279;
    t808 = t805 + t807;
    t809 = -0.037*t808;
    t817 = -0.25*t816;
    t818 = t557*t816;
    t819 = t321*t223*t256;
    t820 = -1.*t813*t288;
    t821 = t819 + t820;
    t822 = t821*t322;
    t823 = t818 + t822;
    t825 = -0.27*t823;
    t829 = t803 + t804 + t809 + t817 + t825;
    t770 = -0.21935*t376*t207;
    t599 = -0.0875*t258;
    t614 = t582*t258;
    t615 = t609*t279;
    t616 = t614 + t615;
    t617 = -0.037*t616;
    t898 = t321*t612;
    t899 = t898 + t787;
    t794 = -1.*t376*t207*t321;
    t920 = t194*t457;
    t921 = -1.*t207*t216;
    t923 = t238*t223*t256;
    t927 = t921 + t923;
    t928 = t927*t283;
    t929 = t920 + t928;
    t936 = -1.*t194*t635;
    t937 = -1.*t927*t279;
    t940 = t936 + t937;
    t949 = t487 + t491;
    t963 = t238*t376*t194*t256;
    t964 = t376*t216*t256*t283;
    t965 = t963 + t964;
    t988 = t376*t256;
    t991 = 0. + t988;
    t983 = t194*t927;
    t984 = t635*t283;
    t985 = 0. + t983 + t984;
    t998 = t321*t991;
    t999 = -1.*t985*t288;
    t930 = -1.*t166*t929*t288;
    t933 = -1.*t321*t929*t322;
    t934 = t930 + t933;
    t1029 = -1.*t376*t194*t216*t256;
    t1030 = t238*t376*t256*t283;
    t1031 = t1029 + t1030;
    t1074 = -1.*t194*t927;
    t1075 = t1074 + t735;
    t942 = -1.*t166*t940*t288;
    t944 = -1.*t321*t940*t322;
    t945 = t942 + t944;
    t1034 = -1.*t376*t216*t256*t279;
    t1100 = t1029 + t807;
    t1072 = t920 + t937;
    t1073 = -0.037*t1072;
    t1076 = -0.25*t321*t1075;
    t1079 = t321*t557*t1075;
    t1080 = -1.*t1075*t288*t322;
    t1084 = t1079 + t1080;
    t1085 = -0.27*t1084;
    t1086 = t1073 + t1076 + t1085;
    t1129 = t1074 + t647;
    t962 = -1.*t321*t223*t256;
    t966 = -1.*t965*t288;
    t969 = t962 + t966;
    t971 = t166*t969;
    t977 = t321*t965;
    t978 = -1.*t223*t256*t288;
    t979 = t977 + t978;
    t980 = -1.*t979*t322;
    t981 = t971 + t980;
    t1027 = -0.0875*t238*t376*t256;
    t1032 = -0.25*t321*t1031;
    t1033 = t238*t376*t582*t256;
    t1035 = t1033 + t1034;
    t1036 = -0.037*t1035;
    t1037 = t321*t557*t1031;
    t1038 = -1.*t1031*t288*t322;
    t1039 = t1037 + t1038;
    t1040 = -0.27*t1039;
    t1041 = t1027 + t1032 + t1036 + t1040;
    t1101 = -0.25*t321*t1100;
    t1102 = t963 + t1034;
    t1104 = -0.037*t1102;
    t1106 = t321*t557*t1100;
    t1108 = -1.*t1100*t288*t322;
    t1109 = t1106 + t1108;
    t1110 = -0.27*t1109;
    t1111 = t1101 + t1104 + t1110;
    t1187 = -1.*t238*t194*t223*t256;
    t1188 = -1.*t216*t223*t256*t283;
    t1189 = t1187 + t1188;
    t1190 = t321*t1189;
    t1191 = t1190 + t481;
    t947 = t376*t207*t321;
    t951 = -1.*t949*t288;
    t953 = t947 + t951;
    t954 = t166*t953;
    t955 = t321*t949;
    t957 = t376*t207*t288;
    t958 = t955 + t957;
    t959 = -1.*t958*t322;
    t960 = t954 + t959;
    t1043 = -0.0875*t273;
    t1044 = -0.25*t321*t286;
    t1045 = t582*t273;
    t1046 = t258*t279;
    t1047 = t1045 + t1046;
    t1048 = -0.037*t1047;
    t1049 = t321*t557*t286;
    t1050 = -1.*t286*t288*t322;
    t1051 = t1049 + t1050;
    t1052 = -0.27*t1051;
    t1053 = t1043 + t1044 + t1048 + t1052;
    t1114 = -1.*t352*t279;
    t1115 = t487 + t1114;
    t1116 = -0.037*t1115;
    t1117 = -0.25*t321*t360;
    t1118 = t321*t557*t360;
    t1121 = -1.*t360*t288*t322;
    t1122 = t1118 + t1121;
    t1123 = -0.27*t1122;
    t1125 = t1116 + t1117 + t1123;
    t1162 = -0.0875*t376*t207*t216;
    t1163 = -0.21935*t207*t223;
    t1164 = t376*t207*t582*t216;
    t1165 = t238*t376*t207*t279;
    t1166 = t1164 + t1165;
    t1167 = -0.037*t1166;
    t1168 = -0.25*t418;
    t1169 = t557*t418;
    t1172 = t413*t322;
    t1175 = t1169 + t1172;
    t1177 = -0.27*t1175;
    t1178 = t1162 + t1163 + t1167 + t1168 + t1177;
    t1180 = -0.21935*t376*t256;
    t1055 = -0.0875*t457;
    t1057 = t582*t457;
    t1058 = t448*t279;
    t1059 = t1057 + t1058;
    t1060 = -0.037*t1059;
    t987 = -1.*t321*t985;
    t994 = -1.*t991*t288;
    t996 = t987 + t994;
    t997 = t166*t996;
    t1000 = t998 + t999;
    t1001 = -1.*t1000*t322;
    t1002 = t997 + t1001;
    t1020 = 0.25*t929*t288;
    t1022 = -1.*t557*t929*t288;
    t1023 = t1022 + t933;
    t1024 = -0.27*t1023;
    t1025 = t1020 + t1024;
    t1092 = 0.25*t940*t288;
    t1093 = -1.*t557*t940*t288;
    t1095 = t1093 + t944;
    t1096 = -0.27*t1095;
    t1098 = t1092 + t1096;
    t1207 = -0.25*t953;
    t1208 = t557*t953;
    t1209 = -1.*t321*t949;
    t1210 = t1209 + t787;
    t1211 = t1210*t322;
    t1212 = t1208 + t1211;
    t1213 = -0.27*t1212;
    t1214 = t1207 + t1213;
    t1145 = -0.25*t969;
    t1146 = t557*t969;
    t1147 = -1.*t321*t965;
    t1150 = t1147 + t815;
    t1152 = t1150*t322;
    t1158 = t1146 + t1152;
    t1159 = -0.27*t1158;
    t1160 = t1145 + t1159;
    t1244 = -1.*t376*t194*t216;
    t1245 = t238*t376*t283;
    t1246 = t1244 + t1245;
    t1251 = -1.*t238*t376*t279;
    t1252 = t1244 + t1251;
    t1258 = -1.*t238*t194*t223;
    t1259 = -1.*t216*t223*t283;
    t1260 = t1258 + t1259;
    t1274 = -1.*t223;
    t1275 = 0. + t1274;
    t1270 = t238*t376*t194;
    t1271 = t376*t216*t283;
    t1272 = 0. + t1270 + t1271;
    t1279 = t321*t1275;
    t1280 = -1.*t1272*t288;
    t1247 = -1.*t166*t1246*t288;
    t1248 = -1.*t321*t1246*t322;
    t1249 = t1247 + t1248;
    t1303 = -1.*t238*t376*t194;
    t1304 = -1.*t376*t216*t283;
    t1305 = t1303 + t1304;
    t1317 = t194*t216*t223;
    t1318 = -1.*t238*t223*t283;
    t1319 = t1317 + t1318;
    t1332 = t376*t216*t279;
    t1333 = t1303 + t1332;
    t1253 = -1.*t166*t1252*t288;
    t1254 = -1.*t321*t1252*t322;
    t1255 = t1253 + t1254;
    t1331 = -0.037*t1252;
    t1334 = -0.25*t321*t1333;
    t1335 = t321*t557*t1333;
    t1336 = -1.*t1333*t288*t322;
    t1337 = t1335 + t1336;
    t1338 = -0.27*t1337;
    t1339 = t1331 + t1334 + t1338;
    t1340 = var2[6]*t1339;
    t1322 = t216*t223*t279;
    t1351 = t238*t223*t279;
    t1352 = t1317 + t1351;
    t1257 = -1.*t376*t321;
    t1261 = -1.*t1260*t288;
    t1262 = t1257 + t1261;
    t1263 = t166*t1262;
    t1264 = t321*t1260;
    t1265 = -1.*t376*t288;
    t1266 = t1264 + t1265;
    t1267 = -1.*t1266*t322;
    t1268 = t1263 + t1267;
    t1316 = 0.0875*t238*t223;
    t1320 = -0.25*t321*t1319;
    t1321 = -1.*t238*t582*t223;
    t1323 = t1321 + t1322;
    t1324 = -0.037*t1323;
    t1325 = t321*t557*t1319;
    t1326 = -1.*t1319*t288*t322;
    t1327 = t1325 + t1326;
    t1328 = -0.27*t1327;
    t1329 = t1316 + t1320 + t1324 + t1328;
    t1353 = -0.25*t321*t1352;
    t1354 = t1258 + t1322;
    t1355 = -0.037*t1354;
    t1356 = t321*t557*t1352;
    t1357 = -1.*t1352*t288*t322;
    t1358 = t1356 + t1357;
    t1359 = -0.27*t1358;
    t1360 = t1353 + t1355 + t1359;
    t1302 = 0.0875*t376*t216;
    t1307 = -1.*t376*t582*t216;
    t1308 = t1307 + t1251;
    t1309 = -0.037*t1308;
    t1378 = t321*t1305;
    t1379 = t223*t288;
    t1380 = t1378 + t1379;
    t1273 = -1.*t321*t1272;
    t1276 = -1.*t1275*t288;
    t1277 = t1273 + t1276;
    t1278 = t166*t1277;
    t1281 = t1279 + t1280;
    t1282 = -1.*t1281*t322;
    t1283 = t1278 + t1282;
    t1296 = 0.25*t1246*t288;
    t1297 = -1.*t557*t1246*t288;
    t1298 = t1297 + t1248;
    t1299 = -0.27*t1298;
    t1300 = t1296 + t1299;
    t1344 = 0.25*t1252*t288;
    t1345 = -1.*t557*t1252*t288;
    t1346 = t1345 + t1254;
    t1347 = -0.27*t1346;
    t1348 = t1344 + t1347;
    t1367 = -0.25*t1262;
    t1368 = t557*t1262;
    t1369 = -1.*t321*t1260;
    t1370 = t376*t288;
    t1371 = t1369 + t1370;
    t1372 = t1371*t322;
    t1373 = t1368 + t1372;
    t1374 = -0.27*t1373;
    t1375 = t1367 + t1374;
    p_output1[0]=var2[3]*((t599 - 0.25*t321*t612 - 0.27*(-1.*t288*t322*t612 + t321*t557*t612) + t617)*var2[3] + t595*var2[4] + t658*var2[5] + t673*var2[6] + t571*var2[7] - 0.27*t335*var2[8]) + var2[6]*(t673*var2[3] + t702*var2[4] + t748*var2[5] + (-0.037*t360 - 0.25*t321*t710 - 0.27*(-1.*t288*t322*t710 + t321*t557*t710))*var2[6] + t685*var2[7] - 0.27*t367*var2[8]) + var2[4]*(t595*var2[3] + (0.0875*t207*t216*t223 - 0.037*(-1.*t207*t223*t238*t279 - 1.*t207*t216*t223*t582) + t770 - 0.25*t791 - 0.27*(t557*t791 + t322*(-1.*t288*t783 + t794)))*var2[4] + t829*var2[5] + t702*var2[6] + t765*var2[7] - 0.27*t421*var2[8]) + var2[5]*(t658*var2[3] + t829*var2[4] + (t599 + t617 + t770 - 0.25*t899 - 0.27*(t322*(-1.*t288*t612 + t794) + t557*t899))*var2[5] + t748*var2[6] + t856*var2[7] - 0.27*t484*var2[8]) + var2[8]*(-0.27*t335*var2[3] - 0.27*t421*var2[4] - 0.27*t484*var2[5] - 0.27*t367*var2[6] - 0.27*t534*var2[7] - 0.27*(-1.*t166*(0. + t321*t498 + t288*t518) - 1.*t322*(0. + t524 + t526))*var2[8]) + var2[7]*(t571*var2[3] + t765*var2[4] + t856*var2[5] + t685*var2[6] + (-0.25*t522 - 0.27*(t322*(t288*t498 - 1.*t321*t518) + t522*t557))*var2[7] - 0.27*t534*var2[8]);
    p_output1[1]=var2[7]*(t1025*var2[3] + t1160*var2[4] + t1214*var2[5] + t1098*var2[6] + (-0.25*t996 - 0.27*(t322*(t288*t985 - 1.*t321*t991) + t557*t996))*var2[7] - 0.27*t1002*var2[8]) + var2[3]*((t1055 + t1060 - 0.25*t321*t469 - 0.27*(-1.*t288*t322*t469 + t321*t469*t557))*var2[3] + t1041*var2[4] + t1053*var2[5] + t1086*var2[6] + t1025*var2[7] - 0.27*t934*var2[8]) + var2[6]*(t1086*var2[3] + t1111*var2[4] + t1125*var2[5] + (-0.25*t1129*t321 - 0.27*(-1.*t1129*t288*t322 + t1129*t321*t557) - 0.037*t940)*var2[6] + t1098*var2[7] - 0.27*t945*var2[8]) + var2[5]*(t1053*var2[3] + t1178*var2[4] + (t1055 + t1060 + t1180 - 0.25*t482 - 0.27*(t322*t477 + t482*t557))*var2[5] + t1125*var2[6] + t1214*var2[7] - 0.27*t960*var2[8]) + var2[4]*(t1041*var2[3] + (t1180 - 0.25*t1191 + 0.0875*t216*t223*t256 - 0.27*(t322*(-1.*t1189*t288 + t433) + t1191*t557) - 0.037*(-1.*t223*t238*t256*t279 - 1.*t216*t223*t256*t582))*var2[4] + t1178*var2[5] + t1111*var2[6] + t1160*var2[7] - 0.27*t981*var2[8]) + var2[8]*(-0.27*t934*var2[3] - 0.27*t981*var2[4] - 0.27*t960*var2[5] - 0.27*t945*var2[6] - 0.27*t1002*var2[7] - 0.27*(-1.*t166*(0. + t321*t985 + t288*t991) - 1.*t322*(0. + t998 + t999))*var2[8]);
    p_output1[2]=var2[3]*(t1340 + (t1302 + t1309 - 0.25*t1305*t321 - 0.27*(-1.*t1305*t288*t322 + t1305*t321*t557))*var2[3] + t1329*var2[4] + t1300*var2[7] - 0.27*t1249*var2[8]) + var2[6]*(t1340 + t1339*var2[3] + t1360*var2[4] + t1348*var2[7] - 0.27*t1255*var2[8]) + var2[4]*(t1329*var2[3] + (t1302 + t1309 - 0.25*t1380 + 0.21935*t223 - 0.27*((-1.*t1305*t288 + t223*t321)*t322 + t1380*t557))*var2[4] + t1360*var2[6] + t1375*var2[7] - 0.27*t1268*var2[8]) + var2[7]*(t1300*var2[3] + t1375*var2[4] + t1348*var2[6] + (-0.25*t1277 - 0.27*((t1272*t288 - 1.*t1275*t321)*t322 + t1277*t557))*var2[7] - 0.27*t1283*var2[8]) + var2[8]*(-0.27*t1249*var2[3] - 0.27*t1268*var2[4] - 0.27*t1255*var2[6] - 0.27*t1283*var2[7] - 0.27*(-1.*t166*(0. + t1275*t288 + t1272*t321) - 1.*(0. + t1279 + t1280)*t322)*var2[8]);

    return p_output1


def RL_djdq(q,dq):
    var1=q
    var2=dq
    p_output1=np.zeros(3)

    t257 = np.cos(var1[3]);
    t267 = np.cos(var1[4]);
    t270 = np.cos(var1[5]);
    t371 = np.cos(var1[15]);
    t335 = np.sin(var1[15]);
    t382 = np.sin(var1[3]);
    t284 = np.cos(var1[16]);
    t344 = -1.*t335;
    t345 = 0. + t344;
    t367 = t257*t267*t270*t345;
    t384 = -1.*t371*t267*t270*t382;
    t413 = t367 + t384;
    t426 = -1.*t267*t270*t335*t382;
    t460 = np.cos(var1[17]);
    t477 = 0. + t460;
    t524 = -1.*t257*t267*t270*t335;
    t534 = t524 + t384;
    t480 = np.sin(var1[16]);
    t484 = np.sin(var1[17]);
    t537 = t371*t257*t267*t270;
    t553 = t267*t270*t345*t382;
    t554 = t537 + t553;
    t559 = np.sin(var1[4]);
    t556 = -1.*t480*t554;
    t560 = -1.*t284*t270*t559;
    t571 = t556 + t560;
    t416 = 0. + t371;
    t622 = -1.*t267*t270*t480;
    t627 = -1.*t371*t257*t270*t559;
    t628 = -1.*t270*t345*t382*t559;
    t629 = t627 + t628;
    t630 = t284*t629;
    t631 = t622 + t630;
    t657 = np.sin(var1[5]);
    t671 = t480*t559*t657;
    t672 = -1.*t371*t257*t267*t657;
    t673 = -1.*t267*t345*t382*t657;
    t674 = t672 + t673;
    t676 = t284*t674;
    t678 = t671 + t676;
    t535 = -0.25*t284*t534;
    t541 = t537 + t426;
    t542 = 0.037*t541;
    t545 = t284*t477*t534;
    t546 = -1.*t480*t484*t534;
    t548 = t545 + t546;
    t550 = -0.27*t548;
    t551 = t535 + t542 + t550;
    t704 = t270*t382*t559;
    t709 = -1.*t257*t657;
    t711 = t704 + t709;
    t712 = -1.*t371*t711;
    t713 = t257*t270*t559;
    t718 = t382*t657;
    t719 = t713 + t718;
    t720 = -1.*t335*t719;
    t722 = t712 + t720;
    t740 = t335*t711;
    t744 = -1.*t371*t719;
    t746 = t740 + t744;
    t755 = -1.*t270*t382*t559;
    t757 = t257*t657;
    t759 = t755 + t757;
    t760 = -1.*t335*t759;
    t762 = t760 + t744;
    t728 = -1.*t284*t484*t722;
    t798 = t270*t382;
    t799 = -1.*t257*t559*t657;
    t801 = t798 + t799;
    t803 = -1.*t257*t270;
    t804 = -1.*t382*t559*t657;
    t808 = t803 + t804;
    t802 = -1.*t335*t801;
    t809 = -1.*t371*t808;
    t814 = t802 + t809;
    t573 = t460*t571;
    t575 = t284*t554;
    t577 = -1.*t270*t480*t559;
    t581 = t575 + t577;
    t583 = -1.*t484*t581;
    t585 = t573 + t583;
    t764 = t371*t759;
    t838 = t345*t719;
    t839 = t764 + t838;
    t727 = -1.*t460*t480*t722;
    t734 = t727 + t728;
    t853 = t267*t270;
    t854 = 0. + t853;
    t856 = t345*t711;
    t861 = t371*t719;
    t862 = 0. + t856 + t861;
    t870 = t284*t854;
    t871 = -1.*t480*t862;
    t816 = t371*t801;
    t904 = t345*t808;
    t905 = t816 + t904;
    t271 = 0.0875*t257*t267*t270;
    t414 = -0.25*t284*t413;
    t421 = t416*t257*t267*t270;
    t436 = t421 + t426;
    t450 = 0.037*t436;
    t478 = t284*t477*t413;
    t486 = -1.*t480*t484*t413;
    t487 = t478 + t486;
    t491 = -0.27*t487;
    t517 = t271 + t414 + t450 + t491;
    t840 = -1.*t460*t480*t839;
    t841 = -1.*t284*t484*t839;
    t843 = t840 + t841;
    t946 = -1.*t257*t270*t559;
    t947 = -1.*t382*t657;
    t953 = t946 + t947;
    t945 = t345*t759;
    t954 = t371*t953;
    t955 = t945 + t954;
    t763 = -0.25*t284*t762;
    t765 = t764 + t720;
    t769 = 0.037*t765;
    t770 = t284*t477*t762;
    t773 = -1.*t480*t484*t762;
    t774 = t770 + t773;
    t775 = -0.27*t774;
    t777 = t763 + t769 + t775;
    t1012 = t257*t270;
    t1013 = t382*t559*t657;
    t1014 = t1012 + t1013;
    t1011 = t345*t801;
    t1015 = t371*t1014;
    t1016 = t1011 + t1015;
    t658 = -0.0875*t267*t382*t657;
    t659 = -0.21935*t559*t657;
    t664 = -1.*t257*t267*t335*t657;
    t666 = -1.*t416*t267*t382*t657;
    t667 = t664 + t666;
    t668 = 0.037*t667;
    t679 = -0.25*t678;
    t680 = t477*t678;
    t682 = t284*t559*t657;
    t683 = -1.*t480*t674;
    t685 = t682 + t683;
    t687 = t484*t685;
    t692 = t680 + t687;
    t694 = -0.27*t692;
    t695 = t658 + t659 + t668 + t679 + t694;
    t815 = -0.25*t284*t814;
    t817 = -1.*t335*t808;
    t818 = t816 + t817;
    t819 = 0.037*t818;
    t821 = t284*t477*t814;
    t822 = -1.*t480*t484*t814;
    t823 = t821 + t822;
    t825 = -0.27*t823;
    t829 = t815 + t819 + t825;
    t903 = -1.*t267*t480*t657;
    t906 = t284*t905;
    t907 = t903 + t906;
    t908 = -1.*t484*t907;
    t911 = -1.*t284*t267*t657;
    t912 = -1.*t480*t905;
    t914 = t911 + t912;
    t915 = t460*t914;
    t918 = t908 + t915;
    t1009 = 0.0875*t801;
    t1017 = -0.25*t284*t1016;
    t1018 = t416*t801;
    t1019 = t335*t1014;
    t1020 = t1018 + t1019;
    t1023 = 0.037*t1020;
    t1024 = t284*t477*t1016;
    t1025 = -1.*t480*t484*t1016;
    t1026 = t1024 + t1025;
    t1027 = -0.27*t1026;
    t1030 = t1009 + t1017 + t1023 + t1027;
    t614 = 0.21935*t267*t270;
    t935 = 0.0875*t759;
    t960 = t416*t759;
    t961 = t335*t953;
    t963 = t960 + t961;
    t964 = 0.037*t963;
    t1041 = t284*t955;
    t1042 = t622 + t1041;
    t638 = -1.*t284*t267*t270;
    t587 = -0.25*t571;
    t593 = t477*t571;
    t594 = -1.*t284*t554;
    t595 = t270*t480*t559;
    t598 = t594 + t595;
    t599 = t484*t598;
    t609 = t593 + t599;
    t610 = -0.27*t609;
    t611 = t587 + t610;
    t855 = -1.*t854*t480;
    t863 = -1.*t284*t862;
    t865 = t855 + t863;
    t868 = t460*t865;
    t872 = t870 + t871;
    t873 = -1.*t484*t872;
    t874 = t868 + t873;
    t988 = 0.25*t480*t839;
    t997 = -1.*t477*t480*t839;
    t998 = t997 + t841;
    t1002 = -0.27*t998;
    t1003 = t988 + t1002;
    t786 = 0.25*t480*t722;
    t792 = -1.*t477*t480*t722;
    t793 = t792 + t728;
    t795 = -0.27*t793;
    t796 = t786 + t795;
    t1053 = -0.25*t914;
    t1054 = t267*t480*t657;
    t1055 = -1.*t284*t905;
    t1056 = t1054 + t1055;
    t1057 = t484*t1056;
    t1058 = t477*t914;
    t1059 = t1057 + t1058;
    t1060 = -0.27*t1059;
    t1061 = t1053 + t1060;
    t1102 = t257*t267*t345*t657;
    t1104 = -1.*t371*t267*t382*t657;
    t1106 = t1102 + t1104;
    t1126 = -1.*t270*t382;
    t1127 = t257*t559*t657;
    t1128 = t1126 + t1127;
    t1130 = t345*t1128;
    t1132 = t371*t808;
    t1134 = t1130 + t1132;
    t1136 = -1.*t284*t484*t1134;
    t1192 = -1.*t371*t1128;
    t1193 = t1192 + t817;
    t1205 = t371*t257*t267*t657;
    t1206 = t267*t345*t382*t657;
    t1207 = t1205 + t1206;
    t1135 = -1.*t460*t480*t1134;
    t1138 = t1135 + t1136;
    t1184 = -1.*t335*t1128;
    t1219 = -1.*t371*t1014;
    t1220 = t1184 + t1219;
    t1226 = t856 + t861;
    t1236 = t267*t657;
    t1237 = 0. + t1236;
    t1239 = t371*t1128;
    t1240 = t345*t1014;
    t1241 = 0. + t1239 + t1240;
    t1249 = t284*t1237;
    t1250 = -1.*t480*t1241;
    t1111 = -1.*t267*t335*t382*t657;
    t1283 = t664 + t1104;
    t1221 = -1.*t460*t480*t1220;
    t1222 = -1.*t284*t484*t1220;
    t1223 = t1221 + t1222;
    t1185 = t1184 + t1132;
    t1190 = 0.037*t1185;
    t1194 = -0.25*t284*t1193;
    t1195 = t284*t477*t1193;
    t1196 = -1.*t480*t484*t1193;
    t1197 = t1195 + t1196;
    t1198 = -0.27*t1197;
    t1199 = t1190 + t1194 + t1198;
    t1317 = t1192 + t1019;
    t1101 = 0.0875*t257*t267*t657;
    t1109 = -0.25*t284*t1106;
    t1110 = t416*t257*t267*t657;
    t1113 = t1110 + t1111;
    t1115 = 0.037*t1113;
    t1116 = t284*t477*t1106;
    t1117 = -1.*t480*t484*t1106;
    t1118 = t1116 + t1117;
    t1122 = -0.27*t1118;
    t1123 = t1101 + t1109 + t1115 + t1122;
    t1284 = -0.25*t284*t1283;
    t1285 = t1205 + t1111;
    t1286 = 0.037*t1285;
    t1287 = t284*t477*t1283;
    t1288 = -1.*t480*t484*t1283;
    t1289 = t1287 + t1288;
    t1290 = -0.27*t1289;
    t1291 = t1284 + t1286 + t1290;
    t1204 = -1.*t480*t559*t657;
    t1208 = t284*t1207;
    t1210 = t1204 + t1208;
    t1211 = -1.*t484*t1210;
    t1212 = -1.*t284*t559*t657;
    t1213 = -1.*t480*t1207;
    t1214 = t1212 + t1213;
    t1215 = t460*t1214;
    t1216 = t1211 + t1215;
    t1367 = -1.*t371*t257*t559*t657;
    t1368 = -1.*t345*t382*t559*t657;
    t1370 = t1367 + t1368;
    t1371 = t284*t1370;
    t1372 = t903 + t1371;
    t1331 = 0.0875*t267*t270*t382;
    t1332 = t257*t267*t270*t335;
    t1334 = t416*t267*t270*t382;
    t1335 = t1332 + t1334;
    t1337 = 0.037*t1335;
    t1338 = 0.21935*t270*t559;
    t1339 = -0.25*t581;
    t1340 = t484*t571;
    t1341 = t477*t581;
    t1342 = t1340 + t1341;
    t1343 = -0.27*t1342;
    t1344 = t1331 + t1337 + t1338 + t1339 + t1343;
    t1225 = t267*t270*t480;
    t1227 = t284*t1226;
    t1228 = t1225 + t1227;
    t1229 = -1.*t484*t1228;
    t1230 = t284*t267*t270;
    t1231 = -1.*t480*t1226;
    t1232 = t1230 + t1231;
    t1233 = t460*t1232;
    t1234 = t1229 + t1233;
    t1140 = 0.0875*t719;
    t1141 = t335*t759;
    t1142 = t416*t719;
    t1143 = t1141 + t1142;
    t1144 = 0.037*t1143;
    t1145 = -0.25*t284*t839;
    t1146 = t284*t477*t839;
    t1150 = -1.*t480*t484*t839;
    t1152 = t1146 + t1150;
    t1158 = -0.27*t1152;
    t1159 = t1140 + t1144 + t1145 + t1158;
    t1294 = -1.*t335*t711;
    t1295 = t1294 + t861;
    t1296 = 0.037*t1295;
    t1298 = -0.25*t284*t722;
    t1299 = t284*t477*t722;
    t1300 = -1.*t480*t484*t722;
    t1301 = t1299 + t1300;
    t1302 = -0.27*t1301;
    t1306 = t1296 + t1298 + t1302;
    t1361 = 0.21935*t267*t657;
    t1167 = 0.0875*t808;
    t1168 = t335*t801;
    t1169 = t416*t808;
    t1172 = t1168 + t1169;
    t1175 = 0.037*t1172;
    t1350 = -0.25*t1214;
    t1351 = -1.*t284*t1207;
    t1353 = t671 + t1351;
    t1354 = t484*t1353;
    t1355 = t477*t1214;
    t1356 = t1354 + t1355;
    t1358 = -0.27*t1356;
    t1359 = t1350 + t1358;
    t1161 = 0.25*t480*t1134;
    t1162 = -1.*t477*t480*t1134;
    t1163 = t1162 + t1136;
    t1164 = -0.27*t1163;
    t1165 = t1161 + t1164;
    t1310 = 0.25*t480*t1220;
    t1311 = -1.*t477*t480*t1220;
    t1312 = t1311 + t1222;
    t1313 = -0.27*t1312;
    t1314 = t1310 + t1313;
    t1238 = -1.*t480*t1237;
    t1242 = -1.*t284*t1241;
    t1243 = t1238 + t1242;
    t1245 = t460*t1243;
    t1255 = t1249 + t1250;
    t1256 = -1.*t484*t1255;
    t1257 = t1245 + t1256;
    t1389 = -0.25*t1232;
    t1390 = -1.*t284*t1226;
    t1391 = t622 + t1390;
    t1392 = t484*t1391;
    t1393 = t477*t1232;
    t1394 = t1392 + t1393;
    t1395 = -0.27*t1394;
    t1396 = t1389 + t1395;
    t1425 = t257*t267*t345;
    t1426 = -1.*t371*t267*t382;
    t1427 = t1425 + t1426;
    t1429 = -1.*t284*t484*t1427;
    t1443 = -1.*t371*t257*t267;
    t1444 = -1.*t267*t345*t382;
    t1445 = t1443 + t1444;
    t1439 = -1.*t257*t267*t335;
    t1455 = t267*t335*t382;
    t1456 = t1443 + t1455;
    t1465 = -1.*t257*t345*t559;
    t1466 = t371*t382*t559;
    t1467 = t1465 + t1466;
    t1453 = t1439 + t1426;
    t1482 = -1.*t284*t484*t1453;
    t1454 = 0.037*t1453;
    t1457 = -0.25*t284*t1456;
    t1458 = t284*t477*t1456;
    t1459 = -1.*t480*t484*t1456;
    t1460 = t1458 + t1459;
    t1461 = -0.27*t1460;
    t1462 = t1454 + t1457 + t1461;
    t1463 = var2[15]*t1462;
    t1470 = t335*t382*t559;
    t1492 = t257*t335*t559;
    t1493 = t1492 + t1466;
    t1428 = -1.*t460*t480*t1427;
    t1430 = t1428 + t1429;
    t1481 = -1.*t460*t480*t1453;
    t1483 = t1481 + t1482;
    t1508 = t371*t257*t267;
    t1509 = t267*t345*t382;
    t1510 = 0. + t1508 + t1509;
    t1512 = -1.*t559;
    t1513 = 0. + t1512;
    t1511 = -1.*t480*t1510;
    t1514 = t284*t1513;
    t1495 = -1.*t371*t257*t559;
    t1532 = -1.*t345*t382*t559;
    t1533 = t1495 + t1532;
    t1438 = -0.0875*t267*t382;
    t1440 = -1.*t416*t267*t382;
    t1441 = t1439 + t1440;
    t1442 = 0.037*t1441;
    t1546 = t284*t1445;
    t1547 = t480*t559;
    t1548 = t1546 + t1547;
    t1464 = -0.0875*t257*t559;
    t1468 = -0.25*t284*t1467;
    t1469 = -1.*t416*t257*t559;
    t1471 = t1469 + t1470;
    t1472 = 0.037*t1471;
    t1473 = t284*t477*t1467;
    t1474 = -1.*t480*t484*t1467;
    t1475 = t1473 + t1474;
    t1476 = -0.27*t1475;
    t1477 = t1464 + t1468 + t1472 + t1476;
    t1494 = -0.25*t284*t1493;
    t1496 = t1495 + t1470;
    t1497 = 0.037*t1496;
    t1498 = t284*t477*t1493;
    t1499 = -1.*t480*t484*t1493;
    t1500 = t1498 + t1499;
    t1501 = -0.27*t1500;
    t1502 = t1494 + t1497 + t1501;
    t1531 = -1.*t267*t480;
    t1534 = t284*t1533;
    t1535 = t1531 + t1534;
    t1536 = -1.*t484*t1535;
    t1537 = -1.*t284*t267;
    t1538 = -1.*t480*t1533;
    t1539 = t1537 + t1538;
    t1540 = t460*t1539;
    t1541 = t1536 + t1540;
    t1432 = 0.25*t480*t1427;
    t1433 = -1.*t477*t480*t1427;
    t1434 = t1433 + t1429;
    t1435 = -0.27*t1434;
    t1436 = t1432 + t1435;
    t1485 = 0.25*t480*t1453;
    t1486 = -1.*t477*t480*t1453;
    t1487 = t1486 + t1482;
    t1488 = -0.27*t1487;
    t1489 = t1485 + t1488;
    t1517 = -1.*t284*t1510;
    t1518 = -1.*t480*t1513;
    t1519 = t1517 + t1518;
    t1515 = t1511 + t1514;
    t1516 = -1.*t484*t1515;
    t1520 = t460*t1519;
    t1521 = t1516 + t1520;
    t1562 = -0.25*t1539;
    t1563 = t267*t480;
    t1564 = -1.*t284*t1533;
    t1565 = t1563 + t1564;
    t1566 = t484*t1565;
    t1567 = t477*t1539;
    t1568 = t1566 + t1567;
    t1569 = -0.27*t1568;
    t1570 = t1562 + t1569;
    p_output1[0]=var2[4]*(t517*var2[3] + (-0.0875*t270*t382*t559 + 0.037*(-1.*t257*t270*t335*t559 - 1.*t270*t382*t416*t559) + t614 - 0.25*t631 - 0.27*(t477*t631 + t484*(-1.*t480*t629 + t638)))*var2[4] + t695*var2[5] + t551*var2[15] + t611*var2[16] - 0.27*t585*var2[17]) + var2[15]*(t777*var2[3] + t551*var2[4] + t829*var2[5] + (0.037*t722 - 0.25*t284*t746 - 0.27*(t284*t477*t746 - 1.*t480*t484*t746))*var2[15] + t796*var2[16] - 0.27*t734*var2[17]) + var2[3]*((t935 - 0.25*t284*t955 - 0.27*(t284*t477*t955 - 1.*t480*t484*t955) + t964)*var2[3] + t517*var2[4] + t1030*var2[5] + t777*var2[15] + t1003*var2[16] - 0.27*t843*var2[17]) + var2[17]*(-0.27*t843*var2[3] - 0.27*t585*var2[4] - 0.27*t918*var2[5] - 0.27*t734*var2[15] - 0.27*t874*var2[16] - 0.27*(-1.*t460*(0. + t480*t854 + t284*t862) - 1.*t484*(0. + t870 + t871))*var2[17]) + var2[16]*(t1003*var2[3] + t611*var2[4] + t1061*var2[5] + t796*var2[15] + (-0.25*t865 - 0.27*(t484*(-1.*t284*t854 + t480*t862) + t477*t865))*var2[16] - 0.27*t874*var2[17]) + var2[5]*(t1030*var2[3] + t695*var2[4] + (-0.25*t1042 + t614 + t935 - 0.27*(t1042*t477 + t484*(t638 - 1.*t480*t955)) + t964)*var2[5] + t829*var2[15] + t1061*var2[16] - 0.27*t918*var2[17]);
    p_output1[1]=var2[3]*((t1167 + t1175 - 0.25*t284*t905 - 0.27*(t284*t477*t905 - 1.*t480*t484*t905))*var2[3] + t1123*var2[4] + t1159*var2[5] + t1199*var2[15] + t1165*var2[16] - 0.27*t1138*var2[17]) + var2[4]*(t1123*var2[3] + (t1361 - 0.25*t1372 - 0.0875*t382*t559*t657 + 0.037*(-1.*t257*t335*t559*t657 - 1.*t382*t416*t559*t657) - 0.27*(t1372*t477 + t484*(-1.*t1370*t480 + t911)))*var2[4] + t1344*var2[5] + t1291*var2[15] + t1359*var2[16] - 0.27*t1216*var2[17]) + var2[15]*(t1199*var2[3] + t1291*var2[4] + t1306*var2[5] + (0.037*t1220 - 0.25*t1317*t284 - 0.27*(t1317*t284*t477 - 1.*t1317*t480*t484))*var2[15] + t1314*var2[16] - 0.27*t1223*var2[17]) + var2[5]*(t1159*var2[3] + t1344*var2[4] + (t1167 + t1175 + t1361 - 0.25*t907 - 0.27*(t477*t907 + t484*t914))*var2[5] + t1306*var2[15] + t1396*var2[16] - 0.27*t1234*var2[17]) + var2[16]*(t1165*var2[3] + t1359*var2[4] + t1396*var2[5] + t1314*var2[15] + (-0.25*t1243 - 0.27*(t1243*t477 + (-1.*t1237*t284 + t1241*t480)*t484))*var2[16] - 0.27*t1257*var2[17]) + var2[17]*(-0.27*t1138*var2[3] - 0.27*t1216*var2[4] - 0.27*t1234*var2[5] - 0.27*t1223*var2[15] - 0.27*t1257*var2[16] - 0.27*(-1.*t460*(0. + t1241*t284 + t1237*t480) - 1.*(0. + t1249 + t1250)*t484)*var2[17]);
    p_output1[2]=var2[3]*(t1463 + (t1438 + t1442 - 0.25*t1445*t284 - 0.27*(t1445*t284*t477 - 1.*t1445*t480*t484))*var2[3] + t1477*var2[4] + t1436*var2[16] - 0.27*t1430*var2[17]) + var2[15]*(t1463 + t1462*var2[3] + t1502*var2[4] + t1489*var2[16] - 0.27*t1483*var2[17]) + var2[16]*(t1436*var2[3] + t1570*var2[4] + t1489*var2[15] + (-0.25*t1519 - 0.27*(t1519*t477 + (-1.*t1513*t284 + t1510*t480)*t484))*var2[16] - 0.27*t1521*var2[17]) + var2[4]*(t1477*var2[3] + (t1438 + t1442 - 0.25*t1548 - 0.21935*t559 - 0.27*(t1548*t477 + t484*(-1.*t1445*t480 + t284*t559)))*var2[4] + t1502*var2[15] + t1570*var2[16] - 0.27*t1541*var2[17]) + var2[17]*(-0.27*t1430*var2[3] - 0.27*t1541*var2[4] - 0.27*t1483*var2[15] - 0.27*t1521*var2[16] - 0.27*(-1.*t460*(0. + t1510*t284 + t1513*t480) - 1.*(0. + t1511 + t1514)*t484)*var2[17]);

    return p_output1


def swing_foot_djdq(q,dq, sf_index):

    jj1_FR=np.array(eng.jj_1_func(q,dq)).reshape(3)
    jj2_FL=np.array(eng.jj_2_func(q,dq)).reshape(3)
    jj3_RR=np.array(eng.jj_3_func(q,dq)).reshape(3)
    jj4_RL=np.array(eng.jj_4_func(q,dq)).reshape(3)

    if sf_index ==1:
        sf_djdq =np.concatenate((jj2_FL, jj3_RR), axis=None)
    elif sf_index ==2:
        sf_djdq =np.concatenate((jj1_FR, jj4_RL), axis=None)
    return sf_djdq


def orientation_error (Rd_b,Rc_b): #desired (Rd_b) and current (Rc_b) rotation matrices
    R = Rd_b@Rc_b.T
    ux = R - R.T # A 3x3 skew symmetric matrix[[0,-z,y],[z,0,-x],[-y,x,0]]
    u = np.array([ux[2,1],ux[0,2],ux[1,0]])
    phi = np.arccos((np.trace(R)-1)/2.0)
    if (LA.norm(phi) > 0.001):
        v = u/(2*np.sin(phi))
        or_error = v*phi #Log map on SO(3) to calculate orientation error
    else:
        or_error = np.zeros(3)
    return or_error
def InertiaMatrixFloatingBase(q):
    M_Inertia=np.array(eng.Mmat_go1_description(q))
    return M_Inertia
def Grav_FloatingBase(q,dq):
    Grav = -np.array(eng.Ge_vec_go1_description(q,dq)).reshape(18)
    return Grav
def GravCoriolisFloatingBase(q,dq):
    CorGrav = np.array(eng.compute_drift(q,dq)).reshape(18) #c(q,dq)*dq +G
    return CorGrav

def op_sp_inertia_swing_leg(M,J_sw):
    #J_sw =6x18
    M_sw_os = np.linalg.pinv(J_sw@(np.linalg.pinv(M))@(J_sw.T))
    return M_sw_os



def sw_foot_g_os(G,M,M_sw_os,J_sw):
    G_sw_os = M_sw_os @ J_sw @ np.linalg.pinv(M)@G

    return G_sw_os

def Joint_limits(q):
    jl_torque=np.zeros(12)
    jl_torque[0]= (q[6]+0.054)/((q[6]+0.20)*(q[6]-0.05))
    jl_torque[1]= (q[7]-0.61)/((q[7]-0.95)*(q[7]-0.30))
    jl_torque[2]= (q[8]+1.25)/((q[8]+1.25)*(q[8]+1.65))

    jl_torque[3]= (q[9]-0.052)/((q[9]-0.20)*(q[9]+0.05))
    jl_torque[4]= (q[10]-0.61)/((q[10]-1.0)*(q[10]-0.40))
    jl_torque[5]= (q[11]+1.25)/((q[11]+1.0)*(q[11]+1.65))

    jl_torque[6]= (q[12]+0.054)/((q[12]+0.20)*(q[12]-0.05))
    jl_torque[7]= (q[13]-0.68)/((q[13]-1.05)*(q[13]-0.40))
    jl_torque[8]= (q[14]+1.23)/((q[14]+1.0)*(q[14]+1.65))

    jl_torque[9]= (q[15]-0.054)/((q[15]-0.20)*(q[15]+0.05))
    jl_torque[10]= (q[16]-0.70)/((q[16]-0.95)*(q[16]-0.40))
    jl_torque[11]= (q[17]+1.25)/((q[17]+1.05)*(q[17]+1.65))
    return jl_torque
