/*
 * Automatically Generated from Mathematica.
 * Tue 7 Mar 2023 21:28:54 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t164;
  double t131;
  double t160;
  double t171;
  double t163;
  double t190;
  double t195;
  double t119;
  double t210;
  double t233;
  double t234;
  double t281;
  double t353;
  double t360;
  double t393;
  double t295;
  double t475;
  double t492;
  double t222;
  double t243;
  double t244;
  double t251;
  double t279;
  double t301;
  double t302;
  double t312;
  double t322;
  double t497;
  double t522;
  double t523;
  double t526;
  double t555;
  double t560;
  double t563;
  double t582;
  double t666;
  double t670;
  double t637;
  double t643;
  double t644;
  double t712;
  double t715;
  double t736;
  double t400;
  double t404;
  double t405;
  double t414;
  double t421;
  double t427;
  double t801;
  double t818;
  double t819;
  double t938;
  double t968;
  double t985;
  double t993;
  double t870;
  double t873;
  double t885;
  double t889;
  double t898;
  double t903;
  double t1076;
  double t1087;
  double t1088;
  double t1048;
  double t1052;
  double t1065;
  double t799;
  double t820;
  double t825;
  double t833;
  double t839;
  double t846;
  double t910;
  double t1270;
  double t1287;
  double t1292;
  double t1322;
  double t1333;
  double t1343;
  double t1356;
  double t1365;
  double t1366;
  double t1025;
  double t1068;
  double t1074;
  double t1122;
  double t1437;
  double t1453;
  double t1128;
  double t1165;
  double t1170;
  double t1172;
  double t1422;
  double t1432;
  double t1394;
  double t1397;
  double t1513;
  double t1521;
  double t1524;
  double t1537;
  double t1554;
  double t1556;
  double t1824;
  double t1836;
  double t1837;
  double t1849;
  double t1856;
  double t1868;
  double t1876;
  double t1878;
  double t1895;
  double t1912;
  double t1913;
  double t2103;
  double t2109;
  double t2110;
  double t1929;
  double t1931;
  double t1934;
  double t1967;
  double t1974;
  double t1980;
  double t2010;
  double t2011;
  double t2014;
  double t2027;
  double t2031;
  double t2056;
  double t2187;
  double t2205;
  double t2214;
  double t2216;
  double t2226;
  double t2227;
  double t2228;
  double t2272;
  double t2275;
  double t2277;
  double t2285;
  double t1588;
  double t2367;
  double t2371;
  double t2374;
  double t2342;
  double t2343;
  double t2344;
  double t2197;
  double t2218;
  double t2231;
  double t2242;
  double t1683;
  double t2390;
  double t2394;
  double t2412;
  double t2249;
  double t1445;
  double t2250;
  double t2252;
  double t1477;
  double t2684;
  double t2689;
  double t2693;
  double t2747;
  double t2751;
  double t2752;
  double t2732;
  double t2738;
  double t2741;
  double t2294;
  double t2799;
  double t2814;
  double t2846;
  double t2384;
  double t2409;
  double t2900;
  double t2903;
  double t2914;
  double t2926;
  double t2927;
  double t2929;
  double t2712;
  double t2768;
  double t2770;
  double t2472;
  double t2495;
  double t2504;
  double t2956;
  double t2958;
  double t2542;
  double t2569;
  double t2774;
  double t2776;
  double t2608;
  double t2622;
  double t2143;
  double t2169;
  double t2176;
  double t453;
  double t543;
  double t583;
  double t605;
  double t618;
  double t620;
  double t653;
  double t664;
  double t676;
  double t678;
  double t714;
  double t756;
  double t796;
  double t2125;
  double t2126;
  double t2136;
  double t852;
  double t1009;
  double t1011;
  double t1012;
  double t1016;
  double t1026;
  double t1035;
  double t1045;
  double t1095;
  double t1112;
  double t1113;
  double t1126;
  double t1134;
  double t1150;
  double t1152;
  double t1153;
  double t1191;
  double t1193;
  double t1198;
  double t1208;
  double t1211;
  double t1214;
  double t1242;
  double t1243;
  double t1315;
  double t1370;
  double t1376;
  double t1383;
  double t1401;
  double t1421;
  double t1460;
  double t1462;
  double t1473;
  double t1489;
  double t1491;
  double t1501;
  double t1503;
  double t1506;
  double t1507;
  double t3249;
  double t3254;
  double t3257;
  double t1525;
  double t1529;
  double t1530;
  double t1532;
  double t1570;
  double t1585;
  double t1598;
  double t1613;
  double t1638;
  double t1657;
  double t1681;
  double t1682;
  double t1685;
  double t1700;
  double t1706;
  double t1710;
  double t1715;
  double t1716;
  double t1717;
  double t1734;
  double t1739;
  double t1744;
  double t1745;
  double t1768;
  double t1774;
  double t1792;
  double t2121;
  double t2122;
  double t2139;
  double t2184;
  double t2185;
  double t1939;
  double t1983;
  double t2004;
  double t2016;
  double t2069;
  double t2075;
  double t2248;
  double t2253;
  double t2256;
  double t2260;
  double t2318;
  double t2338;
  double t2365;
  double t2386;
  double t2388;
  double t2432;
  double t2442;
  double t2446;
  double t2450;
  double t2289;
  double t2290;
  double t2296;
  double t2297;
  double t2300;
  double t2309;
  double t2458;
  double t2467;
  double t2469;
  double t2477;
  double t2481;
  double t2492;
  double t2497;
  double t2506;
  double t2507;
  double t2514;
  double t2520;
  double t2535;
  double t2538;
  double t2539;
  double t2561;
  double t2563;
  double t2564;
  double t2572;
  double t2576;
  double t2589;
  double t2607;
  double t2610;
  double t2628;
  double t2630;
  double t2641;
  double t2669;
  double t2771;
  double t2781;
  double t2784;
  double t2786;
  double t2858;
  double t2867;
  double t2868;
  double t2875;
  double t2880;
  double t2886;
  double t2894;
  double t2925;
  double t2942;
  double t2945;
  double t2953;
  double t2960;
  double t2962;
  double t2968;
  double t2974;
  double t2979;
  double t2986;
  double t2994;
  double t2995;
  double t3013;
  double t3019;
  double t3036;
  double t3038;
  double t3060;
  double t3061;
  double t3069;
  double t3073;
  double t3084;
  double t3095;
  double t3096;
  double t3098;
  double t3100;
  double t3104;
  double t3109;
  double t3113;
  double t3114;
  double t3115;
  double t3119;
  double t3129;
  double t3130;
  double t3135;
  double t3139;
  double t3142;
  double t3144;
  double t3145;
  double t3649;
  double t3657;
  double t3660;
  double t1917;
  double t1926;
  double t2006;
  double t2086;
  double t2087;
  double t3322;
  double t3326;
  double t3335;
  double t3360;
  double t3384;
  double t3955;
  double t3968;
  double t4085;
  double t4045;
  double t4056;
  double t4060;
  double t4064;
  double t4083;
  double t4089;
  double t4096;
  double t4125;
  double t4127;
  double t4143;
  double t4178;
  double t4187;
  double t4212;
  double t4226;
  double t4231;
  double t2794;
  double t2888;
  double t2983;
  double t3091;
  double t3158;
  double t3168;
  double t3909;
  double t3914;
  double t3921;
  double t3936;
  double t3945;
  double t3947;
  double t3493;
  double t3513;
  double t3519;
  double t3523;
  double t3527;
  double t3529;
  double t4159;
  double t4526;
  double t4527;
  double t4599;
  double t4412;
  double t4413;
  double t4414;
  double t4252;
  double t4258;
  double t4262;
  double t4598;
  double t4604;
  double t4609;
  double t4633;
  double t4635;
  double t4651;
  double t4653;
  double t4667;
  double t4676;
  double t4681;
  double t4692;
  double t4696;
  double t4330;
  double t4335;
  double t4337;
  double t2268;
  double t2314;
  double t2454;
  double t2531;
  double t2676;
  double t2680;
  double t3845;
  double t3849;
  double t3877;
  double t3882;
  double t3896;
  double t3897;
  double t3419;
  double t3428;
  double t3431;
  double t3454;
  double t3464;
  double t3479;
  double t4648;
  double t4405;
  double t4406;
  double t4407;
  double t4408;
  double t4409;
  double t4419;
  double t4956;
  double t4959;
  double t5097;
  double t5065;
  double t5067;
  double t5069;
  double t5072;
  double t5094;
  double t5112;
  double t5120;
  double t5133;
  double t5136;
  double t5144;
  double t5178;
  double t5179;
  double t1510;
  double t1535;
  double t1662;
  double t1733;
  double t1799;
  double t1802;
  double t3714;
  double t3716;
  double t3720;
  double t3734;
  double t3735;
  double t3745;
  double t3287;
  double t3290;
  double t3296;
  double t3301;
  double t3302;
  double t3310;
  double t5171;
  double t4728;
  double t4748;
  double t4753;
  double t4757;
  double t4758;
  double t4764;
  double t4210;
  double t4239;
  double t4240;
  double t4241;
  double t4245;
  double t4264;
  double t5417;
  double t5457;
  double t5443;
  double t5224;
  double t5225;
  double t5228;
  double t5230;
  double t5239;
  double t5264;
  double t5456;
  double t5458;
  double t5482;
  double t5484;
  double t5516;
  double t5526;
  double t5531;
  double t5539;
  double t5540;
  double t5542;
  double t1184;
  double t1195;
  double t1212;
  double t1213;
  double t1244;
  double t1248;
  double t3665;
  double t3671;
  double t3674;
  double t3677;
  double t3683;
  double t3689;
  double t3268;
  double t3272;
  double t3273;
  double t3275;
  double t3276;
  double t3277;
  double t5490;
  double t4804;
  double t4809;
  double t4810;
  double t4851;
  double t4852;
  double t4853;
  double t4292;
  double t4293;
  double t4302;
  double t4312;
  double t4321;
  double t4339;
  double t5445;
  double t5446;
  double t5447;
  double t5450;
  double t5451;
  double t5006;
  double t5037;
  double t5041;
  double t5045;
  double t5053;
  double t615;
  double t690;
  double t850;
  double t858;
  double t860;
  double t3600;
  double t3611;
  double t3623;
  double t3624;
  double t3642;
  double t3226;
  double t3227;
  double t3229;
  double t3233;
  double t3236;
  double t4561;
  double t4565;
  double t4568;
  double t4579;
  double t4582;
  double t4021;
  double t4023;
  double t4027;
  double t4030;
  double t4035;
  double t5677;
  double t5681;
  double t5683;
  double t5393;
  double t5423;
  double t4962;
  double t4972;
  double t338;
  double t435;
  double t436;
  double t3546;
  double t3575;
  double t3576;
  double t3196;
  double t3198;
  double t3205;
  double t4533;
  double t4540;
  double t3988;
  double t3991;
  t164 = Cos(var1[16]);
  t131 = Cos(var1[17]);
  t160 = Sin(var1[16]);
  t171 = Sin(var1[17]);
  t163 = -1.*t131*t160;
  t190 = -1.*t164*t171;
  t195 = t163 + t190;
  t119 = Cos(var1[15]);
  t210 = Sin(var1[4]);
  t233 = Cos(var1[4]);
  t234 = Cos(var1[5]);
  t281 = Sin(var1[15]);
  t353 = -1.*t164*t131;
  t360 = t160*t171;
  t393 = t353 + t360;
  t295 = Sin(var1[5]);
  t475 = -1.*t131;
  t492 = 1. + t475;
  t222 = t119*t195*t210;
  t243 = t164*t131;
  t244 = -1.*t160*t171;
  t251 = t243 + t244;
  t279 = t234*t251;
  t301 = t281*t195*t295;
  t302 = t279 + t301;
  t312 = t233*t302;
  t322 = t222 + t312;
  t497 = -0.1881*t492;
  t522 = -0.181814*t131;
  t523 = -0.12226899999999999*t171;
  t526 = t497 + t522 + t523;
  t555 = -0.213*t492;
  t560 = -0.335269*t131;
  t563 = -0.006286*t171;
  t582 = t555 + t560 + t563;
  t666 = -0.12226899999999999*t131;
  t670 = t666 + t563;
  t637 = -0.006286*t131;
  t643 = 0.12226899999999999*t171;
  t644 = t637 + t643;
  t712 = t131*t582;
  t715 = 0.1881*t171;
  t736 = t526*t171;
  t400 = t119*t393*t210;
  t404 = t234*t195;
  t405 = t281*t393*t295;
  t414 = t404 + t405;
  t421 = t233*t414;
  t427 = t400 + t421;
  t801 = t131*t160;
  t818 = t164*t171;
  t819 = t801 + t818;
  t938 = -0.1881*t160;
  t968 = -1.*t160*t526;
  t985 = t164*t582;
  t993 = 0. + t938 + t968 + t985;
  t870 = -1.*t164;
  t873 = 1. + t870;
  t885 = -0.1881*t873;
  t889 = t164*t526;
  t898 = t160*t582;
  t903 = 0. + t885 + t889 + t898;
  t1076 = -1.*t160*t670;
  t1087 = t164*t644;
  t1088 = t1076 + t1087;
  t1048 = t164*t670;
  t1052 = t160*t644;
  t1065 = t1048 + t1052;
  t799 = t119*t251*t210;
  t820 = t234*t819;
  t825 = t281*t251*t295;
  t833 = t820 + t825;
  t839 = t233*t833;
  t846 = t799 + t839;
  t910 = -1.*t903*t819;
  t1270 = 0.081307*t281;
  t1287 = t119*t993;
  t1292 = t1270 + t1287;
  t1322 = -1.*t119;
  t1333 = 1. + t1322;
  t1343 = 0.04675*t1333;
  t1356 = 0.128057*t119;
  t1365 = -1.*t281*t993;
  t1366 = t1343 + t1356 + t1365;
  t1025 = t903*t251;
  t1068 = -1.*t1065*t819;
  t1074 = -1.*t903*t251;
  t1122 = t903*t195;
  t1437 = Power(t119,2);
  t1453 = Power(t281,2);
  t1128 = t1065*t251;
  t1165 = t281*t210;
  t1170 = -1.*t119*t233*t295;
  t1172 = t1165 + t1170;
  t1422 = -1.*t119*t1292*t195;
  t1432 = t281*t1366*t195;
  t1394 = t119*t1292*t195;
  t1397 = -1.*t281*t1366*t195;
  t1513 = t281*t1292;
  t1521 = t119*t1366;
  t1524 = t1513 + t1521;
  t1537 = -1.*t281*t1292;
  t1554 = -1.*t119*t1366;
  t1556 = t1537 + t1554;
  t1824 = Sin(var1[3]);
  t1836 = -1.*t234*t281*t195;
  t1837 = t251*t295;
  t1849 = t1836 + t1837;
  t1856 = t1824*t1849;
  t1868 = Cos(var1[3]);
  t1876 = t119*t233*t195;
  t1878 = -1.*t210*t302;
  t1895 = t1876 + t1878;
  t1912 = t1868*t1895;
  t1913 = t1856 + t1912;
  t2103 = t1868*t1849;
  t2109 = -1.*t1824*t1895;
  t2110 = t2103 + t2109;
  t1929 = -1.*t234*t281*t251;
  t1931 = t819*t295;
  t1934 = t1929 + t1931;
  t1967 = t119*t233*t251;
  t1974 = -1.*t210*t833;
  t1980 = t1967 + t1974;
  t2010 = -1.*t234*t281*t393;
  t2011 = t195*t295;
  t2014 = t2010 + t2011;
  t2027 = t119*t233*t393;
  t2031 = -1.*t210*t414;
  t2056 = t2027 + t2031;
  t2187 = 0. + t1270 + t1287;
  t2205 = t234*t903;
  t2214 = -1.*t1366*t295;
  t2216 = 0. + t2205 + t2214;
  t2226 = t234*t1366;
  t2227 = t903*t295;
  t2228 = 0. + t2226 + t2227;
  t2272 = -1.*t281*t2187;
  t2275 = t119*t295*t2216;
  t2277 = -1.*t119*t234*t2228;
  t2285 = t2272 + t2275 + t2277;
  t1588 = t1437*t1088*t251;
  t2367 = -1.*t234*t281*t1088;
  t2371 = t1065*t295;
  t2374 = t2367 + t2371;
  t2342 = t234*t1065;
  t2343 = t281*t1088*t295;
  t2344 = t2342 + t2343;
  t2197 = t281*t2187;
  t2218 = -1.*t119*t295*t2216;
  t2231 = t119*t234*t2228;
  t2242 = t2197 + t2218 + t2231;
  t1683 = -1.*t1437*t1088*t195;
  t2390 = t119*t2187*t195;
  t2394 = t2216*t302;
  t2412 = t2228*t1849;
  t2249 = -1.*t119*t2187*t195;
  t1445 = -1.*t1437*t1088*t251;
  t2250 = -1.*t2216*t302;
  t2252 = -1.*t2228*t1849;
  t1477 = t1437*t1088*t195;
  t2684 = t2187*t210;
  t2689 = t233*t2216;
  t2693 = 0. + t2684 + t2689;
  t2747 = t233*t2187;
  t2751 = -1.*t210*t2216;
  t2752 = 0. + t2747 + t2751;
  t2732 = t233*t281;
  t2738 = t119*t210*t295;
  t2741 = t2732 + t2738;
  t2294 = t2228*t1934;
  t2799 = -1.*t1172*t2693;
  t2814 = -1.*t2741*t2752;
  t2846 = t2277 + t2799 + t2814;
  t2384 = -1.*t119*t234*t2374;
  t2409 = t2374*t1934;
  t2900 = t119*t1088*t210;
  t2903 = t233*t2344;
  t2914 = t2900 + t2903;
  t2926 = t119*t233*t1088;
  t2927 = -1.*t210*t2344;
  t2929 = t2926 + t2927;
  t2712 = t1172*t2693;
  t2768 = t2741*t2752;
  t2770 = t2231 + t2712 + t2768;
  t2472 = t119*t234*t2374;
  t2495 = -1.*t2228*t2014;
  t2504 = -1.*t2374*t1849;
  t2956 = t2693*t322;
  t2958 = t2752*t1895;
  t2542 = -1.*t2228*t1934;
  t2569 = -1.*t2374*t1934;
  t2774 = -1.*t2693*t322;
  t2776 = -1.*t2752*t1895;
  t2608 = t2228*t2014;
  t2622 = t2374*t1849;
  t2143 = t1868*t2014;
  t2169 = -1.*t1824*t2056;
  t2176 = t2143 + t2169;
  t453 = -0.1881*t131;
  t543 = -1.*t131*t526;
  t583 = t582*t171;
  t605 = 0. + t453 + t543 + t583;
  t618 = 0.1881*t131;
  t620 = t131*t526;
  t653 = t131*t644;
  t664 = -1.*t582*t171;
  t676 = t670*t171;
  t678 = t618 + t620 + t653 + t664 + t676;
  t714 = -1.*t131*t670;
  t756 = t644*t171;
  t796 = t712 + t714 + t715 + t736 + t756;
  t2125 = t1868*t1934;
  t2126 = -1.*t1824*t1980;
  t2136 = t2125 + t2126;
  t852 = 0. + t712 + t715 + t736;
  t1009 = -1.*t993*t251;
  t1011 = 0. + t910 + t1009;
  t1012 = t195*t1011;
  t1016 = t993*t195;
  t1026 = 0. + t1016 + t1025;
  t1035 = t251*t1026;
  t1045 = -1.*t993*t195;
  t1095 = -1.*t1088*t251;
  t1112 = t1045 + t1068 + t1074 + t1095;
  t1113 = t251*t1112;
  t1126 = t1088*t195;
  t1134 = t993*t393;
  t1150 = t1122 + t1126 + t1128 + t1134;
  t1152 = t819*t1150;
  t1153 = t1012 + t1035 + t1113 + t1152;
  t1191 = 0.081307*t251;
  t1193 = 0. + t1191;
  t1198 = -0.128057*t251;
  t1208 = -0.04675*t393;
  t1211 = t1198 + t1208;
  t1214 = -0.04675*t195;
  t1242 = -0.128057*t819;
  t1243 = 0. + t1214 + t1242;
  t1315 = -1.*t119*t1292*t251;
  t1370 = t281*t1366*t251;
  t1376 = t910 + t1315 + t1370;
  t1383 = t119*t393*t1376;
  t1401 = t1394 + t1397 + t1025;
  t1421 = t119*t195*t1401;
  t1460 = -1.*t1453*t1088*t251;
  t1462 = t1422 + t1432 + t1068 + t1074 + t1445 + t1460;
  t1473 = t119*t195*t1462;
  t1489 = t1453*t1088*t195;
  t1491 = t119*t1292*t393;
  t1501 = -1.*t281*t1366*t393;
  t1503 = t1122 + t1477 + t1489 + t1128 + t1491 + t1501;
  t1506 = t119*t251*t1503;
  t1507 = t1383 + t1421 + t1473 + t1506;
  t3249 = t119*t1868*t234;
  t3254 = -1.*t1824*t2741;
  t3257 = t3249 + t3254;
  t1525 = t119*t1524*t195;
  t1529 = t1422 + t1432 + t1074;
  t1530 = t281*t1529;
  t1532 = t1525 + t1530;
  t1570 = t119*t1556*t195;
  t1585 = t1065*t819;
  t1598 = t1453*t1088*t251;
  t1613 = t1394 + t1397 + t1585 + t1025 + t1588 + t1598;
  t1638 = t281*t1613;
  t1657 = t1570 + t1638;
  t1681 = t119*t1524*t393;
  t1682 = -1.*t903*t195;
  t1685 = -1.*t1453*t1088*t195;
  t1700 = -1.*t1065*t251;
  t1706 = -1.*t119*t1292*t393;
  t1710 = t281*t1366*t393;
  t1715 = t1682 + t1683 + t1685 + t1700 + t1706 + t1710;
  t1716 = t281*t1715;
  t1717 = t1681 + t1716;
  t1734 = t119*t1556*t251;
  t1739 = t903*t819;
  t1744 = t119*t1292*t251;
  t1745 = -1.*t281*t1366*t251;
  t1768 = t1739 + t1744 + t1745;
  t1774 = t281*t1768;
  t1792 = t1734 + t1774;
  t2121 = 0.158015*t846*t2110;
  t2122 = 0.158015*t427*t2110;
  t2139 = 0.158015*t322*t2136;
  t2184 = 0.158015*t322*t2176;
  t2185 = t2121 + t2122 + t2139 + t2184;
  t1939 = t1824*t1934;
  t1983 = t1868*t1980;
  t2004 = t1939 + t1983;
  t2016 = t1824*t2014;
  t2069 = t1868*t2056;
  t2075 = t2016 + t2069;
  t2248 = t1849*t2242;
  t2253 = t2249 + t2250 + t2252;
  t2256 = t119*t234*t2253;
  t2260 = t2248 + t2256;
  t2318 = t1849*t2285;
  t2338 = -1.*t119*t281*t1088;
  t2365 = t119*t295*t2344;
  t2386 = t2338 + t2365 + t2384;
  t2388 = t1934*t2386;
  t2432 = t2344*t833;
  t2442 = t2390 + t1588 + t2394 + t2409 + t2412 + t2432;
  t2446 = t119*t234*t2442;
  t2450 = t2318 + t2388 + t2446;
  t2289 = t1934*t2285;
  t2290 = t119*t2187*t251;
  t2296 = t2216*t833;
  t2297 = t2290 + t2294 + t2296;
  t2300 = t119*t234*t2297;
  t2309 = t2289 + t2300;
  t2458 = t2014*t2242;
  t2467 = t119*t281*t1088;
  t2469 = -1.*t119*t295*t2344;
  t2477 = t2467 + t2469 + t2472;
  t2481 = t1849*t2477;
  t2492 = -1.*t119*t2187*t393;
  t2497 = -1.*t2344*t302;
  t2506 = -1.*t2216*t414;
  t2507 = t1683 + t2492 + t2495 + t2497 + t2504 + t2506;
  t2514 = t119*t234*t2507;
  t2520 = t2458 + t2481 + t2514;
  t2535 = t2390 + t2394 + t2412;
  t2538 = t1849*t2535;
  t2539 = -1.*t119*t2187*t251;
  t2561 = -1.*t2216*t833;
  t2563 = t2539 + t2542 + t2561;
  t2564 = t2014*t2563;
  t2572 = -1.*t2344*t833;
  t2576 = t2249 + t1445 + t2250 + t2569 + t2252 + t2572;
  t2589 = t1849*t2576;
  t2607 = t119*t2187*t393;
  t2610 = t2344*t302;
  t2628 = t2216*t414;
  t2630 = t1477 + t2607 + t2608 + t2610 + t2622 + t2628;
  t2641 = t1934*t2630;
  t2669 = t2538 + t2564 + t2589 + t2641;
  t2771 = t322*t2770;
  t2781 = t2252 + t2774 + t2776;
  t2784 = t1172*t2781;
  t2786 = t2771 + t2784;
  t2858 = t846*t2846;
  t2867 = t2693*t846;
  t2868 = t2752*t1980;
  t2875 = t2294 + t2867 + t2868;
  t2880 = t1172*t2875;
  t2886 = t2858 + t2880;
  t2894 = t322*t2846;
  t2925 = -1.*t1172*t2914;
  t2942 = -1.*t2741*t2929;
  t2945 = t2384 + t2925 + t2942;
  t2953 = t846*t2945;
  t2960 = t2914*t846;
  t2962 = t2929*t1980;
  t2968 = t2409 + t2412 + t2956 + t2958 + t2960 + t2962;
  t2974 = t1172*t2968;
  t2979 = t2894 + t2953 + t2974;
  t2986 = t427*t2770;
  t2994 = t1172*t2914;
  t2995 = t2741*t2929;
  t3013 = t2472 + t2994 + t2995;
  t3019 = t322*t3013;
  t3036 = -1.*t2914*t322;
  t3038 = -1.*t2929*t1895;
  t3060 = -1.*t2693*t427;
  t3061 = -1.*t2752*t2056;
  t3069 = t2495 + t2504 + t3036 + t3038 + t3060 + t3061;
  t3073 = t1172*t3069;
  t3084 = t2986 + t3019 + t3073;
  t3095 = t2412 + t2956 + t2958;
  t3096 = t322*t3095;
  t3098 = -1.*t2693*t846;
  t3100 = -1.*t2752*t1980;
  t3104 = t2542 + t3098 + t3100;
  t3109 = t427*t3104;
  t3113 = -1.*t2914*t846;
  t3114 = -1.*t2929*t1980;
  t3115 = t2569 + t2252 + t2774 + t2776 + t3113 + t3114;
  t3119 = t322*t3115;
  t3129 = t2914*t322;
  t3130 = t2929*t1895;
  t3135 = t2693*t427;
  t3139 = t2752*t2056;
  t3142 = t2608 + t2622 + t3129 + t3130 + t3135 + t3139;
  t3144 = t846*t3142;
  t3145 = t3096 + t3109 + t3119 + t3144;
  t3649 = t119*t234*t1824;
  t3657 = t1868*t2741;
  t3660 = t3649 + t3657;
  t1917 = 0.158015*t846*t1913;
  t1926 = 0.158015*t427*t1913;
  t2006 = 0.158015*t322*t2004;
  t2086 = 0.158015*t322*t2075;
  t2087 = t1917 + t1926 + t2006 + t2086;
  t3322 = 0.158015*t2110*t2004;
  t3326 = 0.158015*t1913*t2136;
  t3335 = 0.158015*t2110*t2075;
  t3360 = 0.158015*t1913*t2176;
  t3384 = t3322 + t3326 + t3335 + t3360;
  t3955 = -0.000029*t322;
  t3968 = 1.e-6*t427;
  t4085 = -0.000133*t322;
  t4045 = 1.e-6*t1172;
  t4056 = 0.003608*t322;
  t4060 = -0.000133*t846;
  t4064 = t4045 + t4056 + t4060;
  t4083 = -0.000029*t1172;
  t4089 = 0.000035*t846;
  t4096 = t4083 + t4085 + t4089;
  t4125 = 0.000035*t322;
  t4127 = -0.000133*t427;
  t4143 = t4125 + t4127;
  t4178 = 0.003608*t427;
  t4187 = t4085 + t4178;
  t4212 = t846*t3095;
  t4226 = t322*t3104;
  t4231 = t4212 + t4226;
  t2794 = 0.158015*t322*t2786;
  t2888 = 0.158015*t427*t2886;
  t2983 = 0.158015*t322*t2979;
  t3091 = 0.158015*t846*t3084;
  t3158 = 0.158015*t1172*t3145;
  t3168 = t2794 + t2888 + t2983 + t3091 + t3158;
  t3909 = 0.158015*t1913*t2786;
  t3914 = 0.158015*t2075*t2886;
  t3921 = 0.158015*t1913*t2979;
  t3936 = 0.158015*t2004*t3084;
  t3945 = 0.158015*t3660*t3145;
  t3947 = t3909 + t3914 + t3921 + t3936 + t3945;
  t3493 = 0.158015*t2110*t2786;
  t3513 = 0.158015*t2176*t2886;
  t3519 = 0.158015*t2110*t2979;
  t3523 = 0.158015*t2136*t3084;
  t3527 = 0.158015*t3257*t3145;
  t3529 = t3493 + t3513 + t3519 + t3523 + t3527;
  t4159 = t3955 + t3968;
  t4526 = 1.e-6*t2014;
  t4527 = -0.000029*t1849;
  t4599 = -0.000133*t1849;
  t4412 = t1934*t2535;
  t4413 = t1849*t2563;
  t4414 = t4412 + t4413;
  t4252 = t119*t195*t1376;
  t4258 = t119*t251*t1401;
  t4262 = t4252 + t4258;
  t4598 = 0.003608*t2014;
  t4604 = t4598 + t4599;
  t4609 = -0.000029*t119*t234;
  t4633 = 0.000035*t1934;
  t4635 = t4609 + t4633 + t4599;
  t4651 = -0.000133*t2014;
  t4653 = 0.000035*t1849;
  t4667 = t4651 + t4653;
  t4676 = 1.e-6*t119*t234;
  t4681 = -0.000133*t1934;
  t4692 = 0.003608*t1849;
  t4696 = t4676 + t4681 + t4692;
  t4330 = t251*t1011;
  t4335 = t819*t1026;
  t4337 = t4330 + t4335;
  t2268 = 0.158015*t322*t2260;
  t2314 = 0.158015*t427*t2309;
  t2454 = 0.158015*t322*t2450;
  t2531 = 0.158015*t846*t2520;
  t2676 = 0.158015*t1172*t2669;
  t2680 = t2268 + t2314 + t2454 + t2531 + t2676;
  t3845 = 0.158015*t1913*t2260;
  t3849 = 0.158015*t1913*t2450;
  t3877 = 0.158015*t2309*t2075;
  t3882 = 0.158015*t2004*t2520;
  t3896 = 0.158015*t3660*t2669;
  t3897 = t3845 + t3849 + t3877 + t3882 + t3896;
  t3419 = 0.158015*t2110*t2260;
  t3428 = 0.158015*t2110*t2450;
  t3431 = 0.158015*t2309*t2176;
  t3454 = 0.158015*t2136*t2520;
  t3464 = 0.158015*t3257*t2669;
  t3479 = t3419 + t3428 + t3431 + t3454 + t3464;
  t4648 = t4526 + t4527;
  t4405 = 0.158015*t2520*t2786;
  t4406 = 0.158015*t2669*t4231;
  t4407 = 0.158015*t2450*t2886;
  t4408 = 0.158015*t2309*t2979;
  t4409 = 0.158015*t2260*t3084;
  t4419 = 0.158015*t4414*t3145;
  t4956 = -0.000029*t119*t195;
  t4959 = 1.e-6*t119*t393;
  t5097 = -0.000133*t119*t195;
  t5065 = 1.e-6*t281;
  t5067 = 0.003608*t119*t195;
  t5069 = -0.000133*t119*t251;
  t5072 = t5065 + t5067 + t5069;
  t5094 = -0.000029*t281;
  t5112 = 0.000035*t119*t251;
  t5120 = t5094 + t5097 + t5112;
  t5133 = 0.000035*t119*t195;
  t5136 = -0.000133*t119*t393;
  t5144 = t5133 + t5136;
  t5178 = 0.003608*t119*t393;
  t5179 = t5097 + t5178;
  t1510 = 0.158015*t1507*t1172;
  t1535 = 0.158015*t1532*t322;
  t1662 = 0.158015*t1657*t322;
  t1733 = 0.158015*t1717*t846;
  t1799 = 0.158015*t1792*t427;
  t1802 = t1510 + t1535 + t1662 + t1733 + t1799;
  t3714 = 0.158015*t1507*t3660;
  t3716 = 0.158015*t1532*t1913;
  t3720 = 0.158015*t1657*t1913;
  t3734 = 0.158015*t1717*t2004;
  t3735 = 0.158015*t1792*t2075;
  t3745 = t3714 + t3716 + t3720 + t3734 + t3735;
  t3287 = 0.158015*t1507*t3257;
  t3290 = 0.158015*t1532*t2110;
  t3296 = 0.158015*t1657*t2110;
  t3301 = 0.158015*t1717*t2136;
  t3302 = 0.158015*t1792*t2176;
  t3310 = t3287 + t3290 + t3296 + t3301 + t3302;
  t5171 = t4956 + t4959;
  t4728 = 0.158015*t1717*t2260;
  t4748 = 0.158015*t1507*t4414;
  t4753 = 0.158015*t1657*t2309;
  t4757 = 0.158015*t1792*t2450;
  t4758 = 0.158015*t1532*t2520;
  t4764 = 0.158015*t4262*t2669;
  t4210 = 0.158015*t1717*t2786;
  t4239 = 0.158015*t1507*t4231;
  t4240 = 0.158015*t1657*t2886;
  t4241 = 0.158015*t1792*t2979;
  t4245 = 0.158015*t1532*t3084;
  t4264 = 0.158015*t4262*t3145;
  t5417 = -0.000029*t251;
  t5457 = -0.000133*t251;
  t5443 = 1.e-6*t195;
  t5224 = 0.158015*t1211*t1792;
  t5225 = 0.012847725605*t195*t1532;
  t5228 = 0.158015*t1243*t1657;
  t5230 = 0.158015*t4337*t1507;
  t5239 = 0.158015*t1193*t1717;
  t5264 = 0.158015*t4262*t1153;
  t5456 = 0.003608*t195;
  t5458 = t5456 + t5457;
  t5482 = 0.000035*t819;
  t5484 = t5482 + t5457;
  t5516 = -0.000133*t195;
  t5526 = 0.000035*t251;
  t5531 = t5516 + t5526;
  t5539 = -0.000133*t819;
  t5540 = 0.003608*t251;
  t5542 = t5539 + t5540;
  t1184 = 0.158015*t1153*t1172;
  t1195 = 0.158015*t1193*t322;
  t1212 = 0.158015*t1211*t322;
  t1213 = 0.012847725605*t195*t846;
  t1244 = 0.158015*t1243*t427;
  t1248 = t1184 + t1195 + t1212 + t1213 + t1244;
  t3665 = 0.158015*t1153*t3660;
  t3671 = 0.158015*t1193*t1913;
  t3674 = 0.158015*t1211*t1913;
  t3677 = 0.012847725605*t195*t2004;
  t3683 = 0.158015*t1243*t2075;
  t3689 = t3665 + t3671 + t3674 + t3677 + t3683;
  t3268 = 0.158015*t1153*t3257;
  t3272 = 0.158015*t1193*t2110;
  t3273 = 0.158015*t1211*t2110;
  t3275 = 0.012847725605*t195*t2136;
  t3276 = 0.158015*t1243*t2176;
  t3277 = t3268 + t3272 + t3273 + t3275 + t3276;
  t5490 = t5443 + t5417;
  t4804 = 0.012847725605*t195*t2260;
  t4809 = 0.158015*t1153*t4414;
  t4810 = 0.158015*t1211*t2309;
  t4851 = 0.158015*t1243*t2450;
  t4852 = 0.158015*t1193*t2520;
  t4853 = 0.158015*t4337*t2669;
  t4292 = 0.012847725605*t195*t2786;
  t4293 = 0.158015*t1153*t4231;
  t4302 = 0.158015*t1211*t2886;
  t4312 = 0.158015*t1243*t2979;
  t4321 = 0.158015*t1193*t3084;
  t4339 = 0.158015*t4337*t3145;
  t5445 = 0.012847725605*t195*t605;
  t5446 = 0.158015*t678*t1243;
  t5447 = 0.158015*t796*t1193;
  t5450 = 0.158015*t852*t1211;
  t5451 = t5443 + t5417 + t5445 + t5446 + t5447 + t5450;
  t5006 = 0.158015*t678*t1792;
  t5037 = 0.158015*t796*t1532;
  t5041 = 0.158015*t852*t1657;
  t5045 = 0.158015*t605*t1717;
  t5053 = t4956 + t4959 + t5006 + t5037 + t5041 + t5045;
  t615 = 0.158015*t605*t322;
  t690 = 0.158015*t678*t322;
  t850 = 0.158015*t796*t846;
  t858 = 0.158015*t852*t427;
  t860 = t615 + t690 + t850 + t858;
  t3600 = 0.158015*t605*t1913;
  t3611 = 0.158015*t678*t1913;
  t3623 = 0.158015*t796*t2004;
  t3624 = 0.158015*t852*t2075;
  t3642 = t3600 + t3611 + t3623 + t3624;
  t3226 = 0.158015*t605*t2110;
  t3227 = 0.158015*t678*t2110;
  t3229 = 0.158015*t796*t2136;
  t3233 = 0.158015*t852*t2176;
  t3236 = t3226 + t3227 + t3229 + t3233;
  t4561 = 0.158015*t796*t2260;
  t4565 = 0.158015*t678*t2309;
  t4568 = 0.158015*t852*t2450;
  t4579 = 0.158015*t605*t2520;
  t4582 = t4526 + t4527 + t4561 + t4565 + t4568 + t4579;
  t4021 = 0.158015*t796*t2786;
  t4023 = 0.158015*t678*t2886;
  t4027 = 0.158015*t852*t2979;
  t4030 = 0.158015*t605*t3084;
  t4035 = t3955 + t3968 + t4021 + t4023 + t4027 + t4030;
  t5677 = -0.019320336034999996*t678;
  t5681 = -0.0009932822899999978*t796;
  t5683 = t5677 + t5681;
  t5393 = -0.00007976080315302984*t195;
  t5423 = -0.019320336034999996*t1211;
  t4962 = -0.019320336034999996*t1657;
  t4972 = -0.0009932822899999978*t1717;
  t338 = -0.0009932822899999978*t322;
  t435 = -0.019320336034999996*t427;
  t436 = t338 + t435;
  t3546 = -0.0009932822899999978*t1913;
  t3575 = -0.019320336034999996*t2075;
  t3576 = t3546 + t3575;
  t3196 = -0.0009932822899999978*t2110;
  t3198 = -0.019320336034999996*t2176;
  t3205 = t3196 + t3198;
  t4533 = -0.019320336034999996*t2450;
  t4540 = -0.0009932822899999978*t2520;
  t3988 = -0.019320336034999996*t2979;
  t3991 = -0.0009932822899999978*t3084;
  p_output1[0]=var2[17]*(-0.5*(0.31603*t322*t427 + 0.31603*t322*t846)*var2[0] - 0.5*t2185*var2[1] - 0.5*t2087*var2[2] - 0.5*t3168*var2[3] - 0.5*t2680*var2[4] - 0.5*t1802*var2[5] - 0.5*t1248*var2[15] - 0.5*t860*var2[16] - 0.5*t436*var2[17]);
  p_output1[1]=var2[17]*(-0.5*t2185*var2[0] - 0.5*(0.31603*t2110*t2136 + 0.31603*t2110*t2176)*var2[1] - 0.5*t3384*var2[2] - 0.5*t3529*var2[3] - 0.5*t3479*var2[4] - 0.5*t3310*var2[5] - 0.5*t3277*var2[15] - 0.5*t3236*var2[16] - 0.5*t3205*var2[17]);
  p_output1[2]=var2[17]*(-0.5*t2087*var2[0] - 0.5*t3384*var2[1] - 0.5*(0.31603*t1913*t2004 + 0.31603*t1913*t2075)*var2[2] - 0.5*t3947*var2[3] - 0.5*t3897*var2[4] - 0.5*t3745*var2[5] - 0.5*t3689*var2[15] - 0.5*t3642*var2[16] - 0.5*t3576*var2[17]);
  p_output1[3]=var2[17]*(-0.5*t3168*var2[0] - 0.5*t3529*var2[1] - 0.5*t3947*var2[2] - 0.5*(0.31603*t2886*t2979 + 0.31603*t2786*t3084 + t322*t4096 + t1172*t4159 + t322*t4187 + 0.31603*t3145*t4231 + t4064*t427 + t4143*t846)*var2[3] - 0.5*(t2014*t4064 + t1849*t4096 + t1934*t4143 + t119*t234*t4159 + t1849*t4187 + t4405 + t4406 + t4407 + t4408 + t4409 + t4419)*var2[4] - 0.5*(t119*t393*t4064 + t119*t195*t4096 + t119*t251*t4143 + t281*t4159 + t119*t195*t4187 + t4210 + t4239 + t4240 + t4241 + t4245 + t4264)*var2[5] - 0.5*(t195*t4064 + t251*t4096 + t251*t4187 + t4292 + t4293 + t4302 + t4312 + t4321 + t4339 + t4143*t819)*var2[15] - 0.5*t4035*var2[16] - 0.5*(t3955 + t3968 + t3988 + t3991)*var2[17]);
  p_output1[4]=var2[17]*(-0.5*t2680*var2[0] - 0.5*t3479*var2[1] - 0.5*t3897*var2[2] - 0.5*(t4405 + t4406 + t4407 + t4408 + t4409 + t4419 + t322*t4604 + t322*t4635 + t1172*t4648 + t427*t4696 + t4667*t846)*var2[3] - 0.5*(0.31603*t2309*t2450 + 0.31603*t2260*t2520 + 0.31603*t2669*t4414 + t1849*t4604 + t1849*t4635 + t119*t234*t4648 + t1934*t4667 + t2014*t4696)*var2[4] - 0.5*(t119*t195*t4604 + t119*t195*t4635 + t281*t4648 + t119*t251*t4667 + t119*t393*t4696 + t4728 + t4748 + t4753 + t4757 + t4758 + t4764)*var2[5] - 0.5*(t251*t4604 + t251*t4635 + t195*t4696 + t4804 + t4809 + t4810 + t4851 + t4852 + t4853 + t4667*t819)*var2[15] - 0.5*t4582*var2[16] - 0.5*(t4526 + t4527 + t4533 + t4540)*var2[17]);
  p_output1[5]=var2[17]*(-0.5*t1802*var2[0] - 0.5*t3310*var2[1] - 0.5*t3745*var2[2] - 0.5*(t4210 + t4239 + t4240 + t4241 + t4245 + t4264 + t427*t5072 + t322*t5120 + t1172*t5171 + t322*t5179 + t5144*t846)*var2[3] - 0.5*(t4728 + t4748 + t4753 + t4757 + t4758 + t4764 + t2014*t5072 + t1849*t5120 + t1934*t5144 + t119*t234*t5171 + t1849*t5179)*var2[4] - 0.5*(0.31603*t1532*t1717 + 0.31603*t1657*t1792 + 0.31603*t1507*t4262 + t119*t393*t5072 + t119*t195*t5120 + t119*t251*t5144 + t281*t5171 + t119*t195*t5179)*var2[5] - 0.5*(t195*t5072 + t251*t5120 + t251*t5179 + t5224 + t5225 + t5228 + t5230 + t5239 + t5264 + t5144*t819)*var2[15] - 0.5*t5053*var2[16] - 0.5*(t4956 + t4959 + t4962 + t4972)*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=var2[17]*(-0.5*t1248*var2[0] - 0.5*t3277*var2[1] - 0.5*t3689*var2[2] - 0.5*(t4292 + t4293 + t4302 + t4312 + t4321 + t4339 + t322*t5458 + t322*t5484 + t1172*t5490 + t427*t5542 + t5531*t846)*var2[3] - 0.5*(t4804 + t4809 + t4810 + t4851 + t4852 + t4853 + t1849*t5458 + t1849*t5484 + t119*t234*t5490 + t1934*t5531 + t2014*t5542)*var2[4] - 0.5*(t5224 + t5225 + t5228 + t5230 + t5239 + t5264 + t119*t195*t5458 + t119*t195*t5484 + t281*t5490 + t119*t251*t5531 + t119*t393*t5542)*var2[5] - 0.5*(0.31603*t1211*t1243 + 0.02569545121*t1193*t195 + 0.31603*t1153*t4337 + t251*t5458 + t251*t5484 + t195*t5542 + t5531*t819)*var2[15] - 0.5*t5451*var2[16] - 0.5*(t5393 + t5417 + t5423)*var2[17]);
  p_output1[16]=var2[17]*(-0.5*t860*var2[0] - 0.5*t3236*var2[1] - 0.5*t3642*var2[2] - 0.5*t4035*var2[3] - 0.5*t4582*var2[4] - 0.5*t5053*var2[5] - 0.5*t5451*var2[15] - 0.5*(0.31603*t605*t796 + 0.31603*t678*t852)*var2[16] - 0.5*t5683*var2[17]);
  p_output1[17]=(-0.5*t436*var2[0] - 0.5*t3205*var2[1] - 0.5*t3576*var2[2] - 0.5*(-0.000029*t322 + t3988 + t3991 + 1.e-6*t427)*var2[3] - 0.5*(-0.000029*t1849 + 1.e-6*t2014 + t4533 + t4540)*var2[4] - 0.5*(-0.000029*t119*t195 + 1.e-6*t119*t393 + t4962 + t4972)*var2[5] - 0.5*(-0.000029*t251 + t5393 + t5423)*var2[15] - 0.5*t5683*var2[16])*var2[17];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec18_go1_description.hh"

namespace SymFunction
{

void Ce2_vec18_go1_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
