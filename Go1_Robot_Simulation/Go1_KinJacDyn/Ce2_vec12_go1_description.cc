/*
 * Automatically Generated from Mathematica.
 * Tue 7 Mar 2023 21:28:32 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t207;
  double t126;
  double t148;
  double t214;
  double t161;
  double t222;
  double t232;
  double t72;
  double t236;
  double t250;
  double t268;
  double t340;
  double t373;
  double t383;
  double t388;
  double t342;
  double t580;
  double t589;
  double t240;
  double t319;
  double t323;
  double t326;
  double t329;
  double t346;
  double t350;
  double t353;
  double t368;
  double t597;
  double t610;
  double t625;
  double t639;
  double t648;
  double t654;
  double t685;
  double t699;
  double t807;
  double t810;
  double t771;
  double t800;
  double t803;
  double t842;
  double t862;
  double t866;
  double t399;
  double t415;
  double t422;
  double t432;
  double t455;
  double t461;
  double t887;
  double t896;
  double t900;
  double t1039;
  double t1042;
  double t1053;
  double t1055;
  double t984;
  double t1008;
  double t1010;
  double t1027;
  double t1028;
  double t1032;
  double t1236;
  double t1244;
  double t1249;
  double t1159;
  double t1163;
  double t1171;
  double t882;
  double t913;
  double t920;
  double t921;
  double t923;
  double t943;
  double t1036;
  double t1475;
  double t1485;
  double t1493;
  double t1517;
  double t1518;
  double t1531;
  double t1538;
  double t1543;
  double t1557;
  double t1084;
  double t1182;
  double t1209;
  double t1329;
  double t1641;
  double t1653;
  double t1333;
  double t1348;
  double t1354;
  double t1363;
  double t1609;
  double t1630;
  double t1585;
  double t1591;
  double t1778;
  double t1782;
  double t1790;
  double t1829;
  double t1844;
  double t1860;
  double t2190;
  double t2202;
  double t2210;
  double t2212;
  double t2223;
  double t2231;
  double t2265;
  double t2270;
  double t2271;
  double t2277;
  double t2279;
  double t2473;
  double t2484;
  double t2487;
  double t2293;
  double t2299;
  double t2330;
  double t2340;
  double t2341;
  double t2346;
  double t2373;
  double t2379;
  double t2392;
  double t2421;
  double t2424;
  double t2436;
  double t2546;
  double t2553;
  double t2555;
  double t2557;
  double t2566;
  double t2575;
  double t2586;
  double t2651;
  double t2654;
  double t2656;
  double t2665;
  double t1902;
  double t2751;
  double t2756;
  double t2759;
  double t2737;
  double t2738;
  double t2739;
  double t2552;
  double t2561;
  double t2592;
  double t2596;
  double t2023;
  double t2796;
  double t2801;
  double t2812;
  double t2602;
  double t1643;
  double t2610;
  double t2611;
  double t1680;
  double t3144;
  double t3156;
  double t3159;
  double t3181;
  double t3183;
  double t3219;
  double t3174;
  double t3176;
  double t3180;
  double t2694;
  double t3258;
  double t3260;
  double t3261;
  double t2775;
  double t2806;
  double t3323;
  double t3324;
  double t3338;
  double t3345;
  double t3351;
  double t3355;
  double t3161;
  double t3223;
  double t3224;
  double t2904;
  double t2951;
  double t2955;
  double t3382;
  double t3393;
  double t3012;
  double t3043;
  double t3240;
  double t3243;
  double t3075;
  double t3081;
  double t2519;
  double t2523;
  double t2525;
  double t540;
  double t647;
  double t715;
  double t724;
  double t738;
  double t739;
  double t804;
  double t805;
  double t821;
  double t822;
  double t844;
  double t868;
  double t878;
  double t2500;
  double t2505;
  double t2508;
  double t961;
  double t1071;
  double t1077;
  double t1079;
  double t1081;
  double t1090;
  double t1093;
  double t1119;
  double t1261;
  double t1284;
  double t1317;
  double t1332;
  double t1334;
  double t1337;
  double t1340;
  double t1347;
  double t1382;
  double t1384;
  double t1387;
  double t1389;
  double t1398;
  double t1435;
  double t1449;
  double t1457;
  double t1500;
  double t1560;
  double t1569;
  double t1572;
  double t1604;
  double t1608;
  double t1667;
  double t1671;
  double t1678;
  double t1701;
  double t1708;
  double t1756;
  double t1758;
  double t1760;
  double t1763;
  double t3690;
  double t3698;
  double t3701;
  double t1794;
  double t1799;
  double t1809;
  double t1811;
  double t1866;
  double t1884;
  double t1919;
  double t1929;
  double t1937;
  double t1954;
  double t1989;
  double t2013;
  double t2028;
  double t2038;
  double t2051;
  double t2052;
  double t2054;
  double t2058;
  double t2061;
  double t2066;
  double t2067;
  double t2080;
  double t2088;
  double t2116;
  double t2124;
  double t2151;
  double t2494;
  double t2496;
  double t2509;
  double t2540;
  double t2544;
  double t2339;
  double t2350;
  double t2366;
  double t2417;
  double t2438;
  double t2451;
  double t2601;
  double t2621;
  double t2629;
  double t2634;
  double t2723;
  double t2734;
  double t2746;
  double t2789;
  double t2790;
  double t2820;
  double t2832;
  double t2839;
  double t2848;
  double t2673;
  double t2691;
  double t2696;
  double t2697;
  double t2699;
  double t2706;
  double t2867;
  double t2881;
  double t2902;
  double t2909;
  double t2921;
  double t2938;
  double t2952;
  double t2962;
  double t2969;
  double t2970;
  double t2978;
  double t2997;
  double t3004;
  double t3006;
  double t3020;
  double t3031;
  double t3041;
  double t3053;
  double t3055;
  double t3063;
  double t3068;
  double t3076;
  double t3105;
  double t3107;
  double t3122;
  double t3124;
  double t3225;
  double t3244;
  double t3246;
  double t3248;
  double t3264;
  double t3268;
  double t3273;
  double t3291;
  double t3308;
  double t3311;
  double t3319;
  double t3340;
  double t3364;
  double t3369;
  double t3379;
  double t3403;
  double t3405;
  double t3406;
  double t3409;
  double t3418;
  double t3444;
  double t3447;
  double t3450;
  double t3453;
  double t3456;
  double t3459;
  double t3465;
  double t3477;
  double t3500;
  double t3509;
  double t3512;
  double t3522;
  double t3532;
  double t3533;
  double t3536;
  double t3541;
  double t3543;
  double t3547;
  double t3550;
  double t3556;
  double t3557;
  double t3560;
  double t3576;
  double t3577;
  double t3579;
  double t3582;
  double t3587;
  double t3593;
  double t3597;
  double t4047;
  double t4050;
  double t4081;
  double t2288;
  double t2291;
  double t2368;
  double t2452;
  double t2463;
  double t3798;
  double t3799;
  double t3805;
  double t3808;
  double t3824;
  double t4267;
  double t4304;
  double t4367;
  double t4341;
  double t4343;
  double t4344;
  double t4345;
  double t4362;
  double t4368;
  double t4380;
  double t4384;
  double t4385;
  double t4392;
  double t4409;
  double t4410;
  double t4417;
  double t4423;
  double t4445;
  double t3251;
  double t3318;
  double t3421;
  double t3531;
  double t3601;
  double t3609;
  double t4209;
  double t4218;
  double t4227;
  double t4238;
  double t4247;
  double t4249;
  double t3892;
  double t3896;
  double t3902;
  double t3903;
  double t3904;
  double t3916;
  double t4398;
  double t4697;
  double t4698;
  double t4758;
  double t4618;
  double t4621;
  double t4622;
  double t4467;
  double t4473;
  double t4487;
  double t4749;
  double t4761;
  double t4765;
  double t4767;
  double t4768;
  double t4802;
  double t4808;
  double t4814;
  double t4830;
  double t4846;
  double t4847;
  double t4849;
  double t4542;
  double t4544;
  double t4545;
  double t2642;
  double t2718;
  double t2851;
  double t2996;
  double t3137;
  double t3138;
  double t4186;
  double t4193;
  double t4196;
  double t4200;
  double t4203;
  double t4204;
  double t3869;
  double t3875;
  double t3877;
  double t3879;
  double t3884;
  double t3887;
  double t4796;
  double t4594;
  double t4603;
  double t4605;
  double t4610;
  double t4614;
  double t4624;
  double t5042;
  double t5049;
  double t5125;
  double t5109;
  double t5110;
  double t5111;
  double t5115;
  double t5119;
  double t5129;
  double t5132;
  double t5135;
  double t5136;
  double t5139;
  double t5159;
  double t5170;
  double t1769;
  double t1814;
  double t1962;
  double t2064;
  double t2161;
  double t2166;
  double t4132;
  double t4137;
  double t4139;
  double t4141;
  double t4147;
  double t4149;
  double t3765;
  double t3771;
  double t3775;
  double t3777;
  double t3780;
  double t3781;
  double t5146;
  double t4856;
  double t4857;
  double t4859;
  double t4866;
  double t4867;
  double t4876;
  double t4416;
  double t4457;
  double t4459;
  double t4462;
  double t4465;
  double t4490;
  double t5342;
  double t5416;
  double t5374;
  double t5195;
  double t5199;
  double t5204;
  double t5208;
  double t5210;
  double t5212;
  double t5409;
  double t5418;
  double t5426;
  double t5427;
  double t5472;
  double t5473;
  double t5481;
  double t5483;
  double t5495;
  double t5498;
  double t1371;
  double t1385;
  double t1400;
  double t1405;
  double t1468;
  double t1469;
  double t4091;
  double t4097;
  double t4103;
  double t4104;
  double t4117;
  double t4120;
  double t3722;
  double t3728;
  double t3738;
  double t3740;
  double t3741;
  double t3749;
  double t5444;
  double t4903;
  double t4904;
  double t4905;
  double t4915;
  double t4918;
  double t4921;
  double t4528;
  double t4534;
  double t4537;
  double t4538;
  double t4539;
  double t4546;
  double t5386;
  double t5392;
  double t5396;
  double t5399;
  double t5401;
  double t5080;
  double t5082;
  double t5088;
  double t5090;
  double t5104;
  double t730;
  double t835;
  double t953;
  double t964;
  double t976;
  double t3955;
  double t3958;
  double t3959;
  double t3960;
  double t4004;
  double t3664;
  double t3672;
  double t3675;
  double t3678;
  double t3679;
  double t4719;
  double t4727;
  double t4730;
  double t4739;
  double t4743;
  double t4317;
  double t4322;
  double t4324;
  double t4333;
  double t4338;
  double t5583;
  double t5584;
  double t5587;
  double t5341;
  double t5344;
  double t5053;
  double t5057;
  double t372;
  double t503;
  double t512;
  double t3939;
  double t3944;
  double t3946;
  double t3637;
  double t3639;
  double t3643;
  double t4707;
  double t4711;
  double t4306;
  double t4307;
  t207 = Cos(var1[10]);
  t126 = Cos(var1[11]);
  t148 = Sin(var1[10]);
  t214 = Sin(var1[11]);
  t161 = -1.*t126*t148;
  t222 = -1.*t207*t214;
  t232 = t161 + t222;
  t72 = Cos(var1[9]);
  t236 = Sin(var1[4]);
  t250 = Cos(var1[4]);
  t268 = Cos(var1[5]);
  t340 = Sin(var1[9]);
  t373 = -1.*t207*t126;
  t383 = t148*t214;
  t388 = t373 + t383;
  t342 = Sin(var1[5]);
  t580 = -1.*t126;
  t589 = 1. + t580;
  t240 = t72*t232*t236;
  t319 = t207*t126;
  t323 = -1.*t148*t214;
  t326 = t319 + t323;
  t329 = t268*t326;
  t346 = t340*t232*t342;
  t350 = t329 + t346;
  t353 = t250*t350;
  t368 = t240 + t353;
  t597 = 0.1881*t589;
  t610 = 0.194386*t126;
  t625 = -0.12226899999999999*t214;
  t639 = t597 + t610 + t625;
  t648 = -0.213*t589;
  t654 = -0.335269*t126;
  t685 = -0.006286*t214;
  t699 = t648 + t654 + t685;
  t807 = -0.12226899999999999*t126;
  t810 = t807 + t685;
  t771 = -0.006286*t126;
  t800 = 0.12226899999999999*t214;
  t803 = t771 + t800;
  t842 = t126*t699;
  t862 = -0.1881*t214;
  t866 = t639*t214;
  t399 = t72*t388*t236;
  t415 = t268*t232;
  t422 = t340*t388*t342;
  t432 = t415 + t422;
  t455 = t250*t432;
  t461 = t399 + t455;
  t887 = t126*t148;
  t896 = t207*t214;
  t900 = t887 + t896;
  t1039 = 0.1881*t148;
  t1042 = -1.*t148*t639;
  t1053 = t207*t699;
  t1055 = 0. + t1039 + t1042 + t1053;
  t984 = -1.*t207;
  t1008 = 1. + t984;
  t1010 = 0.1881*t1008;
  t1027 = t207*t639;
  t1028 = t148*t699;
  t1032 = 0. + t1010 + t1027 + t1028;
  t1236 = -1.*t148*t810;
  t1244 = t207*t803;
  t1249 = t1236 + t1244;
  t1159 = t207*t810;
  t1163 = t148*t803;
  t1171 = t1159 + t1163;
  t882 = t72*t326*t236;
  t913 = t268*t900;
  t920 = t340*t326*t342;
  t921 = t913 + t920;
  t923 = t250*t921;
  t943 = t882 + t923;
  t1036 = -1.*t1032*t900;
  t1475 = 0.081307*t340;
  t1485 = t72*t1055;
  t1493 = t1475 + t1485;
  t1517 = -1.*t72;
  t1518 = 1. + t1517;
  t1531 = 0.04675*t1518;
  t1538 = 0.128057*t72;
  t1543 = -1.*t340*t1055;
  t1557 = t1531 + t1538 + t1543;
  t1084 = t1032*t326;
  t1182 = -1.*t1171*t900;
  t1209 = -1.*t1032*t326;
  t1329 = t1032*t232;
  t1641 = Power(t72,2);
  t1653 = Power(t340,2);
  t1333 = t1171*t326;
  t1348 = t340*t236;
  t1354 = -1.*t72*t250*t342;
  t1363 = t1348 + t1354;
  t1609 = -1.*t72*t1493*t232;
  t1630 = t340*t1557*t232;
  t1585 = t72*t1493*t232;
  t1591 = -1.*t340*t1557*t232;
  t1778 = t340*t1493;
  t1782 = t72*t1557;
  t1790 = t1778 + t1782;
  t1829 = -1.*t340*t1493;
  t1844 = -1.*t72*t1557;
  t1860 = t1829 + t1844;
  t2190 = Sin(var1[3]);
  t2202 = -1.*t268*t340*t232;
  t2210 = t326*t342;
  t2212 = t2202 + t2210;
  t2223 = t2190*t2212;
  t2231 = Cos(var1[3]);
  t2265 = t72*t250*t232;
  t2270 = -1.*t236*t350;
  t2271 = t2265 + t2270;
  t2277 = t2231*t2271;
  t2279 = t2223 + t2277;
  t2473 = t2231*t2212;
  t2484 = -1.*t2190*t2271;
  t2487 = t2473 + t2484;
  t2293 = -1.*t268*t340*t326;
  t2299 = t900*t342;
  t2330 = t2293 + t2299;
  t2340 = t72*t250*t326;
  t2341 = -1.*t236*t921;
  t2346 = t2340 + t2341;
  t2373 = -1.*t268*t340*t388;
  t2379 = t232*t342;
  t2392 = t2373 + t2379;
  t2421 = t72*t250*t388;
  t2424 = -1.*t236*t432;
  t2436 = t2421 + t2424;
  t2546 = 0. + t1475 + t1485;
  t2553 = t268*t1032;
  t2555 = -1.*t1557*t342;
  t2557 = 0. + t2553 + t2555;
  t2566 = t268*t1557;
  t2575 = t1032*t342;
  t2586 = 0. + t2566 + t2575;
  t2651 = -1.*t340*t2546;
  t2654 = t72*t342*t2557;
  t2656 = -1.*t72*t268*t2586;
  t2665 = t2651 + t2654 + t2656;
  t1902 = t1641*t1249*t326;
  t2751 = -1.*t268*t340*t1249;
  t2756 = t1171*t342;
  t2759 = t2751 + t2756;
  t2737 = t268*t1171;
  t2738 = t340*t1249*t342;
  t2739 = t2737 + t2738;
  t2552 = t340*t2546;
  t2561 = -1.*t72*t342*t2557;
  t2592 = t72*t268*t2586;
  t2596 = t2552 + t2561 + t2592;
  t2023 = -1.*t1641*t1249*t232;
  t2796 = t72*t2546*t232;
  t2801 = t2557*t350;
  t2812 = t2586*t2212;
  t2602 = -1.*t72*t2546*t232;
  t1643 = -1.*t1641*t1249*t326;
  t2610 = -1.*t2557*t350;
  t2611 = -1.*t2586*t2212;
  t1680 = t1641*t1249*t232;
  t3144 = t2546*t236;
  t3156 = t250*t2557;
  t3159 = 0. + t3144 + t3156;
  t3181 = t250*t2546;
  t3183 = -1.*t236*t2557;
  t3219 = 0. + t3181 + t3183;
  t3174 = t250*t340;
  t3176 = t72*t236*t342;
  t3180 = t3174 + t3176;
  t2694 = t2586*t2330;
  t3258 = -1.*t1363*t3159;
  t3260 = -1.*t3180*t3219;
  t3261 = t2656 + t3258 + t3260;
  t2775 = -1.*t72*t268*t2759;
  t2806 = t2759*t2330;
  t3323 = t72*t1249*t236;
  t3324 = t250*t2739;
  t3338 = t3323 + t3324;
  t3345 = t72*t250*t1249;
  t3351 = -1.*t236*t2739;
  t3355 = t3345 + t3351;
  t3161 = t1363*t3159;
  t3223 = t3180*t3219;
  t3224 = t2592 + t3161 + t3223;
  t2904 = t72*t268*t2759;
  t2951 = -1.*t2586*t2392;
  t2955 = -1.*t2759*t2212;
  t3382 = t3159*t368;
  t3393 = t3219*t2271;
  t3012 = -1.*t2586*t2330;
  t3043 = -1.*t2759*t2330;
  t3240 = -1.*t3159*t368;
  t3243 = -1.*t3219*t2271;
  t3075 = t2586*t2392;
  t3081 = t2759*t2212;
  t2519 = t2231*t2392;
  t2523 = -1.*t2190*t2436;
  t2525 = t2519 + t2523;
  t540 = 0.1881*t126;
  t647 = -1.*t126*t639;
  t715 = t699*t214;
  t724 = 0. + t540 + t647 + t715;
  t738 = -0.1881*t126;
  t739 = t126*t639;
  t804 = t126*t803;
  t805 = -1.*t699*t214;
  t821 = t810*t214;
  t822 = t738 + t739 + t804 + t805 + t821;
  t844 = -1.*t126*t810;
  t868 = t803*t214;
  t878 = t842 + t844 + t862 + t866 + t868;
  t2500 = t2231*t2330;
  t2505 = -1.*t2190*t2346;
  t2508 = t2500 + t2505;
  t961 = 0. + t842 + t862 + t866;
  t1071 = -1.*t1055*t326;
  t1077 = 0. + t1036 + t1071;
  t1079 = t232*t1077;
  t1081 = t1055*t232;
  t1090 = 0. + t1081 + t1084;
  t1093 = t326*t1090;
  t1119 = -1.*t1055*t232;
  t1261 = -1.*t1249*t326;
  t1284 = t1119 + t1182 + t1209 + t1261;
  t1317 = t326*t1284;
  t1332 = t1249*t232;
  t1334 = t1055*t388;
  t1337 = t1329 + t1332 + t1333 + t1334;
  t1340 = t900*t1337;
  t1347 = t1079 + t1093 + t1317 + t1340;
  t1382 = 0.081307*t326;
  t1384 = 0. + t1382;
  t1387 = -0.128057*t326;
  t1389 = -0.04675*t388;
  t1398 = t1387 + t1389;
  t1435 = -0.04675*t232;
  t1449 = -0.128057*t900;
  t1457 = 0. + t1435 + t1449;
  t1500 = -1.*t72*t1493*t326;
  t1560 = t340*t1557*t326;
  t1569 = t1036 + t1500 + t1560;
  t1572 = t72*t388*t1569;
  t1604 = t1585 + t1591 + t1084;
  t1608 = t72*t232*t1604;
  t1667 = -1.*t1653*t1249*t326;
  t1671 = t1609 + t1630 + t1182 + t1209 + t1643 + t1667;
  t1678 = t72*t232*t1671;
  t1701 = t1653*t1249*t232;
  t1708 = t72*t1493*t388;
  t1756 = -1.*t340*t1557*t388;
  t1758 = t1329 + t1680 + t1701 + t1333 + t1708 + t1756;
  t1760 = t72*t326*t1758;
  t1763 = t1572 + t1608 + t1678 + t1760;
  t3690 = t72*t2231*t268;
  t3698 = -1.*t2190*t3180;
  t3701 = t3690 + t3698;
  t1794 = t72*t1790*t232;
  t1799 = t1609 + t1630 + t1209;
  t1809 = t340*t1799;
  t1811 = t1794 + t1809;
  t1866 = t72*t1860*t232;
  t1884 = t1171*t900;
  t1919 = t1653*t1249*t326;
  t1929 = t1585 + t1591 + t1884 + t1084 + t1902 + t1919;
  t1937 = t340*t1929;
  t1954 = t1866 + t1937;
  t1989 = t72*t1790*t388;
  t2013 = -1.*t1032*t232;
  t2028 = -1.*t1653*t1249*t232;
  t2038 = -1.*t1171*t326;
  t2051 = -1.*t72*t1493*t388;
  t2052 = t340*t1557*t388;
  t2054 = t2013 + t2023 + t2028 + t2038 + t2051 + t2052;
  t2058 = t340*t2054;
  t2061 = t1989 + t2058;
  t2066 = t72*t1860*t326;
  t2067 = t1032*t900;
  t2080 = t72*t1493*t326;
  t2088 = -1.*t340*t1557*t326;
  t2116 = t2067 + t2080 + t2088;
  t2124 = t340*t2116;
  t2151 = t2066 + t2124;
  t2494 = 0.158015*t943*t2487;
  t2496 = 0.158015*t461*t2487;
  t2509 = 0.158015*t368*t2508;
  t2540 = 0.158015*t368*t2525;
  t2544 = t2494 + t2496 + t2509 + t2540;
  t2339 = t2190*t2330;
  t2350 = t2231*t2346;
  t2366 = t2339 + t2350;
  t2417 = t2190*t2392;
  t2438 = t2231*t2436;
  t2451 = t2417 + t2438;
  t2601 = t2212*t2596;
  t2621 = t2602 + t2610 + t2611;
  t2629 = t72*t268*t2621;
  t2634 = t2601 + t2629;
  t2723 = t2212*t2665;
  t2734 = -1.*t72*t340*t1249;
  t2746 = t72*t342*t2739;
  t2789 = t2734 + t2746 + t2775;
  t2790 = t2330*t2789;
  t2820 = t2739*t921;
  t2832 = t2796 + t1902 + t2801 + t2806 + t2812 + t2820;
  t2839 = t72*t268*t2832;
  t2848 = t2723 + t2790 + t2839;
  t2673 = t2330*t2665;
  t2691 = t72*t2546*t326;
  t2696 = t2557*t921;
  t2697 = t2691 + t2694 + t2696;
  t2699 = t72*t268*t2697;
  t2706 = t2673 + t2699;
  t2867 = t2392*t2596;
  t2881 = t72*t340*t1249;
  t2902 = -1.*t72*t342*t2739;
  t2909 = t2881 + t2902 + t2904;
  t2921 = t2212*t2909;
  t2938 = -1.*t72*t2546*t388;
  t2952 = -1.*t2739*t350;
  t2962 = -1.*t2557*t432;
  t2969 = t2023 + t2938 + t2951 + t2952 + t2955 + t2962;
  t2970 = t72*t268*t2969;
  t2978 = t2867 + t2921 + t2970;
  t2997 = t2796 + t2801 + t2812;
  t3004 = t2212*t2997;
  t3006 = -1.*t72*t2546*t326;
  t3020 = -1.*t2557*t921;
  t3031 = t3006 + t3012 + t3020;
  t3041 = t2392*t3031;
  t3053 = -1.*t2739*t921;
  t3055 = t2602 + t1643 + t2610 + t3043 + t2611 + t3053;
  t3063 = t2212*t3055;
  t3068 = t72*t2546*t388;
  t3076 = t2739*t350;
  t3105 = t2557*t432;
  t3107 = t1680 + t3068 + t3075 + t3076 + t3081 + t3105;
  t3122 = t2330*t3107;
  t3124 = t3004 + t3041 + t3063 + t3122;
  t3225 = t368*t3224;
  t3244 = t2611 + t3240 + t3243;
  t3246 = t1363*t3244;
  t3248 = t3225 + t3246;
  t3264 = t943*t3261;
  t3268 = t3159*t943;
  t3273 = t3219*t2346;
  t3291 = t2694 + t3268 + t3273;
  t3308 = t1363*t3291;
  t3311 = t3264 + t3308;
  t3319 = t368*t3261;
  t3340 = -1.*t1363*t3338;
  t3364 = -1.*t3180*t3355;
  t3369 = t2775 + t3340 + t3364;
  t3379 = t943*t3369;
  t3403 = t3338*t943;
  t3405 = t3355*t2346;
  t3406 = t2806 + t2812 + t3382 + t3393 + t3403 + t3405;
  t3409 = t1363*t3406;
  t3418 = t3319 + t3379 + t3409;
  t3444 = t461*t3224;
  t3447 = t1363*t3338;
  t3450 = t3180*t3355;
  t3453 = t2904 + t3447 + t3450;
  t3456 = t368*t3453;
  t3459 = -1.*t3338*t368;
  t3465 = -1.*t3355*t2271;
  t3477 = -1.*t3159*t461;
  t3500 = -1.*t3219*t2436;
  t3509 = t2951 + t2955 + t3459 + t3465 + t3477 + t3500;
  t3512 = t1363*t3509;
  t3522 = t3444 + t3456 + t3512;
  t3532 = t2812 + t3382 + t3393;
  t3533 = t368*t3532;
  t3536 = -1.*t3159*t943;
  t3541 = -1.*t3219*t2346;
  t3543 = t3012 + t3536 + t3541;
  t3547 = t461*t3543;
  t3550 = -1.*t3338*t943;
  t3556 = -1.*t3355*t2346;
  t3557 = t3043 + t2611 + t3240 + t3243 + t3550 + t3556;
  t3560 = t368*t3557;
  t3576 = t3338*t368;
  t3577 = t3355*t2271;
  t3579 = t3159*t461;
  t3582 = t3219*t2436;
  t3587 = t3075 + t3081 + t3576 + t3577 + t3579 + t3582;
  t3593 = t943*t3587;
  t3597 = t3533 + t3547 + t3560 + t3593;
  t4047 = t72*t268*t2190;
  t4050 = t2231*t3180;
  t4081 = t4047 + t4050;
  t2288 = 0.158015*t943*t2279;
  t2291 = 0.158015*t461*t2279;
  t2368 = 0.158015*t368*t2366;
  t2452 = 0.158015*t368*t2451;
  t2463 = t2288 + t2291 + t2368 + t2452;
  t3798 = 0.158015*t2487*t2366;
  t3799 = 0.158015*t2279*t2508;
  t3805 = 0.158015*t2487*t2451;
  t3808 = 0.158015*t2279*t2525;
  t3824 = t3798 + t3799 + t3805 + t3808;
  t4267 = -0.000029*t368;
  t4304 = 1.e-6*t461;
  t4367 = -0.000133*t368;
  t4341 = 1.e-6*t1363;
  t4343 = 0.003608*t368;
  t4344 = -0.000133*t943;
  t4345 = t4341 + t4343 + t4344;
  t4362 = -0.000029*t1363;
  t4368 = 0.000035*t943;
  t4380 = t4362 + t4367 + t4368;
  t4384 = 0.000035*t368;
  t4385 = -0.000133*t461;
  t4392 = t4384 + t4385;
  t4409 = 0.003608*t461;
  t4410 = t4367 + t4409;
  t4417 = t943*t3532;
  t4423 = t368*t3543;
  t4445 = t4417 + t4423;
  t3251 = 0.158015*t368*t3248;
  t3318 = 0.158015*t461*t3311;
  t3421 = 0.158015*t368*t3418;
  t3531 = 0.158015*t943*t3522;
  t3601 = 0.158015*t1363*t3597;
  t3609 = t3251 + t3318 + t3421 + t3531 + t3601;
  t4209 = 0.158015*t2279*t3248;
  t4218 = 0.158015*t2451*t3311;
  t4227 = 0.158015*t2279*t3418;
  t4238 = 0.158015*t2366*t3522;
  t4247 = 0.158015*t4081*t3597;
  t4249 = t4209 + t4218 + t4227 + t4238 + t4247;
  t3892 = 0.158015*t2487*t3248;
  t3896 = 0.158015*t2525*t3311;
  t3902 = 0.158015*t2487*t3418;
  t3903 = 0.158015*t2508*t3522;
  t3904 = 0.158015*t3701*t3597;
  t3916 = t3892 + t3896 + t3902 + t3903 + t3904;
  t4398 = t4267 + t4304;
  t4697 = 1.e-6*t2392;
  t4698 = -0.000029*t2212;
  t4758 = -0.000133*t2212;
  t4618 = t2330*t2997;
  t4621 = t2212*t3031;
  t4622 = t4618 + t4621;
  t4467 = t72*t232*t1569;
  t4473 = t72*t326*t1604;
  t4487 = t4467 + t4473;
  t4749 = 0.003608*t2392;
  t4761 = t4749 + t4758;
  t4765 = -0.000029*t72*t268;
  t4767 = 0.000035*t2330;
  t4768 = t4765 + t4767 + t4758;
  t4802 = -0.000133*t2392;
  t4808 = 0.000035*t2212;
  t4814 = t4802 + t4808;
  t4830 = 1.e-6*t72*t268;
  t4846 = -0.000133*t2330;
  t4847 = 0.003608*t2212;
  t4849 = t4830 + t4846 + t4847;
  t4542 = t326*t1077;
  t4544 = t900*t1090;
  t4545 = t4542 + t4544;
  t2642 = 0.158015*t368*t2634;
  t2718 = 0.158015*t461*t2706;
  t2851 = 0.158015*t368*t2848;
  t2996 = 0.158015*t943*t2978;
  t3137 = 0.158015*t1363*t3124;
  t3138 = t2642 + t2718 + t2851 + t2996 + t3137;
  t4186 = 0.158015*t2279*t2634;
  t4193 = 0.158015*t2279*t2848;
  t4196 = 0.158015*t2706*t2451;
  t4200 = 0.158015*t2366*t2978;
  t4203 = 0.158015*t4081*t3124;
  t4204 = t4186 + t4193 + t4196 + t4200 + t4203;
  t3869 = 0.158015*t2487*t2634;
  t3875 = 0.158015*t2487*t2848;
  t3877 = 0.158015*t2706*t2525;
  t3879 = 0.158015*t2508*t2978;
  t3884 = 0.158015*t3701*t3124;
  t3887 = t3869 + t3875 + t3877 + t3879 + t3884;
  t4796 = t4697 + t4698;
  t4594 = 0.158015*t2978*t3248;
  t4603 = 0.158015*t3124*t4445;
  t4605 = 0.158015*t2848*t3311;
  t4610 = 0.158015*t2706*t3418;
  t4614 = 0.158015*t2634*t3522;
  t4624 = 0.158015*t4622*t3597;
  t5042 = -0.000029*t72*t232;
  t5049 = 1.e-6*t72*t388;
  t5125 = -0.000133*t72*t232;
  t5109 = 1.e-6*t340;
  t5110 = 0.003608*t72*t232;
  t5111 = -0.000133*t72*t326;
  t5115 = t5109 + t5110 + t5111;
  t5119 = -0.000029*t340;
  t5129 = 0.000035*t72*t326;
  t5132 = t5119 + t5125 + t5129;
  t5135 = 0.000035*t72*t232;
  t5136 = -0.000133*t72*t388;
  t5139 = t5135 + t5136;
  t5159 = 0.003608*t72*t388;
  t5170 = t5125 + t5159;
  t1769 = 0.158015*t1763*t1363;
  t1814 = 0.158015*t1811*t368;
  t1962 = 0.158015*t1954*t368;
  t2064 = 0.158015*t2061*t943;
  t2161 = 0.158015*t2151*t461;
  t2166 = t1769 + t1814 + t1962 + t2064 + t2161;
  t4132 = 0.158015*t1763*t4081;
  t4137 = 0.158015*t1811*t2279;
  t4139 = 0.158015*t1954*t2279;
  t4141 = 0.158015*t2061*t2366;
  t4147 = 0.158015*t2151*t2451;
  t4149 = t4132 + t4137 + t4139 + t4141 + t4147;
  t3765 = 0.158015*t1763*t3701;
  t3771 = 0.158015*t1811*t2487;
  t3775 = 0.158015*t1954*t2487;
  t3777 = 0.158015*t2061*t2508;
  t3780 = 0.158015*t2151*t2525;
  t3781 = t3765 + t3771 + t3775 + t3777 + t3780;
  t5146 = t5042 + t5049;
  t4856 = 0.158015*t2061*t2634;
  t4857 = 0.158015*t1763*t4622;
  t4859 = 0.158015*t1954*t2706;
  t4866 = 0.158015*t2151*t2848;
  t4867 = 0.158015*t1811*t2978;
  t4876 = 0.158015*t4487*t3124;
  t4416 = 0.158015*t2061*t3248;
  t4457 = 0.158015*t1763*t4445;
  t4459 = 0.158015*t1954*t3311;
  t4462 = 0.158015*t2151*t3418;
  t4465 = 0.158015*t1811*t3522;
  t4490 = 0.158015*t4487*t3597;
  t5342 = -0.000029*t326;
  t5416 = -0.000133*t326;
  t5374 = 1.e-6*t232;
  t5195 = 0.158015*t1398*t2151;
  t5199 = 0.012847725605*t232*t1811;
  t5204 = 0.158015*t1457*t1954;
  t5208 = 0.158015*t4545*t1763;
  t5210 = 0.158015*t1384*t2061;
  t5212 = 0.158015*t4487*t1347;
  t5409 = 0.003608*t232;
  t5418 = t5409 + t5416;
  t5426 = 0.000035*t900;
  t5427 = t5426 + t5416;
  t5472 = -0.000133*t232;
  t5473 = 0.000035*t326;
  t5481 = t5472 + t5473;
  t5483 = -0.000133*t900;
  t5495 = 0.003608*t326;
  t5498 = t5483 + t5495;
  t1371 = 0.158015*t1347*t1363;
  t1385 = 0.158015*t1384*t368;
  t1400 = 0.158015*t1398*t368;
  t1405 = 0.012847725605*t232*t943;
  t1468 = 0.158015*t1457*t461;
  t1469 = t1371 + t1385 + t1400 + t1405 + t1468;
  t4091 = 0.158015*t1347*t4081;
  t4097 = 0.158015*t1384*t2279;
  t4103 = 0.158015*t1398*t2279;
  t4104 = 0.012847725605*t232*t2366;
  t4117 = 0.158015*t1457*t2451;
  t4120 = t4091 + t4097 + t4103 + t4104 + t4117;
  t3722 = 0.158015*t1347*t3701;
  t3728 = 0.158015*t1384*t2487;
  t3738 = 0.158015*t1398*t2487;
  t3740 = 0.012847725605*t232*t2508;
  t3741 = 0.158015*t1457*t2525;
  t3749 = t3722 + t3728 + t3738 + t3740 + t3741;
  t5444 = t5374 + t5342;
  t4903 = 0.012847725605*t232*t2634;
  t4904 = 0.158015*t1347*t4622;
  t4905 = 0.158015*t1398*t2706;
  t4915 = 0.158015*t1457*t2848;
  t4918 = 0.158015*t1384*t2978;
  t4921 = 0.158015*t4545*t3124;
  t4528 = 0.012847725605*t232*t3248;
  t4534 = 0.158015*t1347*t4445;
  t4537 = 0.158015*t1398*t3311;
  t4538 = 0.158015*t1457*t3418;
  t4539 = 0.158015*t1384*t3522;
  t4546 = 0.158015*t4545*t3597;
  t5386 = 0.012847725605*t232*t724;
  t5392 = 0.158015*t822*t1457;
  t5396 = 0.158015*t878*t1384;
  t5399 = 0.158015*t961*t1398;
  t5401 = t5374 + t5342 + t5386 + t5392 + t5396 + t5399;
  t5080 = 0.158015*t822*t2151;
  t5082 = 0.158015*t878*t1811;
  t5088 = 0.158015*t961*t1954;
  t5090 = 0.158015*t724*t2061;
  t5104 = t5042 + t5049 + t5080 + t5082 + t5088 + t5090;
  t730 = 0.158015*t724*t368;
  t835 = 0.158015*t822*t368;
  t953 = 0.158015*t878*t943;
  t964 = 0.158015*t961*t461;
  t976 = t730 + t835 + t953 + t964;
  t3955 = 0.158015*t724*t2279;
  t3958 = 0.158015*t822*t2279;
  t3959 = 0.158015*t878*t2366;
  t3960 = 0.158015*t961*t2451;
  t4004 = t3955 + t3958 + t3959 + t3960;
  t3664 = 0.158015*t724*t2487;
  t3672 = 0.158015*t822*t2487;
  t3675 = 0.158015*t878*t2508;
  t3678 = 0.158015*t961*t2525;
  t3679 = t3664 + t3672 + t3675 + t3678;
  t4719 = 0.158015*t878*t2634;
  t4727 = 0.158015*t822*t2706;
  t4730 = 0.158015*t961*t2848;
  t4739 = 0.158015*t724*t2978;
  t4743 = t4697 + t4698 + t4719 + t4727 + t4730 + t4739;
  t4317 = 0.158015*t878*t3248;
  t4322 = 0.158015*t822*t3311;
  t4324 = 0.158015*t961*t3418;
  t4333 = 0.158015*t724*t3522;
  t4338 = t4267 + t4304 + t4317 + t4322 + t4324 + t4333;
  t5583 = -0.019320336034999996*t822;
  t5584 = -0.0009932822900000022*t878;
  t5587 = t5583 + t5584;
  t5341 = -0.00007976080315303019*t232;
  t5344 = -0.019320336034999996*t1398;
  t5053 = -0.019320336034999996*t1954;
  t5057 = -0.0009932822900000022*t2061;
  t372 = -0.0009932822900000022*t368;
  t503 = -0.019320336034999996*t461;
  t512 = t372 + t503;
  t3939 = -0.0009932822900000022*t2279;
  t3944 = -0.019320336034999996*t2451;
  t3946 = t3939 + t3944;
  t3637 = -0.0009932822900000022*t2487;
  t3639 = -0.019320336034999996*t2525;
  t3643 = t3637 + t3639;
  t4707 = -0.019320336034999996*t2848;
  t4711 = -0.0009932822900000022*t2978;
  t4306 = -0.019320336034999996*t3418;
  t4307 = -0.0009932822900000022*t3522;
  p_output1[0]=var2[11]*(-0.5*(0.31603*t368*t461 + 0.31603*t368*t943)*var2[0] - 0.5*t2544*var2[1] - 0.5*t2463*var2[2] - 0.5*t3609*var2[3] - 0.5*t3138*var2[4] - 0.5*t2166*var2[5] - 0.5*t1469*var2[9] - 0.5*t976*var2[10] - 0.5*t512*var2[11]);
  p_output1[1]=var2[11]*(-0.5*t2544*var2[0] - 0.5*(0.31603*t2487*t2508 + 0.31603*t2487*t2525)*var2[1] - 0.5*t3824*var2[2] - 0.5*t3916*var2[3] - 0.5*t3887*var2[4] - 0.5*t3781*var2[5] - 0.5*t3749*var2[9] - 0.5*t3679*var2[10] - 0.5*t3643*var2[11]);
  p_output1[2]=var2[11]*(-0.5*t2463*var2[0] - 0.5*t3824*var2[1] - 0.5*(0.31603*t2279*t2366 + 0.31603*t2279*t2451)*var2[2] - 0.5*t4249*var2[3] - 0.5*t4204*var2[4] - 0.5*t4149*var2[5] - 0.5*t4120*var2[9] - 0.5*t4004*var2[10] - 0.5*t3946*var2[11]);
  p_output1[3]=var2[11]*(-0.5*t3609*var2[0] - 0.5*t3916*var2[1] - 0.5*t4249*var2[2] - 0.5*(0.31603*t3311*t3418 + 0.31603*t3248*t3522 + t368*t4380 + t1363*t4398 + t368*t4410 + 0.31603*t3597*t4445 + t4345*t461 + t4392*t943)*var2[3] - 0.5*(t2392*t4345 + t2212*t4380 + t2330*t4392 + t2212*t4410 + t4594 + t4603 + t4605 + t4610 + t4614 + t4624 + t268*t4398*t72)*var2[4] - 0.5*(t340*t4398 + t4416 + t4457 + t4459 + t4462 + t4465 + t4490 + t388*t4345*t72 + t232*t4380*t72 + t326*t4392*t72 + t232*t4410*t72)*var2[5] - 0.5*(t232*t4345 + t326*t4380 + t326*t4410 + t4528 + t4534 + t4537 + t4538 + t4539 + t4546 + t4392*t900)*var2[9] - 0.5*t4338*var2[10] - 0.5*(t4267 + t4304 + t4306 + t4307)*var2[11]);
  p_output1[4]=var2[11]*(-0.5*t3138*var2[0] - 0.5*t3887*var2[1] - 0.5*t4204*var2[2] - 0.5*(t4594 + t4603 + t4605 + t4610 + t4614 + t4624 + t368*t4761 + t368*t4768 + t1363*t4796 + t461*t4849 + t4814*t943)*var2[3] - 0.5*(0.31603*t2706*t2848 + 0.31603*t2634*t2978 + 0.31603*t3124*t4622 + t2212*t4761 + t2212*t4768 + t2330*t4814 + t2392*t4849 + t268*t4796*t72)*var2[4] - 0.5*(t340*t4796 + t4856 + t4857 + t4859 + t4866 + t4867 + t4876 + t232*t4761*t72 + t232*t4768*t72 + t326*t4814*t72 + t388*t4849*t72)*var2[5] - 0.5*(t326*t4761 + t326*t4768 + t232*t4849 + t4903 + t4904 + t4905 + t4915 + t4918 + t4921 + t4814*t900)*var2[9] - 0.5*t4743*var2[10] - 0.5*(t4697 + t4698 + t4707 + t4711)*var2[11]);
  p_output1[5]=var2[11]*(-0.5*t2166*var2[0] - 0.5*t3781*var2[1] - 0.5*t4149*var2[2] - 0.5*(t4416 + t4457 + t4459 + t4462 + t4465 + t4490 + t461*t5115 + t368*t5132 + t1363*t5146 + t368*t5170 + t5139*t943)*var2[3] - 0.5*(t4856 + t4857 + t4859 + t4866 + t4867 + t4876 + t2392*t5115 + t2212*t5132 + t2330*t5139 + t2212*t5170 + t268*t5146*t72)*var2[4] - 0.5*(0.31603*t1811*t2061 + 0.31603*t1954*t2151 + 0.31603*t1763*t4487 + t340*t5146 + t388*t5115*t72 + t232*t5132*t72 + t326*t5139*t72 + t232*t5170*t72)*var2[5] - 0.5*(t232*t5115 + t326*t5132 + t326*t5170 + t5195 + t5199 + t5204 + t5208 + t5210 + t5212 + t5139*t900)*var2[9] - 0.5*t5104*var2[10] - 0.5*(t5042 + t5049 + t5053 + t5057)*var2[11]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=var2[11]*(-0.5*t1469*var2[0] - 0.5*t3749*var2[1] - 0.5*t4120*var2[2] - 0.5*(t4528 + t4534 + t4537 + t4538 + t4539 + t4546 + t368*t5418 + t368*t5427 + t1363*t5444 + t461*t5498 + t5481*t943)*var2[3] - 0.5*(t4903 + t4904 + t4905 + t4915 + t4918 + t4921 + t2212*t5418 + t2212*t5427 + t2330*t5481 + t2392*t5498 + t268*t5444*t72)*var2[4] - 0.5*(t5195 + t5199 + t5204 + t5208 + t5210 + t5212 + t340*t5444 + t232*t5418*t72 + t232*t5427*t72 + t326*t5481*t72 + t388*t5498*t72)*var2[5] - 0.5*(0.31603*t1398*t1457 + 0.02569545121*t1384*t232 + 0.31603*t1347*t4545 + t326*t5418 + t326*t5427 + t232*t5498 + t5481*t900)*var2[9] - 0.5*t5401*var2[10] - 0.5*(t5341 + t5342 + t5344)*var2[11]);
  p_output1[10]=var2[11]*(-0.5*t976*var2[0] - 0.5*t3679*var2[1] - 0.5*t4004*var2[2] - 0.5*t4338*var2[3] - 0.5*t4743*var2[4] - 0.5*t5104*var2[5] - 0.5*t5401*var2[9] - 0.5*(0.31603*t724*t878 + 0.31603*t822*t961)*var2[10] - 0.5*t5587*var2[11]);
  p_output1[11]=(-0.5*t512*var2[0] - 0.5*t3643*var2[1] - 0.5*t3946*var2[2] - 0.5*(-0.000029*t368 + t4306 + t4307 + 1.e-6*t461)*var2[3] - 0.5*(-0.000029*t2212 + 1.e-6*t2392 + t4707 + t4711)*var2[4] - 0.5*(t5053 + t5057 - 0.000029*t232*t72 + 1.e-6*t388*t72)*var2[5] - 0.5*(-0.000029*t326 + t5341 + t5344)*var2[9] - 0.5*t5587*var2[10])*var2[11];
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec12_go1_description.hh"

namespace SymFunction
{

void Ce2_vec12_go1_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
